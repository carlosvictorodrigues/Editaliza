/**
 * @file test-home-manual.js
 * @description Teste manual para verificar se a tela inicial est√° funcionando
 */

const http = require('http');
const fs = require('fs');
const path = require('path');

async function testHomePageManually() {
    console.log('üîç INICIANDO TESTES MANUAIS DA TELA INICIAL...\n');
    
    // 1. Verificar se arquivos existem
    console.log('üìÅ VERIFICANDO ARQUIVOS:');
    const files = [
        'home.html',
        'js/app.js',
        'js/components.js',
        'js/checklist.js',
        'js/timer.js',
        'css/style.css'
    ];
    
    files.forEach(file => {
        const filePath = path.join(__dirname, file);
        const exists = fs.existsSync(filePath);
        const status = exists ? '‚úÖ' : '‚ùå';
        const size = exists ? `(${fs.statSync(filePath).size} bytes)` : '';
        console.log(`  ${status} ${file} ${size}`);
    });
    
    // 2. Verificar se servidor est√° rodando
    console.log('\nüåê VERIFICANDO SERVIDOR:');
    
    try {
        const serverResponse = await makeRequest('http://localhost:3000/health');
        console.log('  ‚úÖ Servidor est√° rodando');
        console.log(`  üìä Status: ${serverResponse.status}`);
    } catch (error) {
        console.log('  ‚ùå Servidor n√£o est√° rodando ou n√£o responde');
        console.log('  üí° Execute: npm start');
        return;
    }
    
    // 3. Testar endpoints da API
    console.log('\nüîå TESTANDO ENDPOINTS DA API:');
    
    const endpoints = [
        '/profile',
        '/plans/1',
        '/plans/1/progress',
        '/schedules/1/range?startDate=2024-01-01&endDate=2024-01-01'
    ];
    
    for (const endpoint of endpoints) {
        try {
            const response = await makeRequest(`http://localhost:3000${endpoint}`);
            console.log(`  ‚úÖ ${endpoint} - Status: ${response.status}`);
        } catch (error) {
            console.log(`  ‚ö†Ô∏è  ${endpoint} - Erro: ${error.message}`);
        }
    }
    
    // 4. Verificar conte√∫do do home.html
    console.log('\nüìÑ ANALISANDO CONTE√öDO DO HOME.HTML:');
    
    const homeContent = fs.readFileSync(path.join(__dirname, 'home.html'), 'utf-8');
    
    const checks = [
        { name: 'T√≠tulo correto', test: () => homeContent.includes('Painel Principal - Editaliza') },
        { name: 'Tailwind CSS', test: () => homeContent.includes('tailwindcss.com') },
        { name: 'Scripts principais', test: () => ['app.js', 'components.js', 'checklist.js', 'timer.js'].every(script => homeContent.includes(script)) },
        { name: 'Elementos principais', test: () => ['welcomeMessage', 'userAvatar', 'todaySchedule'].every(id => homeContent.includes(`id="${id}"`)) },
        { name: 'Modal de estudo', test: () => homeContent.includes('studySessionModal') },
        { name: 'Cores da marca', test: () => homeContent.includes('#0528f2') && homeContent.includes('#1ad937') }
    ];
    
    checks.forEach(check => {
        const result = check.test();
        const status = result ? '‚úÖ' : '‚ùå';
        console.log(`  ${status} ${check.name}`);
    });
    
    // 5. Simular carregamento da p√°gina
    console.log('\nüñ•Ô∏è  SIMULANDO CARREGAMENTO DA P√ÅGINA:');
    
    try {
        const pageResponse = await makeRequest('http://localhost:3000/home.html');
        console.log(`  ‚úÖ P√°gina carregada - Status: ${pageResponse.status}`);
        
        if (pageResponse.data) {
            const hasBasicStructure = pageResponse.data.includes('<html') && 
                                    pageResponse.data.includes('<head>') && 
                                    pageResponse.data.includes('<body>');
            console.log(`  ${hasBasicStructure ? '‚úÖ' : '‚ùå'} Estrutura HTML v√°lida`);
            
            const hasScripts = pageResponse.data.includes('app.js');
            console.log(`  ${hasScripts ? '‚úÖ' : '‚ùå'} Scripts inclu√≠dos`);
        }
        
    } catch (error) {
        console.log(`  ‚ùå Erro ao carregar p√°gina: ${error.message}`);
    }
    
    // 6. Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL:');
    console.log('='*50);
    
    const totalChecks = files.length + endpoints.length + checks.length + 1; // +1 para servidor
    const passedChecks = files.filter(f => fs.existsSync(path.join(__dirname, f))).length +
                        checks.filter(c => c.test()).length + 2; // +2 estimados para servidor e p√°gina
    
    const successRate = Math.round((passedChecks / totalChecks) * 100);
    
    console.log(`‚úÖ Taxa de sucesso estimada: ${successRate}%`);
    
    if (successRate >= 80) {
        console.log('üéâ TELA INICIAL PARECE ESTAR FUNCIONANDO CORRETAMENTE!');
    } else if (successRate >= 60) {
        console.log('‚ö†Ô∏è  TELA INICIAL TEM ALGUNS PROBLEMAS, MAS FUNCIONA B√ÅSICAMENTE');
    } else {
        console.log('‚ùå TELA INICIAL TEM PROBLEMAS S√âRIOS');
    }
    
    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('1. Acesse http://localhost:3000/home.html');
    console.log('2. Verifique se n√£o h√° erros no console do navegador');
    console.log('3. Teste a navega√ß√£o e funcionalidades manualmente');
    console.log('4. Verifique se os dados carregam corretamente');
    
    console.log('\nüèÅ TESTE MANUAL FINALIZADO!\n');
}

function makeRequest(url) {
    return new Promise((resolve, reject) => {
        const request = http.get(url, (response) => {
            let data = '';
            
            response.on('data', chunk => {
                data += chunk;
            });
            
            response.on('end', () => {
                resolve({
                    status: response.statusCode,
                    data: data
                });
            });
        });
        
        request.on('error', (error) => {
            reject(error);
        });
        
        request.setTimeout(5000, () => {
            request.destroy();
            reject(new Error('Timeout'));
        });
    });
}

// Executar teste se chamado diretamente
if (require.main === module) {
    testHomePageManually().catch(console.error);
}

module.exports = { testHomePageManually };