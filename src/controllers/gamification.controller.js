/**
 * GAMIFICATION CONTROLLER
 * 
 * Controla todas as funcionalidades de gamifica√ß√£o do sistema:
 * - C√°lculo de XP (Experience Points)
 * - Sistema de n√≠veis e progress√£o
 * - Desbloqueio de conquistas (achievements)
 * - Sistema de streaks (sequ√™ncias de estudo)
 * - Tracking de progresso gamificado
 * - Novos endpoints para gamifica√ß√£o completa
 * 
 * CR√çTICO: Todas as f√≥rmulas de c√°lculo devem ser mantidas EXATAMENTE como est√£o
 * para preservar a consist√™ncia dos dados existentes.
 */

const { dbGet, dbAll, dbRun } = require('../config/database');
const gamificationService = require('../services/gamificationService');

// Fun√ß√£o utilit√°ria para data brasileira (preservada do server.js original)
function getBrazilianDateString() {
    const now = new Date();
    // Criar objeto Date diretamente no timezone brasileiro
    const year = parseInt(now.toLocaleString('en-CA', {timeZone: 'America/Sao_Paulo', year: 'numeric'}));
    const month = String(parseInt(now.toLocaleString('en-CA', {timeZone: 'America/Sao_Paulo', month: 'numeric'}))).padStart(2, '0');
    const day = String(parseInt(now.toLocaleString('en-CA', {timeZone: 'America/Sao_Paulo', day: 'numeric'}))).padStart(2, '0');
    
    return `${year}-${month}-${day}`;
}

/**
 * SISTEMA DE N√çVEIS - PRESERVADO EXATAMENTE COMO ORIGINAL
 * Cada threshold representa o n√∫mero de t√≥picos completados necess√°rios
 */
const GAMIFICATION_LEVELS = [
    { threshold: 0, title: 'Aspirante a Servidor(a) üå±' },
    { threshold: 11, title: 'Pagador(a) de Inscri√ß√£o üí∏' },
    { threshold: 31, title: 'Acima da Nota de Corte (nos simulados) üòâ' },
    { threshold: 51, title: 'Mestre dos Grupos de WhatsApp de Concurso üì≤' },
    { threshold: 101, title: 'Gabaritador(a) da prova de Portugu√™s da FGV üéØ' },
    { threshold: 201, title: 'Terror do Cespe/Cebraspe üëπ' },
    { threshold: 351, title: 'Veterano(a) de 7 Bancas Diferentes üòé' },
    { threshold: 501, title: '‚ú® Lenda Viva: Assinante Vital√≠cio do Di√°rio Oficial ‚ú®' }
];

/**
 * Calcula o n√≠vel atual do usu√°rio baseado no n√∫mero de t√≥picos completados
 * CR√çTICO: L√≥gica preservada exatamente como no servidor original
 */
function calculateUserLevel(completedTopicsCount) {
    let currentLevel = GAMIFICATION_LEVELS[0];
    let nextLevel = null;
    
    // Percorre os n√≠veis de tr√°s para frente para encontrar o n√≠vel atual
    for (let i = GAMIFICATION_LEVELS.length - 1; i >= 0; i--) {
        if (completedTopicsCount >= GAMIFICATION_LEVELS[i].threshold) {
            currentLevel = GAMIFICATION_LEVELS[i];
            if (i < GAMIFICATION_LEVELS.length - 1) {
                nextLevel = GAMIFICATION_LEVELS[i + 1];
            }
            break;
        }
    }
    
    const topicsToNextLevel = nextLevel ? nextLevel.threshold - completedTopicsCount : 0;
    
    return {
        currentLevel: currentLevel.title,
        nextLevel: nextLevel ? nextLevel.title : null,
        topicsToNextLevel
    };
}

/**
 * Calcula o streak de estudos (dias consecutivos)
 * PRESERVADO: L√≥gica complexa de c√°lculo de streak mantida exatamente
 */
async function calculateStudyStreak(planId) {
    const completedSessions = await dbAll(`
        SELECT DISTINCT session_date FROM study_sessions 
        WHERE study_plan_id = $1 AND status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') ORDER BY session_date DESC
    `, [planId]);
    
    let studyStreak = 0;
    if (completedSessions.length > 0) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);

        const lastStudyDate = new Date(completedSessions[0].session_date + 'T00:00:00');
        
        // Verifica se estudou hoje ou ontem para come√ßar a contar o streak
        if (lastStudyDate.getTime() === today.getTime() || lastStudyDate.getTime() === yesterday.getTime()) {
            studyStreak = 1;
            let currentDate = new Date(lastStudyDate);
            
            // Conta dias consecutivos anteriores
            for (let i = 1; i < completedSessions.length; i++) {
                const previousDay = new Date(currentDate);
                previousDay.setDate(currentDate.getDate() - 1);
                const nextStudyDate = new Date(completedSessions[i].session_date + 'T00:00:00');
                
                if (nextStudyDate.getTime() === previousDay.getTime()) {
                    studyStreak++;
                    currentDate = nextStudyDate;
                } else {
                    break; // Quebra na sequ√™ncia
                }
            }
        }
    }
    
    return studyStreak;
}

/**
 * Gera conquistas baseadas em crit√©rios espec√≠ficos
 * PRESERVADO: Sistema de achievements com humor mantido integralmente
 */
function generateAchievements(completedTopicsCount, totalCompletedSessions, studyStreak) {
    const achievements = [];
    const now = new Date().toISOString();
    
    // === CONQUISTAS POR T√ìPICOS CONCLU√çDOS ===
    // Sistema com muito humor para aliviar a press√£o dos estudos!
    
    if (completedTopicsCount >= 1) {
        achievements.push({
            title: 'üéØ Primeira Lapada no Edital',
            description: 'O primeiro soco na cara da procrastina√ß√£o!',
            achieved_date: now
        });
    }
    
    if (completedTopicsCount >= 5) {
        achievements.push({
            title: 'üìö Maratonista do PDF',
            description: 'Sua vista j√° come√ßou a reclamar.',
            achieved_date: now
        });
    }
    
    if (completedTopicsCount >= 10) {
        achievements.push({
            title: '‚ú® Destruidor de Quest√µes',
            description: 'J√° discute gabarito com confian√ßa.',
            achieved_date: now
        });
    }
    
    if (completedTopicsCount >= 25) {
        achievements.push({
            title: 'üëë Dono do Material',
            description: 'Sabe at√© a cor da caneta que o professor usou no slide.',
            achieved_date: now
        });
    }
    
    if (completedTopicsCount >= 50) {
        achievements.push({
            title: 'üåü Meio Monstro',
            description: 'Voc√™ est√° virando uma lenda local no grupo de estudos.',
            achieved_date: now
        });
    }
    
    if (completedTopicsCount >= 100) {
        achievements.push({
            title: 'üèõÔ∏è Centuri√£o do Conhecimento',
            description: 'Bancas j√° est√£o te bloqueando no Instagram.',
            achieved_date: now
        });
    }
    
    if (completedTopicsCount >= 200) {
        achievements.push({
            title: 'üí™ Chuck Norris dos Editais',
            description: 'Os editais temem voc√™!',
            achieved_date: now
        });
    }
    
    if (completedTopicsCount >= 501) {
        achievements.push({
            title: 'üèõÔ∏è Vai Escolher Onde Vai Tomar Posse',
            description: 'N√£o √© se vai passar, √© onde.',
            achieved_date: now
        });
    }
    
    // === CONQUISTAS POR STREAK (SEQU√äNCIA DE ESTUDOS) ===
    
    if (studyStreak >= 3) {
        achievements.push({
            title: 'Resistente ao Netflix üì∫',
            description: '3 dias seguidos! Resistiu √† s√©rie nova!',
            achieved_date: now
        });
    }
    
    if (studyStreak >= 7) {
        achievements.push({
            title: 'Imune ao Sof√° üõãÔ∏è',
            description: '7 dias! O sof√° esqueceu sua forma!',
            achieved_date: now
        });
    }
    
    if (studyStreak >= 14) {
        achievements.push({
            title: 'Inimigo do Descanso üò§',
            description: '14 dias! Descanso? N√£o conhe√ßo!',
            achieved_date: now
        });
    }
    
    if (studyStreak >= 30) {
        achievements.push({
            title: 'M√°quina de Aprovar ü§ñ',
            description: '30 dias! Voc√™ √© um cyborg concurseiro!',
            achieved_date: now
        });
    }
    
    // === CONQUISTAS POR N√öMERO DE SESS√ïES ===
    
    if (totalCompletedSessions >= 20) {
        achievements.push({
            title: 'Viciado(a) em Quest√µes üíä',
            description: '20 sess√µes! Quest√µes s√£o sua droga legal!',
            achieved_date: now
        });
    }
    
    if (totalCompletedSessions >= 50) {
        achievements.push({
            title: 'ü™ë Lombar Suprema',
            description: 'J√° fez mais fisioterapia que simulados.',
            achieved_date: now
        });
    }
    
    if (totalCompletedSessions >= 100) {
        achievements.push({
            title: 'üõèÔ∏è Travesseiro Vade Mecum',
            description: 'Seu travesseiro j√° est√° com formato de Vade Mecum.',
            achieved_date: now
        });
    }
    
    if (totalCompletedSessions >= 150) {
        achievements.push({
            title: 'üìñ Estuda em Fila de Banco',
            description: 'Estuda at√© em fila de banco.',
            achieved_date: now
        });
    }
    
    if (totalCompletedSessions >= 200) {
        achievements.push({
            title: 'üèñÔ∏è O que √© F√©rias?',
            description: 'F√©rias? Nunca ouvi falar.',
            achieved_date: now
        });
    }
    
    if (totalCompletedSessions >= 300) {
        achievements.push({
            title: 'üéâ Destruidor(a) de Finais de Semana',
            description: 'Churrasco? Praia? S√≥ depois da posse!',
            achieved_date: now
        });
    }
    
    return achievements;
}

/**
 * CONTROLLER PRINCIPAL: Obt√©m todos os dados de gamifica√ß√£o de um plano
 * PRESERVADO: Toda a l√≥gica de c√°lculo mantida exatamente como original
 */
async function getPlanGamification(req, res) {
    const planId = req.params.planId;
    const userId = req.user.id;

    try {
        // Verificar se o plano pertence ao usu√°rio
        const plan = await dbGet('SELECT id FROM study_plans WHERE id = $1 AND user_id = $2', [planId, userId]);
        if (!plan) {
            return res.status(404).json({ error: 'Plano n√£o encontrado ou n√£o autorizado.' });
        }

        // 1. CONTAR T√ìPICOS √öNICOS CONCLU√çDOS
        // CR√çTICO: Query preservada exatamente como original
        const completedTopicsResult = await dbGet(`
            SELECT COUNT(DISTINCT topic_id) as count 
            FROM study_sessions 
            WHERE study_plan_id = $1 
            AND status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') 
            AND topic_id IS NOT NULL
        `, [planId]);
        const completedTopicsCount = parseInt(completedTopicsResult?.count || 0);
        
        // Debug log preservado
        console.log(`[GAMIFICATION DEBUG] Plan ${planId}:`, {
            completedTopicsCount,
            queryResult: completedTopicsResult
        });

        // 2. CALCULAR N√çVEL E PROGRESS√ÉO
        const levelData = calculateUserLevel(completedTopicsCount);

        // 3. CALCULAR STREAK DE ESTUDOS
        const studyStreak = await calculateStudyStreak(planId);
        
        // 4. DADOS DE PROGRESSO DO DIA
        const todayStr = getBrazilianDateString();
        const todayTasksResult = await dbGet(`
            SELECT 
                COUNT(id) as total, 
                SUM(CASE WHEN status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') THEN 1 ELSE 0 END) as completed 
            FROM study_sessions 
            WHERE study_plan_id = $1 AND session_date = $2
        `, [planId, todayStr]);

        // 5. CALCULAR EXPERI√äNCIA TOTAL
        // F√ìRMULA PRESERVADA: 10 XP por sess√£o + 50 XP por t√≥pico novo
        const allCompletedSessionsResult = await dbGet(`
            SELECT COUNT(*) as count 
            FROM study_sessions 
            WHERE study_plan_id = $1 AND status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida')
        `, [planId]);
        const totalCompletedSessions = parseInt(allCompletedSessionsResult?.count || 0);
        
        console.log(`[GAMIFICATION DEBUG] Total sessions:`, {
            totalCompletedSessions,
            queryResult: allCompletedSessionsResult
        });
        
        // XP CALCULATION: F√ìRMULA CR√çTICA PRESERVADA
        const experiencePoints = (totalCompletedSessions * 10) + (completedTopicsCount * 50);
        
        // 6. GERAR CONQUISTAS
        const achievements = generateAchievements(completedTopicsCount, totalCompletedSessions, studyStreak);
        
        console.log(`[GAMIFICATION DEBUG] Achievements calculados:`, {
            count: achievements.length,
            totalSessions: totalCompletedSessions,
            streak: studyStreak
        });
        
        // 7. ESTAT√çSTICAS ADICIONAIS
        // Calcular total de dias √∫nicos com atividades
        const uniqueStudyDaysResult = await dbGet(`
            SELECT COUNT(DISTINCT session_date) as count 
            FROM study_sessions 
            WHERE study_plan_id = $1 AND status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida')
        `, [planId]);
        const totalStudyDays = uniqueStudyDaysResult.count || 0;

        // Calcular tempo total de estudo
        const totalStudyTimeResult = await dbGet(`
            SELECT SUM(COALESCE(time_studied_seconds, 0)) as total_time
            FROM study_sessions 
            WHERE study_plan_id = $1 AND status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida')
        `, [planId]);
        const totalStudyTime = totalStudyTimeResult.total_time || 0;
        
        console.log(`üìä Endpoint gamifica√ß√£o - Plano ${planId}: tempo total = ${totalStudyTime} segundos`);

        // RESPOSTA FINAL - Estrutura preservada do original
        res.json({
            completedTopicsCount,
            concurseiroLevel: levelData.currentLevel,
            nextLevel: levelData.nextLevel,
            topicsToNextLevel: levelData.topicsToNextLevel,
            studyStreak,
            completedTodayCount: todayTasksResult.completed || 0,
            totalTodayCount: todayTasksResult.total || 0,
            experiencePoints,
            achievements,
            totalStudyDays,
            totalCompletedSessions,
            totalStudyTime
        });

    } catch (error) {
        console.error('Erro na rota de gamifica√ß√£o:', error);
        return res.status(500).json({ error: 'Erro ao buscar dados de gamifica√ß√£o.' });
    }
}

/**
 * NOVOS ENDPOINTS DE GAMIFICA√á√ÉO COMPLETA
 */

/**
 * GET /api/stats/user - Estat√≠sticas do usu√°rio
 * Retorna XP total, n√≠vel atual, streak, sess√µes completadas, horas estudadas
 */
async function getUserStats(req, res) {
    const userId = req.user.id;
    
    try {
        const stats = await gamificationService.getUserStats(userId);
        
        res.json({
            success: true,
            data: stats
        });
        
    } catch (error) {
        console.error('Erro ao buscar estat√≠sticas do usu√°rio:', error);
        res.status(500).json({
            error: 'Erro ao buscar estat√≠sticas do usu√°rio',
            code: 'USER_STATS_ERROR'
        });
    }
}

/**
 * GET /api/progress - Progresso do plano
 * Retorna porcentagem de conclus√£o, sess√µes completadas vs total, t√≥picos dominados
 */
async function getUserProgress(req, res) {
    const userId = req.user.id;
    
    try {
        const progress = await gamificationService.getUserProgress(userId);
        
        res.json({
            success: true,
            data: progress
        });
        
    } catch (error) {
        console.error('Erro ao buscar progresso do usu√°rio:', error);
        res.status(500).json({
            error: 'Erro ao buscar progresso do usu√°rio',
            code: 'USER_PROGRESS_ERROR'
        });
    }
}

/**
 * GET /api/achievements - Conquistas do usu√°rio
 * Retorna lista de conquistas desbloqueadas, progresso para pr√≥ximas conquistas, badges
 */
async function getUserAchievements(req, res) {
    const userId = req.user.id;
    
    try {
        const achievements = await gamificationService.getUserAchievements(userId);
        
        res.json({
            success: true,
            data: achievements
        });
        
    } catch (error) {
        console.error('Erro ao buscar conquistas do usu√°rio:', error);
        res.status(500).json({
            error: 'Erro ao buscar conquistas do usu√°rio',
            code: 'USER_ACHIEVEMENTS_ERROR'
        });
    }
}

/**
 * GET /api/statistics - Estat√≠sticas gerais
 * Retorna m√©tricas de desempenho, gr√°ficos de progresso, compara√ß√£o com metas
 */
async function getGeneralStatistics(req, res) {
    const userId = req.user.id;
    
    try {
        const statistics = await gamificationService.getGeneralStatistics(userId);
        
        res.json({
            success: true,
            data: statistics
        });
        
    } catch (error) {
        console.error('Erro ao buscar estat√≠sticas gerais:', error);
        res.status(500).json({
            error: 'Erro ao buscar estat√≠sticas gerais',
            code: 'GENERAL_STATISTICS_ERROR'
        });
    }
}

/**
 * GET /api/gamification/profile - Perfil completo de gamifica√ß√£o do usu√°rio
 */
async function getGamificationProfile(req, res) {
    const userId = req.user.id;
    const t0 = process.hrtime.bigint();
    
    console.log(`[GAMI CONTROLLER] Iniciando getGamificationProfile para userId: ${userId}`);
    
    res.on('finish', () => {
        const ms = Number((process.hrtime.bigint() - t0) / 1_000_000n);
        console.log(`[GAMI] finish ${res.statusCode} in ${ms}ms`);
    });
    res.on('close',  () => console.warn('[GAMI] close (cliente abortou?)'));

    try {
        console.log('[GAMI CONTROLLER] Chamando gamificationService.getGamificationProfile...');
        
        // Adicionar timeout para evitar travamento
        const profileDataPromise = gamificationService.getGamificationProfile(userId);
        const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout ao buscar gamifica√ß√£o')), 5000)
        );
        
        const profileData = await Promise.race([profileDataPromise, timeoutPromise]);
        
        console.log('[GAMI CONTROLLER] Dados recebidos do service, enviando resposta...');
        console.log('[GAMI CONTROLLER] profileData keys:', Object.keys(profileData));
        console.log('[GAMI CONTROLLER] res.headersSent antes de enviar:', res.headersSent);
        
        if (!res.headersSent) {
            res.status(200).json(profileData);
            res.end(); // For√ßar envio da resposta
            console.log('[GAMI CONTROLLER] res.json() e res.end() chamados com sucesso');
        } else {
            console.warn('[GAMI CONTROLLER] Headers j√° enviados, n√£o pode enviar resposta');
        }
        
    } catch (error) {
        console.error('[GAMI CONTROLLER] ERRO capturado:', error.message);
        console.error('[GAMI CONTROLLER] Stack:', error.stack);
        
        // Retornar dados padr√£o em caso de erro
        const defaultData = { 
            xp: 0, 
            level: 1, 
            current_streak: 0, 
            longest_streak: 0, 
            level_info: { threshold: 0, title: 'Aspirante a Servidor(a) üå±' }, 
            achievements: [] 
        };
        
        console.log('[GAMI CONTROLLER] Enviando dados padr√£o ap√≥s erro...');
        console.log('[GAMI CONTROLLER] res.headersSent antes de enviar erro:', res.headersSent);
        
        if (!res.headersSent) {
            res.status(200).json(defaultData);
            res.end(); // For√ßar envio da resposta
            console.log('[GAMI CONTROLLER] res.json() e res.end() com dados padr√£o chamados');
        } else {
            console.warn('[GAMI CONTROLLER] Headers j√° enviados, n√£o pode enviar resposta de erro');
        }
    }
}

module.exports = {
    // Endpoint original preservado
    getPlanGamification,
    
    // Novos endpoints de gamifica√ß√£o completa
    getUserStats,
    getUserProgress,
    getUserAchievements,
    getGeneralStatistics,
    getGamificationProfile, // Adicionado novo endpoint
    
    // Fun√ß√µes auxiliares para reutiliza√ß√£o
    calculateUserLevel,
    calculateStudyStreak,
    generateAchievements,
    getBrazilianDateString,
    GAMIFICATION_LEVELS
};