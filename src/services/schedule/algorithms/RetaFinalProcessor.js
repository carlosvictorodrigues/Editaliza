const { DateCalculator } = require('../utils');
const logger = require('../../../utils/logger');

/**
 * Processador de Reta Final
 * Implementa o algoritmo de exclus√£o inteligente do server.js (linhas 2060-2133)
 * 
 * Funcionalidades:
 * - Exclus√£o baseada em prioridade combinada: (subject_priority * 10) + topic_priority
 * - Sele√ß√£o dos N t√≥picos mais importantes
 * - Registro de exclus√µes para auditoria
 * - Mensagens de warning sobre exclus√µes
 * - Manuten√ß√£o de integridade das tabelas de exclus√£o
 */
class RetaFinalProcessor {
    
    /**
     * Processa modo reta final quando h√° mais t√≥picos que slots dispon√≠veis
     * L√≥gica EXATA do server.js (linhas 2060-2133)
     * 
     * @param {Array} pendingTopics - T√≥picos pendentes de agendamento
     * @param {number} availableSlots - Slots dispon√≠veis para agendamento
     * @param {number} planId - ID do plano de estudo
     * @param {boolean} isRetaFinalEnabled - Se modo reta final est√° habilitado
     * @param {Function} dbExecutor - Fun√ß√£o para executar opera√ß√µes no banco
     * @returns {Object} Resultado do processamento
     */
    static async processRetaFinal(pendingTopics, availableSlots, planId, isRetaFinalEnabled, dbExecutor) {
        logger.info(`[RetaFinal] Processando ${pendingTopics.length} t√≥picos para ${availableSlots} slots`);
        
        // Verificar se precisa do modo reta final
        if (pendingTopics.length <= availableSlots) {
            logger.info(`[RetaFinal] Todos os ${pendingTopics.length} t√≥picos cabem nos ${availableSlots} slots dispon√≠veis`);
            
            // Limpar exclus√µes antigas se n√£o h√° mais necessidade
            await this._clearExclusions(planId, dbExecutor);
            
            return {
                needsRetaFinal: false,
                topicsToSchedule: pendingTopics,
                excludedTopics: [],
                prioritizedSubjects: [],
                message: `Todos os ${pendingTopics.length} t√≥picos ser√£o agendados`
            };
        }
        
        // Verificar se modo reta final est√° habilitado
        if (!isRetaFinalEnabled) {
            const error = `‚ùå CRONOGRAMA INVI√ÅVEL: ${pendingTopics.length} t√≥picos para apenas ${availableSlots} sess√µes. Ative o Modo Reta Final para priorizar as disciplinas mais importantes.`;
            logger.error(`[RetaFinal] ${error}`);
            
            return {
                needsRetaFinal: true,
                isEnabled: false,
                error,
                topicsCount: pendingTopics.length,
                availableSlots
            };
        }
        
        // Executar prioriza√ß√£o e exclus√µes
        const result = await this._executeRetaFinalLogic(
            pendingTopics,
            availableSlots,
            planId,
            dbExecutor
        );
        
        logger.info(`[RetaFinal] Processamento conclu√≠do: ${result.topicsToSchedule.length} selecionados, ${result.excludedTopics.length} exclu√≠dos`);
        
        return result;
    }
    
    /**
     * Executa a l√≥gica principal do modo reta final
     * Implementa linhas 2068-2133 do server.js
     * 
     * @param {Array} pendingTopics - T√≥picos pendentes
     * @param {number} availableSlots - Slots dispon√≠veis
     * @param {number} planId - ID do plano
     * @param {Function} dbExecutor - Executor de banco
     * @returns {Object} Resultado da execu√ß√£o
     */
    static async _executeRetaFinalLogic(pendingTopics, availableSlots, planId, dbExecutor) {
        // Combinar peso da disciplina e do t√≥pico para prioriza√ß√£o (linhas 2069-2073)
        const sortedTopics = this._sortTopicsByPriority(pendingTopics);
        
        // Dividir em t√≥picos selecionados e exclu√≠dos (linhas 2074-2075)
        const topicsToSchedule = sortedTopics.slice(0, availableSlots);
        const excludedTopics = sortedTopics.slice(availableSlots);
        
        // Criar mapa de disciplinas priorizadas (linhas 2077-2083)
        const prioritizedSubjects = this._extractPrioritizedSubjects(topicsToSchedule);
        
        // Processar exclus√µes no banco de dados (linhas 2086-2133)
        await this._processExclusions(excludedTopics, planId, dbExecutor);
        
        const message = this._generateRetaFinalMessage(
            topicsToSchedule.length,
            excludedTopics.length,
            availableSlots
        );
        
        return {
            needsRetaFinal: true,
            isEnabled: true,
            topicsToSchedule,
            excludedTopics,
            prioritizedSubjects,
            message,
            statistics: this._generateStatistics(sortedTopics, topicsToSchedule, excludedTopics)
        };
    }
    
    /**
     * Ordena t√≥picos por prioridade combinada
     * Implementa a f√≥rmula EXATA: (subject_priority * 10) + topic_priority (linhas 2069-2073)
     * 
     * @param {Array} topics - T√≥picos para ordenar
     * @returns {Array} T√≥picos ordenados por prioridade decrescente
     */
    static _sortTopicsByPriority(topics) {
        logger.debug(`[RetaFinal] Ordenando ${topics.length} t√≥picos por prioridade combinada`);
        
        const sortedTopics = [...topics].sort((a, b) => {
            // F√≥rmula EXATA do server.js (linhas 2070-2071)
            const priorityA = (a.subject_priority * 10) + a.topic_priority;
            const priorityB = (b.subject_priority * 10) + b.topic_priority;
            
            logger.debug(`[RetaFinal] Comparando: ${a.subject_name}/${a.description} (${priorityA}) vs ${b.subject_name}/${b.description} (${priorityB})`);
            
            // Ordena√ß√£o decrescente (maior prioridade primeiro) - linha 2072
            return priorityB - priorityA;
        });
        
        // Log dos t√≥picos ordenados para debug
        sortedTopics.slice(0, 5).forEach((topic, index) => {
            const priority = (topic.subject_priority * 10) + topic.topic_priority;
            logger.debug(`[RetaFinal] Top ${index + 1}: ${topic.subject_name} - ${topic.description} (Prioridade: ${priority})`);
        });
        
        return sortedTopics;
    }
    
    /**
     * Extrai disciplinas priorizadas dos t√≥picos selecionados
     * Implementa l√≥gica das linhas 2077-2083 do server.js
     * 
     * @param {Array} topicsToSchedule - T√≥picos que ser√£o agendados
     * @returns {Array} Lista de disciplinas priorizadas
     */
    static _extractPrioritizedSubjects(topicsToSchedule) {
        logger.debug(`[RetaFinal] Extraindo disciplinas priorizadas de ${topicsToSchedule.length} t√≥picos`);
        
        // L√≥gica EXATA do server.js (linhas 2077-2083)
        const subjectsMap = new Map();
        
        topicsToSchedule.forEach(topic => {
            if (!subjectsMap.has(topic.subject_name)) {
                subjectsMap.set(topic.subject_name, {
                    name: topic.subject_name,
                    weight: topic.subject_priority,
                    topicCount: 1
                });
            } else {
                subjectsMap.get(topic.subject_name).topicCount++;
            }
        });
        
        const prioritizedSubjects = Array.from(subjectsMap.values());
        
        logger.info(`[RetaFinal] Disciplinas priorizadas: ${prioritizedSubjects.map(s => `${s.name} (${s.topicCount} t√≥picos)`).join(', ')}`);
        
        return prioritizedSubjects;
    }
    
    /**
     * Processa exclus√µes no banco de dados
     * Implementa l√≥gica EXATA das linhas 2086-2133 do server.js
     * 
     * @param {Array} excludedTopics - T√≥picos exclu√≠dos
     * @param {number} planId - ID do plano
     * @param {Function} dbExecutor - Executor de banco com m√©todos run/get
     * @returns {Promise} Promessa de conclus√£o
     */
    static async _processExclusions(excludedTopics, planId, dbExecutor) {
        logger.info(`[RetaFinal] Processando ${excludedTopics.length} exclus√µes para plano ${planId}`);
        
        if (excludedTopics.length > 0) {
            // Limpar registros antigos de ambas as tabelas (linhas 2089-2090)
            await this._clearExclusions(planId, dbExecutor);
            
            // Processar cada exclus√£o individualmente (linhas 2092-2128)
            for (const excludedTopic of excludedTopics) {
                await this._processExclusion(excludedTopic, planId, dbExecutor);
            }
        } else {
            // Se n√£o h√° exclus√µes, limpar registros antigos (linhas 2130-2132)
            await this._clearExclusions(planId, dbExecutor);
        }
    }
    
    /**
     * Processa uma exclus√£o individual
     * Implementa l√≥gica das linhas 2092-2128 do server.js
     * 
     * @param {Object} excludedTopic - T√≥pico exclu√≠do
     * @param {number} planId - ID do plano
     * @param {Function} dbExecutor - Executor de banco
     * @returns {Promise} Promessa de conclus√£o
     */
    static async _processExclusion(excludedTopic, planId, dbExecutor) {
        const priorityCombined = (excludedTopic.subject_priority * 10) + excludedTopic.topic_priority;
        const reason = `T√≥pico exclu√≠do automaticamente no Modo Reta Final devido √† falta de tempo. Prioridade combinada: ${priorityCombined.toFixed(2)}`;
        
        logger.debug(`[RetaFinal] üîç Processando exclus√£o: ${excludedTopic.subject_name} - ${excludedTopic.description}`);
        
        try {
            // CORRE√á√ÉO CR√çTICA: Verificar se o topic_id √© v√°lido antes da inser√ß√£o (linhas 2096-2113)
            const topicExists = await dbExecutor.get('SELECT id FROM topics WHERE id = ?', [excludedTopic.id]);
            
            if (topicExists) {
                logger.debug(`[RetaFinal] ‚úÖ T√≥pico ${excludedTopic.id} encontrado, inserindo em reta_final_exclusions`);
                
                // Salvar na tabela legada (para compatibilidade) - linhas 2106-2110
                await dbExecutor.run(
                    'INSERT INTO reta_final_exclusions (plan_id, topic_id, reason) VALUES (?, ?, ?)',
                    [
                        planId,
                        excludedTopic.id,
                        `${excludedTopic.subject_name} - ${excludedTopic.description} (Prioridade: ${priorityCombined.toFixed(2)})`
                    ]
                );
                
                logger.debug(`[RetaFinal] ‚úÖ Inser√ß√£o em reta_final_exclusions conclu√≠da`);
            } else {
                logger.warn(`[RetaFinal] ‚ö†Ô∏è T√≥pico com ID ${excludedTopic.id} n√£o encontrado na tabela topics, pulando inser√ß√£o na reta_final_exclusions`);
            }
            
            logger.debug(`[RetaFinal] ‚úÖ Inserindo em reta_final_excluded_topics`);
            
            // Salvar na nova tabela com mais detalhes (linhas 2117-2121)
            await dbExecutor.run(
                'INSERT INTO reta_final_excluded_topics (plan_id, subject_id, topic_id, reason) VALUES (?, ?, ?, ?)',
                [planId, excludedTopic.subject_id || null, excludedTopic.id, reason]
            );
            
            logger.debug(`[RetaFinal] ‚úÖ Inser√ß√£o em reta_final_excluded_topics conclu√≠da`);
            
        } catch (insertError) {
            // Log EXATO do server.js (linhas 2123-2127)
            logger.error(`[RetaFinal] ‚ùå ERRO CR√çTICO na inser√ß√£o do t√≥pico ${excludedTopic.id}:`, insertError.message);
            logger.error(`[RetaFinal] ‚ùå Stack trace:`, insertError.stack);
            throw insertError; // Re-throw para parar o processo
        }
    }
    
    /**
     * Limpa exclus√µes antigas do banco
     * Implementa l√≥gica das linhas 2089-2090 e 2131-2132 do server.js
     * 
     * @param {number} planId - ID do plano
     * @param {Function} dbExecutor - Executor de banco
     * @returns {Promise} Promessa de conclus√£o
     */
    static async _clearExclusions(planId, dbExecutor) {
        logger.debug(`[RetaFinal] Limpando exclus√µes antigas do plano ${planId}`);
        
        try {
            // Limpar registros antigos de ambas as tabelas (linhas EXATAS do server.js)
            await dbExecutor.run('DELETE FROM reta_final_exclusions WHERE plan_id = ?', [planId]);
            await dbExecutor.run('DELETE FROM reta_final_excluded_topics WHERE plan_id = ?', [planId]);
            
            logger.debug(`[RetaFinal] ‚úÖ Exclus√µes antigas removidas com sucesso`);
        } catch (error) {
            logger.error(`[RetaFinal] ‚ùå Erro ao limpar exclus√µes antigas:`, error.message);
            throw error;
        }
    }
    
    /**
     * Gera mensagem informativa sobre o processo de reta final
     * 
     * @param {number} scheduledCount - Quantidade de t√≥picos agendados
     * @param {number} excludedCount - Quantidade de t√≥picos exclu√≠dos
     * @param {number} totalSlots - Total de slots dispon√≠veis
     * @returns {string} Mensagem informativa
     */
    static _generateRetaFinalMessage(scheduledCount, excludedCount, totalSlots) {
        const totalTopics = scheduledCount + excludedCount;
        
        if (excludedCount === 0) {
            return `‚úÖ Todos os ${scheduledCount} t√≥picos foram agendados nos ${totalSlots} slots dispon√≠veis.`;
        }
        
        const message = [
            `‚ö†Ô∏è MODO RETA FINAL ATIVADO`,
            `‚Ä¢ Total de t√≥picos: ${totalTopics}`,
            `‚Ä¢ Slots dispon√≠veis: ${totalSlots}`,
            `‚Ä¢ T√≥picos selecionados: ${scheduledCount} (prioridade mais alta)`,
            `‚Ä¢ T√≥picos exclu√≠dos: ${excludedCount} (prioridade mais baixa)`,
            ``,
            `Os t√≥picos foram priorizados pela f√≥rmula: (peso_disciplina √ó 10) + peso_t√≥pico`,
            `Apenas os t√≥picos mais importantes foram mantidos no cronograma.`
        ].join('\n');
        
        return message;
    }
    
    /**
     * Gera estat√≠sticas detalhadas do processamento
     * 
     * @param {Array} allTopics - Todos os t√≥picos ordenados
     * @param {Array} selected - T√≥picos selecionados
     * @param {Array} excluded - T√≥picos exclu√≠dos
     * @returns {Object} Estat√≠sticas detalhadas
     */
    static _generateStatistics(allTopics, selected, excluded) {
        const stats = {
            total: allTopics.length,
            selected: selected.length,
            excluded: excluded.length,
            selectionRate: ((selected.length / allTopics.length) * 100).toFixed(1),
            priorityRange: {
                highest: 0,
                lowest: 0,
                selectedHighest: 0,
                selectedLowest: 0,
                excludedHighest: 0,
                excludedLowest: 0
            },
            subjectDistribution: {
                selected: {},
                excluded: {}
            }
        };
        
        if (allTopics.length > 0) {
            // Calcular faixas de prioridade
            const priorities = allTopics.map(t => (t.subject_priority * 10) + t.topic_priority);
            stats.priorityRange.highest = Math.max(...priorities);
            stats.priorityRange.lowest = Math.min(...priorities);
            
            if (selected.length > 0) {
                const selectedPriorities = selected.map(t => (t.subject_priority * 10) + t.topic_priority);
                stats.priorityRange.selectedHighest = Math.max(...selectedPriorities);
                stats.priorityRange.selectedLowest = Math.min(...selectedPriorities);
            }
            
            if (excluded.length > 0) {
                const excludedPriorities = excluded.map(t => (t.subject_priority * 10) + t.topic_priority);
                stats.priorityRange.excludedHighest = Math.max(...excludedPriorities);
                stats.priorityRange.excludedLowest = Math.min(...excludedPriorities);
            }
        }
        
        // Distribui√ß√£o por disciplina
        selected.forEach(topic => {
            const subject = topic.subject_name || 'Desconhecida';
            stats.subjectDistribution.selected[subject] = (stats.subjectDistribution.selected[subject] || 0) + 1;
        });
        
        excluded.forEach(topic => {
            const subject = topic.subject_name || 'Desconhecida';
            stats.subjectDistribution.excluded[subject] = (stats.subjectDistribution.excluded[subject] || 0) + 1;
        });
        
        return stats;
    }
    
    /**
     * Calcula prioridade combinada de um t√≥pico
     * Implementa a f√≥rmula EXATA: (subject_priority * 10) + topic_priority
     * 
     * @param {Object} topic - T√≥pico com propriedades de prioridade
     * @returns {number} Prioridade combinada
     */
    static calculateCombinedPriority(topic) {
        if (!topic.subject_priority || !topic.topic_priority) {
            logger.warn(`[RetaFinal] T√≥pico ${topic.id} tem prioridades inv√°lidas:`, {
                subject_priority: topic.subject_priority,
                topic_priority: topic.topic_priority
            });
            return 0;
        }
        
        // F√≥rmula EXATA do server.js
        return (topic.subject_priority * 10) + topic.topic_priority;
    }
    
    /**
     * Valida dados de entrada para processamento
     * 
     * @param {Array} pendingTopics - T√≥picos pendentes
     * @param {number} availableSlots - Slots dispon√≠veis
     * @param {number} planId - ID do plano
     * @returns {Object} Resultado da valida√ß√£o
     */
    static validateInput(pendingTopics, availableSlots, planId) {
        const validation = {
            isValid: true,
            errors: [],
            warnings: []
        };
        
        // Validar t√≥picos pendentes
        if (!Array.isArray(pendingTopics)) {
            validation.isValid = false;
            validation.errors.push('pendingTopics deve ser um array');
        } else if (pendingTopics.length === 0) {
            validation.warnings.push('Nenhum t√≥pico pendente fornecido');
        } else {
            // Validar estrutura dos t√≥picos
            pendingTopics.forEach((topic, index) => {
                if (!topic.id) {
                    validation.errors.push(`T√≥pico ${index} n√£o possui ID`);
                }
                if (typeof topic.subject_priority !== 'number') {
                    validation.errors.push(`T√≥pico ${index} n√£o possui subject_priority v√°lida`);
                }
                if (typeof topic.topic_priority !== 'number') {
                    validation.errors.push(`T√≥pico ${index} n√£o possui topic_priority v√°lida`);
                }
                if (!topic.subject_name) {
                    validation.warnings.push(`T√≥pico ${index} n√£o possui nome da disciplina`);
                }
                if (!topic.description) {
                    validation.warnings.push(`T√≥pico ${index} n√£o possui descri√ß√£o`);
                }
            });
        }
        
        // Validar slots dispon√≠veis
        if (typeof availableSlots !== 'number' || availableSlots < 0) {
            validation.isValid = false;
            validation.errors.push('availableSlots deve ser um n√∫mero n√£o negativo');
        }
        
        // Validar ID do plano
        if (typeof planId !== 'number' || planId <= 0) {
            validation.isValid = false;
            validation.errors.push('planId deve ser um n√∫mero positivo');
        }
        
        return validation;
    }
    
    /**
     * Simula processamento de reta final sem executar mudan√ßas no banco
     * √ötil para preview e an√°lise
     * 
     * @param {Array} pendingTopics - T√≥picos pendentes
     * @param {number} availableSlots - Slots dispon√≠veis
     * @returns {Object} Simula√ß√£o do resultado
     */
    static simulateRetaFinal(pendingTopics, availableSlots) {
        logger.info(`[RetaFinal] Simulando processamento: ${pendingTopics.length} t√≥picos, ${availableSlots} slots`);
        
        if (pendingTopics.length <= availableSlots) {
            return {
                needsRetaFinal: false,
                topicsToSchedule: pendingTopics,
                excludedTopics: [],
                message: `Simula√ß√£o: Todos os ${pendingTopics.length} t√≥picos cabem nos ${availableSlots} slots`
            };
        }
        
        const sortedTopics = this._sortTopicsByPriority(pendingTopics);
        const topicsToSchedule = sortedTopics.slice(0, availableSlots);
        const excludedTopics = sortedTopics.slice(availableSlots);
        const prioritizedSubjects = this._extractPrioritizedSubjects(topicsToSchedule);
        
        return {
            needsRetaFinal: true,
            topicsToSchedule,
            excludedTopics,
            prioritizedSubjects,
            message: this._generateRetaFinalMessage(
                topicsToSchedule.length,
                excludedTopics.length,
                availableSlots
            ),
            statistics: this._generateStatistics(sortedTopics, topicsToSchedule, excludedTopics),
            isSimulation: true
        };
    }
    
    /**
     * Obt√©m t√≥picos exclu√≠dos de um plano espec√≠fico
     * Consulta as tabelas de exclus√£o
     * 
     * @param {number} planId - ID do plano
     * @param {Function} dbExecutor - Executor de banco
     * @returns {Array} Lista de exclus√µes registradas
     */
    static async getExclusionsForPlan(planId, dbExecutor) {
        logger.debug(`[RetaFinal] Consultando exclus√µes para plano ${planId}`);
        
        try {
            // Consultar tabela principal de exclus√µes
            const exclusions = await dbExecutor.all(
                `SELECT plan_id, topic_id, reason, created_at 
                 FROM reta_final_excluded_topics 
                 WHERE plan_id = ? 
                 ORDER BY created_at DESC`,
                [planId]
            );
            
            logger.info(`[RetaFinal] Encontradas ${exclusions.length} exclus√µes para plano ${planId}`);
            
            return exclusions;
        } catch (error) {
            logger.error(`[RetaFinal] Erro ao consultar exclus√µes:`, error.message);
            throw error;
        }
    }
}

module.exports = RetaFinalProcessor;