/**
 * GAMIFICATION SERVICE - VERS√ÉO ENRIQUECIDA
 * 
 * Centraliza toda a l√≥gica de gamifica√ß√£o do sistema, implementando as regras detalhadas
 * de n√≠veis, XP, conquistas e elementos visuais, conforme especificado.
 */

const { dbGet, dbAll, dbRun, query } = require('../../database-postgres-direct');

// ====================================================================
// DEFINI√á√ïES DO SISTEMA DE GAMIFICA√á√ÉO
// ====================================================================

const XP_REWARDS = {
    SESSION_COMPLETED: 10,
    UNIQUE_TOPIC_COMPLETED: 50,
    NEW_TOPIC_BONUS: 40,
    SIMULADO_BONUS: 20
};

const LEVELS = [
    { threshold: 0, title: 'Aspirante a Servidor(a) üå±', humorous_title: 'Pagador de Inscri√ß√£o üí∏', color: '#8B8B8B', phrase: 'A jornada dos mil editais come√ßa com o primeiro boleto!' },
    { threshold: 11, title: 'Sobrevivente do Primeiro PDF üìÑ', humorous_title: 'Pagador(a) de Inscri√ß√£o üí∏', color: '#A0A0A0', phrase: '700 p√°ginas? √â s√≥ o aquecimento!' },
    { threshold: 31, title: 'Ca√ßador de Quest√µes üéØ', humorous_title: 'Acima da Nota de Corte (nos simulados) üòâ', color: '#4A90E2', phrase: 'Quest√µes anuladas s√£o suas melhores amigas agora!' },
    { threshold: 51, title: 'Estrategista de Chute üé≤', humorous_title: 'Mestre dos Grupos de WhatsApp üì≤', color: '#6B46C1', phrase: 'Entre A e C, sempre vai na B... ou n√£o!' },
    { threshold: 101, title: 'Fiscal de Gabarito üîç', humorous_title: 'Gabaritador(a) da FGV üéØ', color: '#10B981', phrase: 'S√∫mula vinculante √© seu segundo nome!' },
    { threshold: 201, title: 'Terror do Cespe/Cebraspe üëπ', humorous_title: 'Sensei dos Simulados ü•ã', color: '#F59E0B', phrase: 'Simulado no domingo de manh√£? Rotina!' },
    { threshold: 351, title: 'Veterano(a) de 7 Bancas Diferentes üòé', humorous_title: 'Quase Servidor(a) üéì', color: '#DC2626', phrase: 'A posse est√° logo ali... ou no pr√≥ximo concurso!' },
    { threshold: 501, title: 'Lenda Viva dos Concursos üëë', humorous_title: 'Assinante Vital√≠cio do Di√°rio Oficial ‚ú®', color: '#FFD700', phrase: 'Editais tremem quando voc√™ abre o navegador!' }
];

const ACHIEVEMENTS = {
    TOPICS: [
        { id: 'topics_1', threshold: 1, title: 'üéØ Primeira Lapada no Edital', description: 'O primeiro soco na cara da procrastina√ß√£o!' },
        { id: 'topics_5', threshold: 5, title: 'üìö Maratonista do PDF', description: 'Sua vista j√° come√ßou a reclamar.' },
        { id: 'topics_10', threshold: 10, title: '‚ú® Destruidor de Quest√µes', description: 'J√° discute gabarito com confian√ßa.' },
        { id: 'topics_25', threshold: 25, title: 'üëë Dono do Material', description: 'Sabe at√© a cor da caneta que o professor usou no slide.' },
        { id: 'topics_50', threshold: 50, title: 'üåü Meio Monstro', description: 'Voc√™ est√° virando uma lenda local no grupo de estudos.' },
        { id: 'topics_100', threshold: 100, title: 'üèõÔ∏è Centuri√£o do Conhecimento', description: 'Bancas j√° est√£o te bloqueando no Instagram.' },
        { id: 'topics_200', threshold: 200, title: 'üí™ Chuck Norris dos Editais', description: 'Os editais temem voc√™!' },
        { id: 'topics_500', threshold: 500, title: 'üß† C√©rebro Jur√≠dico Supremo', description: 'Conquista √©pica para os mais dedicados.' }
    ],
    STREAK: [
        { id: 'streak_3', threshold: 3, title: 'üì∫ Resistente ao Netflix', description: '3 dias seguidos! Resistiu √† s√©rie nova!' },
        { id: 'streak_7', threshold: 7, title: 'üõãÔ∏è Imune ao Sof√°', description: '7 dias! O sof√° esqueceu sua forma!' },
        { id: 'streak_14', threshold: 14, title: 'üò§ Inimigo do Descanso', description: '14 dias! Descanso? N√£o conhe√ßo!' },
        { id: 'streak_30', threshold: 30, title: 'ü§ñ M√°quina de Aprovar', description: '1 m√™s sem parar! Voc√™ √© uma m√°quina!' }
    ],
    SESSIONS: [
        { id: 'sessions_20', threshold: 20, title: 'üíä Viciado(a) em Quest√µes', description: 'Quest√µes s√£o sua droga legal!' },
        { id: 'sessions_50', threshold: 50, title: 'ü™ë Lombar Suprema', description: 'J√° fez mais fisioterapia que simulados.' },
        { id: 'sessions_100', threshold: 100, title: 'üëë Rei/Rainha do Resumo', description: '100 sess√µes! Domina a arte do estudo.' }
    ]
};

// ====================================================================
// FUN√á√ïES PRINCIPAIS DO SERVI√áO
// ====================================================================

/**
 * Processa a conclus√£o de uma sess√£o, o cora√ß√£o do sistema de gamifica√ß√£o.
 */
const processSessionCompletion = async (userId, sessionId) => {
    try {
        // Iniciar transa√ß√£o corretamente
        await query('BEGIN');
        
        const session = await dbGet('SELECT ss.* FROM study_sessions ss JOIN study_plans sp ON ss.study_plan_id = sp.id WHERE ss.id = $1 AND sp.user_id = $2', [sessionId, userId]);
        if (!session) {
            await query('ROLLBACK');
            return;
        }

        let stats = await dbGet('SELECT * FROM user_gamification_stats WHERE user_id = $1 FOR UPDATE', [userId]);
        if (!stats) {
            await dbRun('INSERT INTO user_gamification_stats (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING', [userId]);
            stats = await dbGet('SELECT * FROM user_gamification_stats WHERE user_id = $1', [userId]);
        }

        // 1. C√°lculo de XP
        let xpGained = XP_REWARDS.SESSION_COMPLETED;
        if (session.session_type === 'Novo T√≥pico' && session.topic_id) {
            const previousCompletions = await dbGet('SELECT COUNT(*) as count FROM study_sessions WHERE topic_id = $1 AND status = \'Conclu√≠do\' AND id != $2', [session.topic_id, sessionId]);
            if (previousCompletions.count === 0) {
                xpGained += XP_REWARDS.UNIQUE_TOPIC_COMPLETED;
            }
            xpGained += XP_REWARDS.NEW_TOPIC_BONUS;
        }
        if (session.session_type.includes('Simulado')) {
            xpGained += XP_REWARDS.SIMULADO_BONUS;
        }

        // 2. Otimiza√ß√£o: Buscar todas as contagens em uma √∫nica query
        const countsQuery = `
            SELECT 
                (SELECT COUNT(DISTINCT topic_id) FROM study_sessions ss JOIN study_plans sp ON ss.study_plan_id = sp.id WHERE sp.user_id = $1 AND ss.status = 'Conclu√≠do' AND ss.topic_id IS NOT NULL) as completed_topics,
                (SELECT COUNT(*) FROM study_sessions ss JOIN study_plans sp ON ss.study_plan_id = sp.id WHERE sp.user_id = $1 AND ss.status = 'Conclu√≠do') as completed_sessions;
        `;
        const counts = await dbGet(countsQuery, [userId]);
        const completedTopics = parseInt(counts.completed_topics, 10) || 0;
        const completedSessionsCount = parseInt(counts.completed_sessions, 10) || 0;

        // 3. Atualizar Streak e N√≠vel
        const newStreak = await calculateCurrentStreak(userId);
        const longestStreak = Math.max(stats.longest_streak, newStreak);
        const newLevelData = calculateLevel(completedTopics);

        // 4. Salvar Estat√≠sticas
        await dbRun(
            `UPDATE user_gamification_stats 
            SET xp = xp + $1, level = $2, current_streak = $3, longest_streak = $4, updated_at = CURRENT_TIMESTAMP
            WHERE user_id = $5`,
            [xpGained, newLevelData.level, newStreak, longestStreak, userId]
        );

        // 5. Verificar e Conceder Conquistas (com contagens j√° buscadas)
        await checkAndGrantAchievements(userId, { 
            completedTopics: completedTopics,
            streak: newStreak,
            completedSessions: completedSessionsCount
        });

        await query('COMMIT'); // Finaliza a transa√ß√£o com sucesso
        console.log(`[GAMIFICATION] Sess√£o ${sessionId} processada para usu√°rio ${userId}. XP +${xpGained}. Streak: ${newStreak} dias.`);

    } catch (error) {
        await query('ROLLBACK'); // Desfaz a transa√ß√£o em caso de erro
        console.error(`[GAMIFICATION] Erro ao processar sess√£o ${sessionId} (transa√ß√£o revertida):`, error);
    }
};


/**
 * Obt√©m o perfil completo de gamifica√ß√£o do usu√°rio.
 */
const getGamificationProfile = async (userId) => {
    const stats = await dbGet('SELECT * FROM user_gamification_stats WHERE user_id = $1', [userId]);
    if (!stats) {
        return { xp: 0, level: 1, current_streak: 0, longest_streak: 0, level_info: LEVELS[0], achievements: [] };
    }

    const completedTopics = await countUniqueCompletedTopics(userId);
    const levelInfo = calculateLevel(completedTopics);
    const achievements = await dbAll('SELECT * FROM user_achievements WHERE user_id = $1 ORDER BY unlocked_at DESC', [userId]);

    return { ...stats, level_info: levelInfo, achievements };
};

// ====================================================================
// FUN√á√ïES AUXILIARES
// ====================================================================

async function countUniqueCompletedTopics(userId) {
    const result = await dbGet(
        `SELECT COUNT(DISTINCT ss.topic_id) as count
        FROM study_sessions ss
        JOIN study_plans sp ON ss.study_plan_id = sp.id
        WHERE sp.user_id = $1 AND ss.status = 'Conclu√≠do' AND ss.topic_id IS NOT NULL`,
        [userId]
    );
    return result?.count || 0;
}

async function calculateCurrentStreak(userId) {
    const completedSessions = await dbAll(
        `SELECT DISTINCT ss.session_date 
        FROM study_sessions ss
        JOIN study_plans sp ON ss.study_plan_id = sp.id
        WHERE sp.user_id = $1 AND ss.status = 'Conclu√≠do'
        ORDER BY ss.session_date DESC`,
        [userId]
    );
    
    if (completedSessions.length === 0) return 0;

    let streak = 0;
    const today = new Date(new Date().toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
    today.setHours(0, 0, 0, 0);

    const lastStudyDate = new Date(completedSessions[0].session_date);
    lastStudyDate.setHours(0,0,0,0);

    const diffDays = (today - lastStudyDate) / (1000 * 60 * 60 * 24);

    if (diffDays <= 1) {
        streak = 1;
        for (let i = 0; i < completedSessions.length - 1; i++) {
            const currentDate = new Date(completedSessions[i].session_date);
            const nextDate = new Date(completedSessions[i+1].session_date);
            if ((currentDate - nextDate) / (1000 * 60 * 60 * 24) === 1) {
                streak++;
            } else {
                break;
            }
        }
    }
    return streak;
}

function calculateLevel(completedTopicsCount) {
    let currentLevel = LEVELS[0];
    for (let i = LEVELS.length - 1; i >= 0; i--) {
        if (completedTopicsCount >= LEVELS[i].threshold) {
            currentLevel = { ...LEVELS[i], level: i + 1 };
            break;
        }
    }
    return currentLevel;
}

async function checkAndGrantAchievements(userId, currentStats) {
    const unlockedAchievements = await dbAll('SELECT achievement_id FROM user_achievements WHERE user_id = $1', [userId]);
    const unlockedIds = new Set(unlockedAchievements.map(a => a.achievement_id));

    const checkCategory = async (category, value) => {
        for (const ach of ACHIEVEMENTS[category]) {
            if (value >= ach.threshold && !unlockedIds.has(ach.id)) {
                // Usar ON CONFLICT para evitar erros de inser√ß√£o duplicada em cen√°rios de alta concorr√™ncia
                await dbRun(
                    'INSERT INTO user_achievements (user_id, achievement_id, unlocked_at) VALUES ($1, $2, CURRENT_TIMESTAMP) ON CONFLICT (user_id, achievement_id) DO NOTHING',
                    [userId, ach.id]
                );
                console.log(`[GAMIFICATION] Conquista: ${ach.title} para user ${userId}`);
            }
        }
    };

    // Usar as contagens j√° calculadas e passadas via currentStats
    await checkCategory('TOPICS', currentStats.completedTopics);
    await checkCategory('STREAK', currentStats.streak);
    await checkCategory('SESSIONS', currentStats.completedSessions);
}


module.exports = {
    processSessionCompletion,
    getGamificationProfile
};
