/**
 * GAMIFICATION SERVICE - VERS√ÉO ENRIQUECIDA COM CORRE√á√ÉO DE TRANSA√á√ïES
 * 
 * Centraliza toda a l√≥gica de gamifica√ß√£o do sistema, implementando as regras detalhadas
 * de n√≠veis, XP, conquistas e elementos visuais, conforme especificado.
 * 
 * CORRE√á√ÉO APLICADA: Usando pool.connect() para transa√ß√µes com client dedicado
 */

const { pool } = require('../../database-postgres-direct');

// ====================================================================
// DEFINI√á√ïES DO SISTEMA DE GAMIFICA√á√ÉO
// ====================================================================

const XP_REWARDS = {
    SESSION_COMPLETED: 10,
    UNIQUE_TOPIC_COMPLETED: 50,
    NEW_TOPIC_BONUS: 40,
    SIMULADO_BONUS: 20
};

const LEVELS = [
    { threshold: 0, title: 'Aspirante a Servidor(a) üå±', humorous_title: 'Pagador de Inscri√ß√£o üí∏', color: '#8B8B8B', phrase: 'A jornada dos mil editais come√ßa com o primeiro boleto!' },
    { threshold: 11, title: 'Sobrevivente do Primeiro PDF üìÑ', humorous_title: 'Pagador(a) de Inscri√ß√£o üí∏', color: '#A0A0A0', phrase: '700 p√°ginas? √â s√≥ o aquecimento!' },
    { threshold: 31, title: 'Ca√ßador de Quest√µes üéØ', humorous_title: 'Acima da Nota de Corte (nos simulados) üòâ', color: '#4A90E2', phrase: 'Quest√µes anuladas s√£o suas melhores amigas agora!' },
    { threshold: 51, title: 'Estrategista de Chute üé≤', humorous_title: 'Mestre dos Grupos de WhatsApp üì≤', color: '#6B46C1', phrase: 'Entre A e C, sempre vai na B... ou n√£o!' },
    { threshold: 101, title: 'Fiscal de Gabarito üîç', humorous_title: 'Gabaritador(a) da FGV üéØ', color: '#10B981', phrase: 'S√∫mula vinculante √© seu segundo nome!' },
    { threshold: 201, title: 'Terror do Cespe/Cebraspe üëπ', humorous_title: 'Sensei dos Simulados ü•ã', color: '#F59E0B', phrase: 'Simulado no domingo de manh√£? Rotina!' },
    { threshold: 351, title: 'Veterano(a) de 7 Bancas Diferentes üòé', humorous_title: 'Quase Servidor(a) üéì', color: '#DC2626', phrase: 'A posse est√° logo ali... ou no pr√≥ximo concurso!' },
    { threshold: 501, title: 'Lenda Viva dos Concursos üëë', humorous_title: 'Assinante Vital√≠cio do Di√°rio Oficial ‚ú®', color: '#FFD700', phrase: 'Editais tremem quando voc√™ abre o navegador!' }
];

const ACHIEVEMENTS = {
    TOPICS: [
        // CONQUISTAS INICIAIS - Vit√≥rias r√°pidas para motivar
        { id: 'topics_1', threshold: 1, title: 'üéØ Primeira Lapada no Edital', description: 'O primeiro soco na cara da procrastina√ß√£o!' },
        { id: 'topics_2', threshold: 2, title: 'üî• T√° Pegando o Jeito', description: 'Dois t√≥picos! O come√ßo da sua jornada √©pica!' },
        { id: 'topics_3', threshold: 3, title: 'üöÄ Decolando', description: 'Tr√™s t√≥picos! Houston, n√£o temos mais procrastina√ß√£o!' },
        { id: 'topics_5', threshold: 5, title: 'üìö Maratonista do PDF', description: 'Cinco t√≥picos! Sua vista j√° come√ßou a reclamar.' },
        { id: 'topics_7', threshold: 7, title: '‚ö° Ritmo de Cruzeiro', description: 'Uma semana de t√≥picos! T√° voando baixo!' },
        { id: 'topics_10', threshold: 10, title: '‚ú® Destruidor de Quest√µes', description: 'Dezena completa! J√° discute gabarito com confian√ßa.' },
        
        // CONQUISTAS INTERMEDI√ÅRIAS - Progress√£o gradual
        { id: 'topics_15', threshold: 15, title: 'üéì Estudante Aplicado', description: 'Quinze t√≥picos! Seus amigos j√° pedem dicas.' },
        { id: 'topics_20', threshold: 20, title: 'üìñ Devorador de Conte√∫do', description: 'Vinte t√≥picos! O caf√© j√° √© seu melhor amigo.' },
        { id: 'topics_25', threshold: 25, title: 'üëë Dono do Material', description: 'Sabe at√© a cor da caneta do professor!' },
        { id: 'topics_30', threshold: 30, title: 'üí° Iluminado', description: 'Trinta t√≥picos! Voc√™ virou refer√™ncia no grupo.' },
        { id: 'topics_40', threshold: 40, title: 'üèÉ Maratonista', description: 'Quarenta t√≥picos! Nada mais te para!' },
        { id: 'topics_50', threshold: 50, title: 'üåü Meio Monstro', description: 'Cinquenta! Voc√™ √© lenda no grupo de estudos.' },
        
        // CONQUISTAS AVAN√áADAS - Grandes marcos
        { id: 'topics_75', threshold: 75, title: 'ü¶æ M√°quina de Guerra', description: 'Setenta e cinco! As bancas tremem!' },
        { id: 'topics_100', threshold: 100, title: 'üèõÔ∏è Centuri√£o do Conhecimento', description: 'Cem t√≥picos! Bancas te bloqueiam no Instagram.' },
        { id: 'topics_150', threshold: 150, title: 'üîÆ Or√°culo dos Concursos', description: 'Voc√™ prev√™ quest√µes da prova!' },
        { id: 'topics_200', threshold: 200, title: 'üí™ Chuck Norris dos Editais', description: 'Os editais temem voc√™!' },
        { id: 'topics_300', threshold: 300, title: 'üåå Transcendente', description: 'Trezentos! Voc√™ existe em outra dimens√£o.' },
        { id: 'topics_500', threshold: 500, title: 'üß† C√©rebro Jur√≠dico Supremo', description: 'Conquista √©pica para os imortais!' },
        { id: 'topics_1000', threshold: 1000, title: 'üèõÔ∏è Vai Escolher Onde Tomar Posse', description: 'Mil t√≥picos! N√£o √© se vai passar, √© onde.' }
    ],
    
    STREAK: [
        // STREAKS INICIAIS - Celebrar consist√™ncia desde cedo
        { id: 'streak_1', threshold: 1, title: 'üå± Semente Plantada', description: 'Primeiro dia! Toda jornada come√ßa com um passo!' },
        { id: 'streak_2', threshold: 2, title: 'üîó Criando o H√°bito', description: 'Dois dias seguidos! Consist√™ncia chegando!' },
        { id: 'streak_3', threshold: 3, title: 'üì∫ Resistente ao Netflix', description: 'Tr√™s dias! Resistiu √† s√©rie nova!' },
        { id: 'streak_5', threshold: 5, title: 'üéØ Semana de Trabalho', description: 'Cinco dias! Melhor que muito CLT!' },
        { id: 'streak_7', threshold: 7, title: 'üõãÔ∏è Imune ao Sof√°', description: 'Uma semana! O sof√° esqueceu sua forma!' },
        { id: 'streak_10', threshold: 10, title: 'üí™ For√ßa de Vontade', description: 'Dez dias! Voc√™ √© impar√°vel!' },
        { id: 'streak_14', threshold: 14, title: 'üò§ Inimigo do Descanso', description: 'Duas semanas! Descanso? N√£o conhe√ßo!' },
        { id: 'streak_21', threshold: 21, title: 'üß† H√°bito Formado', description: 'Tr√™s semanas! Dizem que agora √© autom√°tico!' },
        { id: 'streak_30', threshold: 30, title: 'ü§ñ M√°quina de Aprovar', description: 'Um m√™s! Voc√™ √© uma m√°quina!' },
        { id: 'streak_60', threshold: 60, title: 'üåü Lend√°rio', description: 'Dois meses! Voc√™ √© inspira√ß√£o!' },
        { id: 'streak_100', threshold: 100, title: 'üëë Imortal', description: 'Cem dias! Voc√™ transcendeu!' }
    ],
    
    SESSIONS: [
        // SESS√ïES INICIAIS - Recompensas frequentes no come√ßo
        { id: 'sessions_1', threshold: 1, title: 'üé¨ Primeira Sess√£o', description: 'Come√ßou! O primeiro de muitos!' },
        { id: 'sessions_3', threshold: 3, title: 'üé™ Circo Pegando Fogo', description: 'Tr√™s sess√µes! T√° esquentando!' },
        { id: 'sessions_5', threshold: 5, title: '‚úã High Five', description: 'Cinco sess√µes! Toca aqui!' },
        { id: 'sessions_7', threshold: 7, title: 'üçÄ N√∫mero da Sorte', description: 'Sete sess√µes! Sorte √© treino!' },
        { id: 'sessions_10', threshold: 10, title: 'üéØ Dezena Cravada', description: 'Dez sess√µes! T√° ficando s√©rio!' },
        { id: 'sessions_15', threshold: 15, title: 'üèÉ Pegando Ritmo', description: 'Quinze sess√µes! Agora vai!' },
        { id: 'sessions_20', threshold: 20, title: 'üíä Viciado(a) em Quest√µes', description: 'Vinte! Quest√µes s√£o sua droga legal!' },
        { id: 'sessions_25', threshold: 25, title: 'üìö Rato de Biblioteca', description: 'J√° mora na biblioteca!' },
        { id: 'sessions_30', threshold: 30, title: 'üî• Em Chamas', description: 'Trinta sess√µes! T√° pegando fogo!' },
        { id: 'sessions_40', threshold: 40, title: 'üí∫ Cadeira Cativa', description: 'Sua cadeira j√° tem seu formato!' },
        { id: 'sessions_50', threshold: 50, title: 'ü™ë Lombar Suprema', description: 'J√° fez mais fisioterapia que simulados.' },
        { id: 'sessions_75', threshold: 75, title: 'üìñ PhD em Resumos', description: 'Seus resumos viram material de curso!' },
        { id: 'sessions_100', threshold: 100, title: 'üëë Rei/Rainha do Resumo', description: 'Cem sess√µes! Domina a arte do estudo.' },
        { id: 'sessions_150', threshold: 150, title: 'üõèÔ∏è Travesseiro Vade Mecum', description: 'Dorme abra√ßado com os livros!' },
        { id: 'sessions_200', threshold: 200, title: 'üèñÔ∏è O que √© F√©rias?', description: 'F√©rias? Nunca ouvi falar.' },
        { id: 'sessions_300', threshold: 300, title: 'üéâ Destruidor de Finais de Semana', description: 'Churrasco? S√≥ depois da posse!' },
        { id: 'sessions_500', threshold: 500, title: 'üåü Lenda Viva', description: 'Quinhentas sess√µes! Voc√™ √© hist√≥ria!' }
    ]
};

// ====================================================================
// FUN√á√ïES PRINCIPAIS DO SERVI√áO
// ====================================================================

/**
 * Processa a conclus√£o de uma sess√£o, o cora√ß√£o do sistema de gamifica√ß√£o.
 * CORRIGIDO: Usa client dedicado para toda a transa√ß√£o
 */
const processSessionCompletion = async (userId, sessionId) => {
    const startTime = Date.now();
    let client;
    
    try {
        // CORRE√á√ÉO: Usar client dedicado para toda a transa√ß√£o
        client = await pool.connect();
        
        // Configurar timeouts para evitar travamentos
        await client.query("SET LOCAL lock_timeout = '3s'");
        await client.query("SET LOCAL statement_timeout = '8s'");
        
        // Iniciar transa√ß√£o
        await client.query('BEGIN');
        
        // Buscar sess√£o COM LOCK para garantir consist√™ncia
        const sessionResult = await client.query(
            `SELECT ss.* FROM study_sessions ss 
             JOIN study_plans sp ON ss.study_plan_id = sp.id 
             WHERE ss.id = $1 AND sp.user_id = $2
             FOR UPDATE OF ss`,
            [sessionId, userId]
        );
        
        const session = sessionResult.rows[0];
        if (!session) {
            await client.query('ROLLBACK');
            console.log(`[GAMIFICATION] Sess√£o ${sessionId} n√£o encontrada para usu√°rio ${userId}`);
            return;
        }

        // Buscar ou criar stats do usu√°rio (UPSERT at√¥mico)
        const statsResult = await client.query(
            `INSERT INTO user_gamification_stats (user_id, xp, level, current_streak, longest_streak)
             VALUES ($1, 0, 1, 0, 0)
             ON CONFLICT (user_id) 
             DO UPDATE SET updated_at = CURRENT_TIMESTAMP
             RETURNING *`,
            [userId]
        );
        
        let stats = statsResult.rows[0];

        // 1. C√°lculo de XP (mantendo toda a l√≥gica original)
        let xpGained = XP_REWARDS.SESSION_COMPLETED;
        
        if (session.session_type === 'Novo T√≥pico' && session.topic_id) {
            const prevCompResult = await client.query(
                'SELECT COUNT(*) as count FROM study_sessions WHERE topic_id = $1 AND status = $2 AND id != $3',
                [session.topic_id, 'Conclu√≠do', sessionId]
            );
            
            if (prevCompResult.rows[0].count === '0') {
                xpGained += XP_REWARDS.UNIQUE_TOPIC_COMPLETED;
            }
            xpGained += XP_REWARDS.NEW_TOPIC_BONUS;
        }
        
        if (session.session_type && session.session_type.includes('Simulado')) {
            xpGained += XP_REWARDS.SIMULADO_BONUS;
        }

        // 2. Buscar todas as contagens em uma √∫nica query (otimiza√ß√£o mantida)
        const countsResult = await client.query(
            `SELECT 
                (SELECT COUNT(DISTINCT topic_id) 
                 FROM study_sessions ss 
                 JOIN study_plans sp ON ss.study_plan_id = sp.id 
                 WHERE sp.user_id = $1 AND ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') AND ss.topic_id IS NOT NULL) as completed_topics,
                (SELECT COUNT(*) 
                 FROM study_sessions ss 
                 JOIN study_plans sp ON ss.study_plan_id = sp.id 
                 WHERE sp.user_id = $1 AND ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida')) as completed_sessions`,
            [userId]
        );
        
        const counts = countsResult.rows[0];
        const completedTopics = parseInt(counts.completed_topics, 10) || 0;
        const completedSessionsCount = parseInt(counts.completed_sessions, 10) || 0;

        // 3. Calcular Streak (usando o client da transa√ß√£o)
        const newStreak = await calculateCurrentStreakWithClient(client, userId);
        const longestStreak = Math.max(stats.longest_streak || 0, newStreak);
        
        // Calcular n√≠vel
        const newLevelData = calculateLevel(completedTopics);

        // 4. Salvar Estat√≠sticas (UPDATE at√¥mico)
        await client.query(
            `UPDATE user_gamification_stats 
             SET xp = xp + $1, 
                 level = $2, 
                 current_streak = $3, 
                 longest_streak = $4, 
                 updated_at = CURRENT_TIMESTAMP
             WHERE user_id = $5`,
            [xpGained, newLevelData.level, newStreak, longestStreak, userId]
        );

        // 5. Verificar e Conceder Conquistas (usando client da transa√ß√£o)
        await checkAndGrantAchievementsWithClient(client, userId, { 
            completedTopics: completedTopics,
            streak: newStreak,
            completedSessions: completedSessionsCount
        });

        // Commit da transa√ß√£o
        await client.query('COMMIT');
        
        const processingTime = Date.now() - startTime;
        console.log(`[GAMIFICATION] Sess√£o ${sessionId} processada em ${processingTime}ms. XP +${xpGained}. Streak: ${newStreak} dias.`);

    } catch (error) {
        // Rollback em caso de erro
        if (client) {
            try {
                await client.query('ROLLBACK');
            } catch (rollbackError) {
                console.error('[GAMIFICATION] Erro ao fazer rollback:', rollbackError);
            }
        }
        
        const processingTime = Date.now() - startTime;
        console.error(`[GAMIFICATION] Erro ao processar sess√£o ${sessionId} ap√≥s ${processingTime}ms:`, error.message);
        
        // Log espec√≠fico para timeout
        if (error.code === '57014') {
            console.error('[GAMIFICATION] Timeout detectado - poss√≠vel deadlock');
        }
        
    } finally {
        // SEMPRE liberar o client
        if (client) {
            client.release();
        }
    }
};

/**
 * Obt√©m o perfil completo de gamifica√ß√£o do usu√°rio.
 * CORRIGIDO: Sem transa√ß√£o desnecess√°ria para leitura simples
 */
const getGamificationProfile = async (userId) => {
    let client;
    const queryTimings = {};
    
    try {
        console.log('[GAMI SERVICE] getGamificationProfile: Iniciando para userId', userId);
        const startConnection = Date.now();
        
        // Usar client dedicado mas SEM transa√ß√£o
        client = await pool.connect();
        queryTimings.connection = Date.now() - startConnection;
        console.log(`[GAMI SERVICE] getGamificationProfile: Cliente do pool conectado em ${queryTimings.connection}ms`);
        
        // Configurar timeouts por seguran√ßa
        const startTimeouts = Date.now();
        await client.query("SET LOCAL statement_timeout = 5000"); // 5s max
        await client.query("SET LOCAL lock_timeout = 1000"); // 1s para locks
        queryTimings.timeouts = Date.now() - startTimeouts;
        console.log(`[GAMI SERVICE] getGamificationProfile: Timeouts configurados em ${queryTimings.timeouts}ms`);
        
        // Buscar stats SEM transa√ß√£o, SEM locks
        console.log('[GAMI SERVICE] getGamificationProfile: Executando query user_gamification_stats...');
        const startStats = Date.now();
        const statsResult = await client.query(
            'SELECT * FROM user_gamification_stats WHERE user_id = $1',
            [userId]
        );
        queryTimings.stats = Date.now() - startStats;
        console.log(`[GAMI SERVICE] getGamificationProfile: Query user_gamification_stats conclu√≠da em ${queryTimings.stats}ms`);
        
        if (statsResult.rows.length === 0) {
            console.log('[GAMI SERVICE] getGamificationProfile: user_gamification_stats n√£o encontrado, retornando padr√£o.');
            console.log('[GAMI SERVICE] Timings:', queryTimings);
            return { 
                xp: 0, 
                level: 1, 
                current_streak: 0, 
                longest_streak: 0, 
                level_info: LEVELS[0], 
                achievements: [] 
            };
        }
        
        const stats = statsResult.rows[0];
        
        // Contar t√≥picos completados - query otimizada
        console.log('[GAMI SERVICE] getGamificationProfile: Executando query completed topics...');
        const startTopics = Date.now();
        const topicsResult = await client.query(
            `SELECT COUNT(DISTINCT ss.topic_id) as count
             FROM study_sessions ss
             JOIN study_plans sp ON ss.study_plan_id = sp.id
             WHERE sp.user_id = $1 
               AND ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') 
               AND ss.topic_id IS NOT NULL`,
            [userId]
        );
        queryTimings.topics = Date.now() - startTopics;
        console.log(`[GAMI SERVICE] getGamificationProfile: Query completed topics conclu√≠da em ${queryTimings.topics}ms`);
        
        const completedTopics = parseInt(topicsResult.rows[0].count, 10) || 0;
        const levelInfo = calculateLevel(completedTopics);
        
        // Buscar conquistas - sem lock, sem transa√ß√£o
        console.log('[GAMI SERVICE] getGamificationProfile: Executando query achievements...');
        const startAchievements = Date.now();
        const achievementsResult = await client.query(
            'SELECT * FROM user_achievements WHERE user_id = $1 ORDER BY unlocked_at DESC LIMIT 100',
            [userId]
        );
        queryTimings.achievements = Date.now() - startAchievements;
        console.log(`[GAMI SERVICE] getGamificationProfile: Query achievements conclu√≠da em ${queryTimings.achievements}ms`);
        
        queryTimings.total = Object.values(queryTimings).reduce((a, b) => a + b, 0);
        console.log('[GAMI SERVICE] getGamificationProfile: Retornando perfil de gamifica√ß√£o.');
        console.log('[GAMI SERVICE] Timings completos:', queryTimings);
        
        return { 
            ...stats, 
            level_info: levelInfo, 
            achievements: achievementsResult.rows 
        };
        
    } catch (error) {
        console.error('[GAMI SERVICE] Erro ao buscar perfil:', error.message);
        console.error('[GAMI SERVICE] Stack:', error.stack);
        console.error('[GAMI SERVICE] C√≥digo do erro:', error.code);
        console.error('[GAMI SERVICE] Timings at√© o erro:', queryTimings);
        
        // Retornar dados m√≠nimos em caso de erro
        return { 
            xp: 0, 
            level: 1, 
            current_streak: 0, 
            longest_streak: 0, 
            level_info: LEVELS[0], 
            achievements: [],
            error: true,
            errorMessage: error.message,
            errorCode: error.code
        };
        
    } finally {
        if (client) {
            const startRelease = Date.now();
            client.release();
            console.log(`[GAMI SERVICE] getGamificationProfile: Cliente do pool liberado em ${Date.now() - startRelease}ms`);
        }
    }
};

// ====================================================================
// FUN√á√ïES AUXILIARES
// ====================================================================

/**
 * Calcula streak usando o client da transa√ß√£o
 */
async function calculateCurrentStreakWithClient(client, userId) {
    const result = await client.query(
        `SELECT DISTINCT session_date::date as session_date
         FROM study_sessions ss
         JOIN study_plans sp ON ss.study_plan_id = sp.id
         WHERE sp.user_id = $1 AND ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida')
         ORDER BY session_date DESC
         LIMIT 30`,
        [userId]
    );
    
    if (result.rows.length === 0) return 0;

    let streak = 0;
    const today = new Date(new Date().toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
    today.setHours(0, 0, 0, 0);

    const lastStudyDate = new Date(result.rows[0].session_date);
    lastStudyDate.setHours(0, 0, 0, 0);

    const diffDays = Math.floor((today - lastStudyDate) / (1000 * 60 * 60 * 24));

    if (diffDays <= 1) {
        streak = 1;
        for (let i = 0; i < result.rows.length - 1; i++) {
            const currentDate = new Date(result.rows[i].session_date);
            const nextDate = new Date(result.rows[i + 1].session_date);
            const daysBetween = Math.floor((currentDate - nextDate) / (1000 * 60 * 60 * 24));
            
            if (daysBetween === 1) {
                streak++;
            } else {
                break;
            }
        }
    }
    return streak;
}

/**
 * Fun√ß√£o auxiliar para countUniqueCompletedTopics (mantida para compatibilidade)
 */
async function countUniqueCompletedTopics(userId) {
    const client = await pool.connect();
    try {
        const result = await client.query(
            `SELECT COUNT(DISTINCT ss.topic_id) as count
             FROM study_sessions ss
             JOIN study_plans sp ON ss.study_plan_id = sp.id
             WHERE sp.user_id = $1 AND ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') AND ss.topic_id IS NOT NULL`,
            [userId]
        );
        return parseInt(result.rows[0]?.count, 10) || 0;
    } finally {
        client.release();
    }
}

/**
 * Fun√ß√£o auxiliar para calculateCurrentStreak (mantida para compatibilidade)
 */
async function calculateCurrentStreak(userId) {
    const client = await pool.connect();
    try {
        return await calculateCurrentStreakWithClient(client, userId);
    } finally {
        client.release();
    }
}

function calculateLevel(completedTopicsCount) {
    let currentLevel = LEVELS[0];
    let currentIndex = 0;
    
    // Encontrar o n√≠vel atual
    for (let i = LEVELS.length - 1; i >= 0; i--) {
        if (completedTopicsCount >= LEVELS[i].threshold) {
            currentLevel = { ...LEVELS[i], level: i + 1 };
            currentIndex = i;
            break;
        }
    }
    
    // Adicionar informa√ß√µes do pr√≥ximo n√≠vel
    const nextLevel = LEVELS[currentIndex + 1];
    if (nextLevel) {
        currentLevel.next_level_info = {
            title: nextLevel.title,
            threshold: nextLevel.threshold,
            topics_needed: nextLevel.threshold - completedTopicsCount
        };
    }
    
    return currentLevel;
}

/**
 * Verifica e concede conquistas usando o client da transa√ß√£o
 */
async function checkAndGrantAchievementsWithClient(client, userId, currentStats) {
    // Buscar conquistas j√° desbloqueadas
    const unlockedResult = await client.query(
        'SELECT achievement_id FROM user_achievements WHERE user_id = $1',
        [userId]
    );
    
    const unlockedIds = new Set(unlockedResult.rows.map(a => a.achievement_id));

    const checkCategory = async (category, value) => {
        for (const ach of ACHIEVEMENTS[category]) {
            if (value >= ach.threshold && !unlockedIds.has(ach.id)) {
                // Usar ON CONFLICT para evitar erros de inser√ß√£o duplicada
                await client.query(
                    `INSERT INTO user_achievements (user_id, achievement_id, unlocked_at) 
                     VALUES ($1, $2, CURRENT_TIMESTAMP) 
                     ON CONFLICT (user_id, achievement_id) DO NOTHING`,
                    [userId, ach.id]
                );
                console.log(`[GAMIFICATION] Conquista: ${ach.title} para user ${userId}`);
            }
        }
    };

    // Usar as contagens j√° calculadas
    await checkCategory('TOPICS', currentStats.completedTopics);
    await checkCategory('STREAK', currentStats.streak);
    await checkCategory('SESSIONS', currentStats.completedSessions);
}

/**
 * Fun√ß√£o auxiliar para checkAndGrantAchievements (mantida para compatibilidade)
 */
async function checkAndGrantAchievements(userId, currentStats) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        await checkAndGrantAchievementsWithClient(client, userId, currentStats);
        await client.query('COMMIT');
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

/**
 * Get user statistics for gamification display
 */
const getUserStats = async (userId) => {
    let client;
    try {
        client = await pool.connect();
        
        // Get gamification stats
        const statsResult = await client.query(
            'SELECT * FROM user_gamification_stats WHERE user_id = $1',
            [userId]
        );
        
        if (statsResult.rows.length === 0) {
            return {
                xp: 0,
                level: 1,
                current_streak: 0,
                longest_streak: 0,
                total_study_time: 0,
                completed_sessions: 0,
                completed_topics: 0
            };
        }
        
        const stats = statsResult.rows[0];
        
        // Get additional counters
        const countsResult = await client.query(
            `SELECT 
                (SELECT COUNT(DISTINCT topic_id) 
                 FROM study_sessions ss 
                 JOIN study_plans sp ON ss.study_plan_id = sp.id 
                 WHERE sp.user_id = $1 AND ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') AND ss.topic_id IS NOT NULL) as completed_topics,
                (SELECT COUNT(*) 
                 FROM study_sessions ss 
                 JOIN study_plans sp ON ss.study_plan_id = sp.id 
                 WHERE sp.user_id = $1 AND ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida')) as completed_sessions,
                (SELECT SUM(COALESCE(time_studied_seconds, 0)) 
                 FROM study_sessions ss 
                 JOIN study_plans sp ON ss.study_plan_id = sp.id 
                 WHERE sp.user_id = $1 AND ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida')) as total_study_time`,
            [userId]
        );
        
        const counts = countsResult.rows[0];
        const levelInfo = calculateLevel(parseInt(counts.completed_topics, 10) || 0);
        
        return {
            ...stats,
            level_info: levelInfo,
            completed_topics: parseInt(counts.completed_topics, 10) || 0,
            completed_sessions: parseInt(counts.completed_sessions, 10) || 0,
            total_study_time: parseInt(counts.total_study_time, 10) || 0
        };
        
    } finally {
        if (client) client.release();
    }
};

/**
 * Get user progress data
 */
const getUserProgress = async (userId) => {
    let client;
    try {
        client = await pool.connect();
        
        // Get active plans for the user
        const plansResult = await client.query(
            'SELECT id, plan_name FROM study_plans WHERE user_id = $1',
            [userId]
        );
        
        if (plansResult.rows.length === 0) {
            return {
                plans: [],
                overall_completion: 0,
                total_sessions: 0,
                completed_sessions: 0
            };
        }
        
        const plans = [];
        let totalSessions = 0;
        let completedSessions = 0;
        
        for (const plan of plansResult.rows) {
            const sessionCountResult = await client.query(
                `SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') THEN 1 ELSE 0 END) as completed
                 FROM study_sessions 
                 WHERE study_plan_id = $1`,
                [plan.id]
            );
            
            const counts = sessionCountResult.rows[0];
            const planTotal = parseInt(counts.total, 10) || 0;
            const planCompleted = parseInt(counts.completed, 10) || 0;
            
            totalSessions += planTotal;
            completedSessions += planCompleted;
            
            plans.push({
                id: plan.id,
                name: plan.plan_name,
                total_sessions: planTotal,
                completed_sessions: planCompleted,
                completion_percentage: planTotal > 0 ? Math.round((planCompleted / planTotal) * 100) : 0
            });
        }
        
        return {
            plans,
            overall_completion: totalSessions > 0 ? Math.round((completedSessions / totalSessions) * 100) : 0,
            total_sessions: totalSessions,
            completed_sessions: completedSessions
        };
        
    } finally {
        if (client) client.release();
    }
};

/**
 * Get user achievements
 */
const getUserAchievements = async (userId) => {
    let client;
    try {
        client = await pool.connect();
        
        const achievementsResult = await client.query(
            'SELECT * FROM user_achievements WHERE user_id = $1 ORDER BY unlocked_at DESC',
            [userId]
        );
        
        return {
            achievements: achievementsResult.rows,
            total_count: achievementsResult.rows.length
        };
        
    } finally {
        if (client) client.release();
    }
};

/**
 * Get general statistics
 */
const getGeneralStatistics = async (userId) => {
    let client;
    try {
        client = await pool.connect();
        
        // Get various statistics
        const statsResult = await client.query(
            `SELECT 
                COUNT(DISTINCT sp.id) as total_plans,
                COUNT(DISTINCT DATE(ss.session_date)) as unique_study_days,
                AVG(CASE WHEN ss.status IN ('Conclu√≠do', 'Conclu√≠da', 'Concluida') THEN ss.time_studied_seconds ELSE NULL END) as avg_session_time
             FROM study_plans sp
             LEFT JOIN study_sessions ss ON sp.id = ss.study_plan_id
             WHERE sp.user_id = $1`,
            [userId]
        );
        
        const result = statsResult.rows[0];
        
        return {
            total_plans: parseInt(result.total_plans, 10) || 0,
            unique_study_days: parseInt(result.unique_study_days, 10) || 0,
            avg_session_time: parseInt(result.avg_session_time, 10) || 0
        };
        
    } finally {
        if (client) client.release();
    }
};

/**
 * Gera lista de conquistas baseada nas m√©tricas do usu√°rio
 * Usado para compatibilidade com rotas antigas
 */
function generateAchievementsFromMetrics(completedTopics, completedSessions, streak) {
    const achievements = [];
    const now = new Date().toISOString();
    
    // Conquistas por t√≥picos
    ACHIEVEMENTS.TOPICS.forEach(ach => {
        if (completedTopics >= ach.threshold) {
            achievements.push({
                title: ach.title,
                description: ach.description,
                achieved_date: now
            });
        }
    });
    
    // Conquistas por streak
    ACHIEVEMENTS.STREAK.forEach(ach => {
        if (streak >= ach.threshold) {
            achievements.push({
                title: ach.title,
                description: ach.description,
                achieved_date: now
            });
        }
    });
    
    // Conquistas por sess√µes
    ACHIEVEMENTS.SESSIONS.forEach(ach => {
        if (completedSessions >= ach.threshold) {
            achievements.push({
                title: ach.title,
                description: ach.description,
                achieved_date: now
            });
        }
    });
    
    return achievements;
}

/**
 * Calcula n√≠vel do usu√°rio no formato esperado pelo controller
 * Retorna objeto com currentLevel, nextLevel e topicsToNextLevel
 */
function calculateUserLevelForController(completedTopicsCount) {
    const levelData = calculateLevel(completedTopicsCount);
    
    // Encontrar pr√≥ximo n√≠vel baseado no threshold atual
    let nextLevelObj = null;
    for (let i = 0; i < LEVELS.length; i++) {
        if (LEVELS[i].threshold > completedTopicsCount) {
            nextLevelObj = LEVELS[i];
            break;
        }
    }
    
    return {
        currentLevel: levelData.title,
        nextLevel: nextLevelObj ? {
            title: nextLevelObj.title,
            threshold: nextLevelObj.threshold,
            xpNeeded: nextLevelObj.threshold * 50 // Simular XP needed
        } : null,
        topicsToNextLevel: nextLevelObj ? nextLevelObj.threshold - completedTopicsCount : 0
    };
}

module.exports = {
    processSessionCompletion,
    getGamificationProfile,
    getUserStats,
    getUserProgress,
    getUserAchievements,
    getGeneralStatistics,
    // Fun√ß√µes helper para controller
    generateAchievementsFromMetrics,
    calculateUserLevelForController,
    calculateCurrentStreak,
    calculateLevel,
    // Exportar tamb√©m as defini√ß√µes para uso em outros lugares
    LEVELS,
    ACHIEVEMENTS,
    XP_REWARDS
};