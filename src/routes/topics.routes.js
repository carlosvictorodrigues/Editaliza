/**
 * TOPICS ROUTES - FASE 4 MIGRATION  
 * Rotas para gerenciar t√≥picos com opera√ß√µes BATCH cr√≠ticas
 * 
 * ROTAS SUPER CR√çTICAS:
 * - PATCH batch_update: Valida√ß√µes complexas para opera√ß√£o em lote
 * - PATCH batch_update_details: Valida√ß√µes para detalhes em lote  
 * - Valida√ß√µes robustas para arrays e campos opcionais
 * - Opera√ß√µes transacionais cr√≠ticas
 */

const express = require('express');
const { body } = require('express-validator');
const router = express.Router();

// Controllers e Middleware
const topicsController = require('../controllers/topics.controller');
const { authenticateToken } = require('../middleware/auth.middleware');
const { validators, handleValidationErrors } = require('../middleware/validation.middleware');

/**
 * GET /api/subjects/:subjectId/topics
 * CR√çTICO: Listar t√≥picos com valida√ß√£o de ownership
 * 
 * Valida√ß√µes cr√≠ticas:
 * - subjectId num√©rico
 * - Cache headers autom√°ticos no controller
 */
router.get('/subjects/:subjectId/topics', 
    authenticateToken(),
    validators.numericId('subjectId'),
    handleValidationErrors,
    topicsController.getTopicsBySubject
);

/**
 * POST /api/subjects/:subjectId/topics
 * Criar novo t√≥pico para uma disciplina
 * 
 * Valida√ß√µes:
 * - subjectId num√©rico
 * - topic_description: descri√ß√£o do t√≥pico (1-500 chars)
 * - weight: peso do t√≥pico (1-5)
 */
router.post('/subjects/:subjectId/topics',
    authenticateToken(),
    validators.numericId('subjectId'),
    body('topic_description')
        .isString()
        .isLength({ min: 1, max: 500 })
        .withMessage('Descri√ß√£o do t√≥pico deve ter entre 1 e 500 caracteres'),
    body('weight')
        .isInt({ min: 1, max: 5 })
        .withMessage('Peso deve ser entre 1 e 5'),
    handleValidationErrors,
    topicsController.createTopicForSubject
);

/**
 * PATCH /api/topics/batch_update
 * SUPER CR√çTICO: Atualiza√ß√£o EM LOTE üî•üî•üî•
 * 
 * Valida√ß√µes EXTREMAMENTE cr√≠ticas:
 * - topics deve ser array
 * - Cada t√≥pico deve ter id num√©rico
 * - Status deve ser 'Pendente' ou 'Conclu√≠do'
 * - completion_date opcional mas deve ser ISO8601 se presente
 * - description opcional mas string se presente
 * 
 * ATEN√á√ÉO: CORE DO SISTEMA - VALIDA√á√ïES CR√çTICAS ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
 */
router.patch('/topics/batch_update', 
    authenticateToken(),
    body('topics')
        .isArray()
        .withMessage('O corpo deve conter um array de t√≥picos'),
    body('topics.*.id')
        .isInt()
        .withMessage('ID do t√≥pico inv√°lido'),
    body('topics.*.status')
        .isIn(['Pendente', 'Conclu√≠do'])
        .withMessage('Status inv√°lido'),
    body('topics.*.completion_date')
        .optional({ nullable: true, checkFalsy: true })
        .isISO8601()
        .withMessage('Data de conclus√£o inv√°lida'),
    body('topics.*.description')
        .optional({ checkFalsy: true })
        .isString()
        .isLength({ min: 1, max: 500 })
        .withMessage('Descri√ß√£o do t√≥pico inv√°lida'),
    handleValidationErrors,
    topicsController.batchUpdateTopics
);

/**
 * PATCH /api/topics/batch_update_details
 * SUPER CR√çTICO: Atualiza√ß√£o de detalhes EM LOTE üî•üî•üî•  
 * 
 * Valida√ß√µes EXTREMAMENTE cr√≠ticas:
 * - topics deve ser array
 * - Cada t√≥pico deve ter id num√©rico
 * - description opcional mas string (1-500 chars) se presente
 * - priority_weight opcional mas int (1-5) se presente
 * 
 * ATEN√á√ÉO: CORE DO SISTEMA - VALIDA√á√ïES CR√çTICAS ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
 */
router.patch('/topics/batch_update_details',
    authenticateToken(),
    body('topics')
        .isArray()
        .withMessage('O corpo deve conter um array de t√≥picos'),
    body('topics.*.id')
        .isInt()
        .withMessage('ID do t√≥pico inv√°lido'),
    body('topics.*.description')
        .optional({ checkFalsy: true })
        .isString()
        .isLength({ min: 1, max: 500 })
        .withMessage('Descri√ß√£o do t√≥pico inv√°lida'),
    body('topics.*.priority_weight')
        .optional()
        .isInt({ min: 1, max: 5 })
        .withMessage('Peso do t√≥pico deve estar entre 1 e 5'),
    handleValidationErrors,
    topicsController.batchUpdateTopicsDetails
);

/**
 * PATCH /api/topics/:topicId
 * CR√çTICO: Atualizar t√≥pico individual
 * 
 * Valida√ß√µes cr√≠ticas:
 * - topicId num√©rico
 * - description string (1-500 chars)
 * - priority_weight opcional mas int (1-5) se presente
 */
router.patch('/topics/:topicId', 
    authenticateToken(),
    validators.numericId('topicId'),
    validators.text('description', 1, 500),
    body('priority_weight')
        .optional()
        .isInt({ min: 1, max: 5 })
        .withMessage('Peso deve ser um n√∫mero entre 1 e 5'),
    handleValidationErrors,
    topicsController.updateTopic
);

/**
 * DELETE /api/topics/:topicId
 * CR√çTICO: Exclus√£o CASCADE com transa√ß√£o
 * 
 * Valida√ß√µes cr√≠ticas:
 * - topicId num√©rico
 * - CASCADE delete autom√°tico no controller
 */
router.delete('/topics/:topicId', 
    authenticateToken(),
    validators.numericId('topicId'),
    handleValidationErrors,
    topicsController.deleteTopic
);

module.exports = router;
