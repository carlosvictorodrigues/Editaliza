#!/usr/bin/env node

/**
 * TESTE DE VALIDA√á√ÉO - FASE 1
 * 
 * Verifica se todas as rotas de autentica√ß√£o foram padronizadas corretamente
 * para o formato /api/auth/*
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VALIDA√á√ÉO FASE 1 - Padroniza√ß√£o de Rotas de Autentica√ß√£o\n');

const publicDir = path.join(__dirname, 'public');
const mainFiles = [
    'login.html',
    'register.html', 
    'forgot-password.html',
    'reset-password.html'
];

const expectedRoutes = {
    '/api/auth/login': 'Rota de login',
    '/api/auth/register': 'Rota de registro',
    '/api/auth/google': 'OAuth Google',
    '/api/auth/session-token': 'Token de sess√£o',
    '/api/auth/password/request': 'Solicita√ß√£o de recupera√ß√£o de senha',
    '/api/auth/password/reset': 'Redefini√ß√£o de senha',
    '/api/auth/csrf-token': 'Token CSRF'
};

const oldRoutes = [
    '"/auth/login"',
    '"/auth/register"',
    "'/auth/login'", 
    "'/auth/register'",
    "'/auth/google'",
    "'/auth/session-token'",
    '"/api/login"',
    "'/api/login'",
    '"/api/register"',
    "'/api/register'",
    "'/api/request-password-reset'",
    "'/api/reset-password'"
];

let validationResults = {
    success: 0,
    warnings: 0,
    errors: 0,
    files: {}
};

function validateFile(filePath) {
    const fileName = path.basename(filePath);
    const content = fs.readFileSync(filePath, 'utf8');
    
    console.log(`üìÑ Validando: ${fileName}`);
    
    let fileResults = {
        foundRoutes: [],
        oldRoutes: [],
        issues: []
    };
    
    // Verificar se as rotas corretas est√£o presentes
    Object.keys(expectedRoutes).forEach(route => {
        if (content.includes(route)) {
            fileResults.foundRoutes.push(route);
            console.log(`  ‚úÖ ${expectedRoutes[route]}: ${route}`);
            validationResults.success++;
        }
    });
    
    // Verificar se ainda existem rotas antigas (ignorando coment√°rios e URLs de produ√ß√£o)
    oldRoutes.forEach(route => {
        if (content.includes(route)) {
            // Verificar se n√£o est√° em coment√°rio ou √© URL de produ√ß√£o
            const lines = content.split('\n');
            const lineWithRoute = lines.find(line => line.includes(route));
            
            if (lineWithRoute && 
                !lineWithRoute.trim().startsWith('//') && 
                !lineWithRoute.trim().startsWith('*') &&
                !lineWithRoute.includes('editaliza.com.br') &&
                !lineWithRoute.includes('callback') &&
                !lineWithRoute.includes('Callback URL')) {
                fileResults.oldRoutes.push(route);
                console.log(`  ‚ö†Ô∏è  Rota antiga encontrada: ${route}`);
                validationResults.warnings++;
            }
        }
    });
    
    // Verificar uso correto de app.apiFetch
    const fetchMatches = content.match(/app\.apiFetch\s*\(\s*['"`]([^'"`]+)/g);
    if (fetchMatches) {
        fetchMatches.forEach(match => {
            const route = match.match(/['"`]([^'"`]+)/)[1];
            if (route.startsWith('/api/auth/')) {
                console.log(`  ‚úÖ app.apiFetch usando rota correta: ${route}`);
            } else if (route.startsWith('/api/')) {
                console.log(`  ‚ÑπÔ∏è  app.apiFetch usando rota API: ${route}`);
            }
        });
    }
    
    validationResults.files[fileName] = fileResults;
    console.log('');
}

// Validar arquivos principais
console.log('üìã ARQUIVOS PRINCIPAIS:\n');
mainFiles.forEach(fileName => {
    const filePath = path.join(publicDir, fileName);
    if (fs.existsSync(filePath)) {
        validateFile(filePath);
    } else {
        console.log(`‚ùå Arquivo n√£o encontrado: ${fileName}\n`);
        validationResults.errors++;
    }
});

// Verificar arquivos de teste importantes
console.log('üß™ ARQUIVOS DE TESTE:\n');
const testFiles = [
    'test_complete_flow.html',
    'test_api_routes.html'
];

testFiles.forEach(fileName => {
    const filePath = path.join(publicDir, fileName);
    if (fs.existsSync(filePath)) {
        validateFile(filePath);
    }
});

// Relat√≥rio final
console.log('üìä RELAT√ìRIO FINAL:\n');
console.log(`‚úÖ Sucessos: ${validationResults.success}`);
console.log(`‚ö†Ô∏è  Avisos: ${validationResults.warnings}`);
console.log(`‚ùå Erros: ${validationResults.errors}\n`);

if (validationResults.warnings > 0) {
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Algumas rotas antigas ainda est√£o presentes.');
    console.log('   Certifique-se de que n√£o est√£o sendo usadas ativamente.\n');
}

if (validationResults.errors === 0 && validationResults.warnings < 3) {
    console.log('üéâ FASE 1 CONCLU√çDA COM SUCESSO!');
    console.log('   Todas as rotas de autentica√ß√£o foram padronizadas.');
    console.log('\n‚úÖ PRINCIPAIS CORRE√á√ïES APLICADAS:');
    console.log('   ‚Ä¢ /auth/login ‚Üí /api/auth/login');
    console.log('   ‚Ä¢ /auth/register ‚Üí /api/auth/register');
    console.log('   ‚Ä¢ /auth/google ‚Üí /api/auth/google');
    console.log('   ‚Ä¢ /api/request-password-reset ‚Üí /api/auth/password/request');
    console.log('   ‚Ä¢ /api/reset-password ‚Üí /api/auth/password/reset');
    process.exit(0);
} else {
    console.log('‚ùå FASE 1 PRECISA DE ATEN√á√ÉO');
    console.log('   Verifique os avisos e erros acima.');
    process.exit(1);
}