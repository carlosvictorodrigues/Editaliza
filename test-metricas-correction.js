/**
 * TESTE R√ÅPIDO - Verifica√ß√£o das M√©tricas Corrigidas
 * 
 * Este script testa se as corre√ß√µes nas m√©tricas est√£o funcionando corretamente.
 * Executa cen√°rios que reproduzem o problema reportado.
 */

const { dbGet, dbAll } = require('./src/utils/database');
const planService = require('./src/services/planService');

async function testMetricsCorrection() {
    console.log('üß™ INICIANDO TESTE DAS M√âTRICAS CORRIGIDAS...\n');
    
    try {
        // 1. Buscar um plano de teste para verificar
        const testPlan = await dbGet('SELECT id FROM study_plans LIMIT 1');
        
        if (!testPlan) {
            console.log('‚ùå Nenhum plano de teste encontrado');
            return;
        }
        
        const planId = testPlan.id;
        console.log(`üìã Testando com Plano ID: ${planId}\n`);
        
        // 2. Verificar estado atual das sess√µes
        const sessions = await dbAll(
            'SELECT session_type, status, topic_id FROM study_sessions WHERE study_plan_id = ?',
            [planId]
        );
        
        console.log('üìä ESTADO ATUAL DAS SESS√ïES:');
        const novoTopicoSessions = sessions.filter(s => s.session_type === 'Novo T√≥pico');
        const completedSessions = novoTopicoSessions.filter(s => s.status === 'Conclu√≠do');
        const uniqueCompletedTopics = new Set(completedSessions.filter(s => s.topic_id).map(s => s.topic_id));
        
        console.log(`- Total de sess√µes 'Novo T√≥pico': ${novoTopicoSessions.length}`);
        console.log(`- Sess√µes 'Conclu√≠do': ${completedSessions.length}`);
        console.log(`- T√≥picos √∫nicos conclu√≠dos: ${uniqueCompletedTopics.size}\n`);
        
        // 3. Testar a fun√ß√£o corrigida
        console.log('üîß TESTANDO FUN√á√ÉO getSchedulePreview CORRIGIDA:');
        const scheduleData = await planService.getSchedulePreview(planId, 1);
        
        console.log('üìà M√âTRICAS CALCULADAS:');
        console.log(`- completedTopics: ${scheduleData.completedTopics}`);
        console.log(`- totalTopics: ${scheduleData.totalTopics}`);
        console.log(`- pendingTopics: ${scheduleData.pendingTopics}`);
        console.log(`- currentProgress: ${scheduleData.currentProgress}%`);
        console.log(`- progressText: "${scheduleData.status.progressText}"`);
        console.log(`- remainingText: "${scheduleData.status.remainingText}"\n`);
        
        // 4. Verificar consist√™ncia
        const expectedCompleted = uniqueCompletedTopics.size;
        const actualCompleted = scheduleData.completedTopics;
        
        console.log('‚úÖ VERIFICA√á√ÉO DE CONSIST√äNCIA:');
        if (expectedCompleted === actualCompleted) {
            console.log(`‚úÖ CORRETO: T√≥picos conclu√≠dos calculados corretamente (${actualCompleted})`);
        } else {
            console.log(`‚ùå ERRO: Esperado ${expectedCompleted}, mas obtido ${actualCompleted}`);
        }
        
        // 5. Verificar se a porcentagem est√° correta
        const expectedPercentage = scheduleData.totalTopics > 0 
            ? Math.round((actualCompleted / scheduleData.totalTopics) * 100) 
            : 0;
        
        if (expectedPercentage === scheduleData.currentProgress) {
            console.log(`‚úÖ CORRETO: Porcentagem calculada corretamente (${scheduleData.currentProgress}%)`);
        } else {
            console.log(`‚ùå ERRO: Porcentagem esperada ${expectedPercentage}%, mas obtida ${scheduleData.currentProgress}%`);
        }
        
        // 6. Verificar texto das m√©tricas
        if (scheduleData.status.progressText.includes(`${actualCompleted} t√≥picos`)) {
            console.log('‚úÖ CORRETO: Texto de progresso atualizado corretamente');
        } else {
            console.log('‚ùå ERRO: Texto de progresso n√£o est√° correto');
        }
        
        console.log('\nüéØ TESTE CONCLU√çDO!');
        
    } catch (error) {
        console.error('‚ùå ERRO NO TESTE:', error.message);
        console.error(error.stack);
    }
}

// Executar o teste se o arquivo for executado diretamente
if (require.main === module) {
    testMetricsCorrection().then(() => {
        console.log('\n‚ú® Teste finalizado. Verifique os resultados acima.');
        process.exit(0);
    }).catch(error => {
        console.error('‚ùå ERRO FATAL NO TESTE:', error);
        process.exit(1);
    });
}

module.exports = { testMetricsCorrection };