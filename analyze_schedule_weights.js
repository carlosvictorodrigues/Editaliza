#!/usr/bin/env node

/**
 * An√°lise do Algoritmo de Gera√ß√£o do Cronograma TJPE2025
 * 
 * Este script analisa se o algoritmo est√° respeitando corretamente os pesos das disciplinas
 * no plano TJPE2025 conforme especificado pelo usu√°rio.
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

class ScheduleWeightAnalyzer {
    constructor() {
        this.dbPath = path.join(__dirname, 'db.sqlite');
        this.db = null;
        this.planId = 1005; // TJPE Plan ID ap√≥s restaura√ß√£o
        this.userId = 1000; // User 3@3.com
        
        // Pesos esperados conforme documenta√ß√£o TJPE2025
        this.expectedWeights = {
            'Direito Civil': 5,           // MAIOR PESO - 10 t√≥picos
            'Direito Administrativo': 4,  // 30 t√≥picos  
            'Direito Constitucional': 4,  // 15 t√≥picos
            'Direito Penal': 4,           // 12 t√≥picos
            'Direito Processual Civil': 4, // 21 t√≥picos
            'Direito Processual Penal': 4, // 11 t√≥picos
            'Legisla√ß√£o': 3,              // 7 t√≥picos
            'L√≠ngua Portuguesa': 2,       // 17 t√≥picos
            'Racioc√≠nio L√≥gico': 1        // MENOR PESO - 8 t√≥picos
        };
        
        this.expectedCounts = {
            'Direito Civil': 10,
            'Direito Administrativo': 30,
            'Direito Constitucional': 15,
            'Direito Penal': 12,
            'Direito Processual Civil': 21,
            'Direito Processual Penal': 11,
            'Legisla√ß√£o': 7,
            'L√≠ngua Portuguesa': 17,
            'Racioc√≠nio L√≥gico': 8
        };
    }

    async connect() {
        return new Promise((resolve, reject) => {
            this.db = new sqlite3.Database(this.dbPath, (err) => {
                if (err) {
                    reject(new Error(`Falha ao conectar ao banco: ${err.message}`));
                    return;
                }
                console.log('üîå Conectado ao banco de dados');
                resolve();
            });
        });
    }

    async close() {
        if (this.db) {
            await new Promise(resolve => {
                this.db.close((err) => {
                    if (err) console.error('Erro ao fechar banco:', err);
                    resolve();
                });
            });
            console.log('üì¥ Conex√£o com banco fechada');
        }
    }

    async query(sql, params = []) {
        return new Promise((resolve, reject) => {
            this.db.all(sql, params, (err, rows) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows);
                }
            });
        });
    }

    async getSubjectsData() {
        console.log('üìä Coletando dados das disciplinas...');
        
        const subjects = await this.query(`
            SELECT s.subject_name, s.priority_weight, COUNT(t.id) as topic_count
            FROM subjects s
            LEFT JOIN topics t ON s.id = t.subject_id
            WHERE s.study_plan_id = ?
            GROUP BY s.id, s.subject_name, s.priority_weight
            ORDER BY s.priority_weight DESC
        `, [this.planId]);

        return subjects;
    }

    async getScheduleFrequency() {
        console.log('üìÖ Analisando frequ√™ncia no cronograma (pr√≥ximas 3 semanas)...');
        
        const today = new Date();
        const threeWeeksLater = new Date();
        threeWeeksLater.setDate(today.getDate() + 21);
        
        const todayStr = today.toISOString().split('T')[0];
        const endDateStr = threeWeeksLater.toISOString().split('T')[0];
        
        const sessions = await this.query(`
            SELECT subject_name, COUNT(*) as session_count, session_type
            FROM study_sessions
            WHERE study_plan_id = ? 
            AND session_date BETWEEN ? AND ?
            GROUP BY subject_name, session_type
            ORDER BY session_count DESC
        `, [this.planId, todayStr, endDateStr]);

        // Agregrar por disciplina
        const frequency = {};
        sessions.forEach(session => {
            if (!frequency[session.subject_name]) {
                frequency[session.subject_name] = 0;
            }
            frequency[session.subject_name] += session.session_count;
        });

        return { detailed: sessions, aggregated: frequency };
    }

    async getAllScheduleData() {
        console.log('üìà Coletando todos os dados do cronograma...');
        
        const allSessions = await this.query(`
            SELECT subject_name, COUNT(*) as total_sessions, session_type
            FROM study_sessions
            WHERE study_plan_id = ?
            GROUP BY subject_name, session_type
        `, [this.planId]);

        const totalBySubject = {};
        allSessions.forEach(session => {
            if (!totalBySubject[session.subject_name]) {
                totalBySubject[session.subject_name] = 0;
            }
            totalBySubject[session.subject_name] += session.total_sessions;
        });

        return { detailed: allSessions, aggregated: totalBySubject };
    }

    calculateExpectedFrequency(subjects, totalSessions) {
        console.log('üßÆ Calculando frequ√™ncia esperada baseada nos pesos...');
        
        // Calcular peso total
        const totalWeight = subjects.reduce((sum, subj) => sum + subj.priority_weight, 0);
        
        // Calcular frequ√™ncia esperada para cada disciplina
        const expectedFreq = {};
        subjects.forEach(subj => {
            const weightRatio = subj.priority_weight / totalWeight;
            expectedFreq[subj.subject_name] = Math.round(totalSessions * weightRatio);
        });
        
        return expectedFreq;
    }

    analyzeWeightCompliance(subjects, actualFreq, expectedFreq) {
        console.log('\nüîç AN√ÅLISE DE CONFORMIDADE COM OS PESOS');
        console.log('='.repeat(50));
        
        const analysis = [];
        
        subjects.forEach(subj => {
            const actual = actualFreq[subj.subject_name] || 0;
            const expected = expectedFreq[subj.subject_name] || 0;
            const variance = expected > 0 ? ((actual - expected) / expected * 100) : 0;
            const configuredWeight = this.expectedWeights[subj.subject_name] || 0;
            const weightMatch = subj.priority_weight === configuredWeight;
            
            analysis.push({
                subject: subj.subject_name,
                configuredWeight: configuredWeight,
                dbWeight: subj.priority_weight,
                weightMatch: weightMatch,
                actualSessions: actual,
                expectedSessions: expected,
                variance: variance,
                topicCount: subj.topic_count
            });
        });
        
        // Ordenar por peso configurado (maior para menor)
        analysis.sort((a, b) => b.configuredWeight - a.configuredWeight);
        
        return analysis;
    }

    printDetailedAnalysis(analysis, actualFreq) {
        console.log('\nüìä AN√ÅLISE QUANTITATIVA DETALHADA');
        console.log('='.repeat(80));
        
        const totalActualSessions = Object.values(actualFreq).reduce((sum, count) => sum + count, 0);
        
        analysis.forEach((item, index) => {
            const percentage = totalActualSessions > 0 ? ((item.actualSessions / totalActualSessions) * 100) : 0;
            const status = item.weightMatch ? '‚úÖ' : '‚ùå';
            const varianceStatus = Math.abs(item.variance) < 20 ? '‚úÖ' : (Math.abs(item.variance) < 40 ? '‚ö†Ô∏è' : '‚ùå');
            
            console.log(`\n${index + 1}. ${status} ${item.subject} (Peso: ${item.configuredWeight})`);
            console.log(`   üìä Peso no BD: ${item.dbWeight} ${item.weightMatch ? '‚úÖ' : '‚ùå Erro!'}`);
            console.log(`   üìù T√≥picos: ${item.topicCount} (esperado: ${this.expectedCounts[item.subject] || 'N/A'})`);
            console.log(`   üìÖ Sess√µes: ${item.actualSessions} (${percentage.toFixed(1)}% do total)`);
            console.log(`   üéØ Esperado: ${item.expectedSessions} sess√µes`);
            console.log(`   üìà Varia√ß√£o: ${item.variance > 0 ? '+' : ''}${item.variance.toFixed(1)}% ${varianceStatus}`);
        });
    }

    printProblems(analysis) {
        console.log('\n‚ö†Ô∏è PROBLEMAS IDENTIFICADOS');
        console.log('='.repeat(50));
        
        const problems = [];
        
        // Verificar se Direito Civil (peso 5) tem a maior frequ√™ncia
        const direitoCivil = analysis.find(a => a.subject === 'Direito Civil');
        const maxFreq = Math.max(...analysis.map(a => a.actualSessions));
        
        if (direitoCivil && direitoCivil.actualSessions !== maxFreq) {
            problems.push({
                type: 'PRIORIDADE_INCORRETA',
                message: `Direito Civil (peso ${direitoCivil.configuredWeight}) deveria ter a MAIOR frequ√™ncia, mas tem apenas ${direitoCivil.actualSessions} sess√µes`,
                severity: 'CR√çTICO'
            });
        }
        
        // Verificar se Racioc√≠nio L√≥gico (peso 1) tem a menor frequ√™ncia  
        const raciocinioLogico = analysis.find(a => a.subject === 'Racioc√≠nio L√≥gico');
        const minFreq = Math.min(...analysis.map(a => a.actualSessions));
        
        if (raciocinioLogico && raciocinioLogico.actualSessions !== minFreq) {
            problems.push({
                type: 'PRIORIDADE_INCORRETA',
                message: `Racioc√≠nio L√≥gico (peso ${raciocinioLogico.configuredWeight}) deveria ter a MENOR frequ√™ncia, mas tem ${raciocinioLogico.actualSessions} sess√µes`,
                severity: 'CR√çTICO'
            });
        }
        
        // Verificar pesos incorretos no banco
        analysis.forEach(item => {
            if (!item.weightMatch) {
                problems.push({
                    type: 'PESO_INCORRETO',
                    message: `${item.subject}: peso no BD √© ${item.dbWeight}, deveria ser ${item.configuredWeight}`,
                    severity: 'ALTO'
                });
            }
        });
        
        // Verificar varia√ß√µes extremas
        analysis.forEach(item => {
            if (Math.abs(item.variance) > 40) {
                problems.push({
                    type: 'VARIACAO_EXTREMA',
                    message: `${item.subject}: varia√ß√£o de ${item.variance.toFixed(1)}% em rela√ß√£o ao esperado`,
                    severity: 'M√âDIO'
                });
            }
        });
        
        if (problems.length === 0) {
            console.log('‚úÖ Nenhum problema cr√≠tico identificado!');
            return;
        }
        
        problems.forEach((problem, index) => {
            const icon = problem.severity === 'CR√çTICO' ? 'üî¥' : 
                        problem.severity === 'ALTO' ? 'üü†' : 'üü°';
            console.log(`${index + 1}. ${icon} ${problem.severity}: ${problem.message}`);
        });
        
        return problems;
    }

    printRecommendations(problems) {
        console.log('\nüí° RECOMENDA√á√ïES DE CORRE√á√ÉO');
        console.log('='.repeat(50));
        
        if (!problems || problems.length === 0) {
            console.log('‚úÖ O algoritmo est√° funcionando corretamente!');
            console.log('   - Os pesos est√£o sendo respeitados na distribui√ß√£o');
            console.log('   - A prioriza√ß√£o est√° adequada');
            return;
        }
        
        console.log('üîß AJUSTES NECESS√ÅRIOS NO ALGORITMO:');
        
        if (problems.some(p => p.type === 'PESO_INCORRETO')) {
            console.log('\n1. üìä CORRE√á√ÉO DOS PESOS NO BANCO DE DADOS:');
            console.log('   - Executar script de corre√ß√£o dos pesos das disciplinas');
            console.log('   - Verificar se os pesos est√£o sendo salvos corretamente');
        }
        
        if (problems.some(p => p.type === 'PRIORIDADE_INCORRETA')) {
            console.log('\n2. ‚öñÔ∏è AJUSTE DO ALGORITMO DE DISTRIBUI√á√ÉO:');
            console.log('   - Revisar a f√≥rmula de c√°lculo: combinedPriority = Math.max(1, t.subject_priority + t.topic_priority - 3)');
            console.log('   - Considerar usar multiplica√ß√£o ao inv√©s de soma para maior diferencia√ß√£o');
            console.log('   - Exemplo: combinedPriority = t.subject_priority * t.topic_priority');
        }
        
        if (problems.some(p => p.type === 'VARIACAO_EXTREMA')) {
            console.log('\n3. üìà BALANCEAMENTO DA DISTRIBUI√á√ÉO:');
            console.log('   - Implementar verifica√ß√£o de limites por disciplina');
            console.log('   - Adicionar l√≥gica de rebalanceamento din√¢mico');
        }
        
        console.log('\nüéØ PR√ìXIMOS PASSOS:');
        console.log('   1. Corrigir os pesos no banco de dados');
        console.log('   2. Testar o algoritmo com os pesos corretos');
        console.log('   3. Ajustar a f√≥rmula se necess√°rio');
        console.log('   4. Re-gerar o cronograma para o usu√°rio');
    }

    async generateFullReport() {
        console.log('üèõÔ∏è AN√ÅLISE DO ALGORITMO DE CRONOGRAMA - TJPE2025');
        console.log('=' .repeat(60));
        console.log(`üìã Plano: ${this.planId} | Usu√°rio: ${this.userId} (3@3.com)`);
        console.log(`üìÖ Data da an√°lise: ${new Date().toLocaleDateString('pt-BR')}`);
        
        try {
            // Coletar dados
            const subjects = await this.getSubjectsData();
            const scheduleFreq = await this.getScheduleFrequency();
            const allSchedule = await this.getAllScheduleData();
            
            // An√°lise pr√≥ximas 3 semanas
            console.log('\nüìä DADOS DAS DISCIPLINAS E PESOS ATUAIS:');
            subjects.forEach(subj => {
                const expected = this.expectedWeights[subj.subject_name];
                const match = subj.priority_weight === expected ? '‚úÖ' : '‚ùå';
                console.log(`   ${match} ${subj.subject_name}: Peso ${subj.priority_weight} (esperado: ${expected}) | ${subj.topic_count} t√≥picos`);
            });
            
            // Calcular frequ√™ncia esperada
            const totalSessions = Object.values(scheduleFreq.aggregated).reduce((sum, count) => sum + count, 0);
            const expectedFreq = this.calculateExpectedFrequency(subjects, totalSessions);
            
            // An√°lise de conformidade
            const analysis = this.analyzeWeightCompliance(subjects, scheduleFreq.aggregated, expectedFreq);
            
            // Relat√≥rios
            this.printDetailedAnalysis(analysis, scheduleFreq.aggregated);
            const problems = this.printProblems(analysis);
            this.printRecommendations(problems);
            
            console.log('\nüìà RESUMO EXECUTIVO:');
            console.log(`   üìö Total de disciplinas: ${subjects.length}`);
            console.log(`   üìù Total de t√≥picos: ${subjects.reduce((sum, s) => sum + s.topic_count, 0)}`);
            console.log(`   üìÖ Sess√µes pr√≥ximas 3 semanas: ${totalSessions}`);
            console.log(`   ‚ö†Ô∏è Problemas identificados: ${problems ? problems.length : 0}`);
            
            // Conclus√£o
            const hasCriticalProblems = problems && problems.some(p => p.severity === 'CR√çTICO');
            if (hasCriticalProblems) {
                console.log('\nüî¥ CONCLUS√ÉO: O algoritmo N√ÉO est√° respeitando corretamente os pesos!');
                console.log('   O usu√°rio est√° sendo prejudicado pela m√° prioriza√ß√£o das disciplinas.');
            } else {
                console.log('\n‚úÖ CONCLUS√ÉO: O algoritmo est√° funcionando adequadamente!');
                console.log('   Os pesos est√£o sendo respeitados na gera√ß√£o do cronograma.');
            }
            
        } catch (error) {
            console.error('‚ùå Erro na an√°lise:', error.message);
            throw error;
        }
    }
}

// Fun√ß√£o removida - erro corrigido

/**
 * Execu√ß√£o principal
 */
async function main() {
    const analyzer = new ScheduleWeightAnalyzer();
    
    try {
        await analyzer.connect();
        await analyzer.generateFullReport();
        
        console.log('\nüéâ AN√ÅLISE CONCLU√çDA COM SUCESSO!');
        
    } catch (error) {
        console.error('\nüí• ERRO NA AN√ÅLISE:', error.message);
        console.error('\nüîß Poss√≠veis solu√ß√µes:');
        console.error('   1. Verificar se o banco de dados existe');
        console.error('   2. Confirmar se o plano TJPE foi restaurado corretamente');
        console.error('   3. Verificar permiss√µes do arquivo de banco');
        
        process.exit(1);
    } finally {
        await analyzer.close();
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main();
}

module.exports = { ScheduleWeightAnalyzer };