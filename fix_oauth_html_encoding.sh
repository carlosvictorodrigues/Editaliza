#!/bin/bash

echo "üîß Corrigindo HTML encoding no OAuth..."
echo "Data: $(date)"
echo ""

# Criar arquivo com a corre√ß√£o
cat > /tmp/fix_oauth_encoding.js << 'EOF'
const fs = require('fs');
const path = require('path');

const filePath = '/root/editaliza/src/services/googleOAuthService.js';
let content = fs.readFileSync(filePath, 'utf8');

// Adicionar fun√ß√£o decodeHtmlEntities se n√£o existir
if (!content.includes('decodeHtmlEntities')) {
    console.log('‚úÖ Adicionando fun√ß√£o decodeHtmlEntities...');
    
    // Encontrar onde inserir a fun√ß√£o (antes de exchangeCodeForToken)
    const insertPoint = content.indexOf('    /**\n     * Troca c√≥digo de autoriza√ß√£o por token');
    
    if (insertPoint === -1) {
        console.error('‚ùå N√£o encontrou ponto de inser√ß√£o');
        process.exit(1);
    }
    
    const newFunction = `    /**
     * Decodifica HTML entities em uma string
     * @param {string} str - String possivelmente com HTML entities
     */
    decodeHtmlEntities(str) {
        const entities = {
            '&#x2F;': '/',
            '&#x3D;': '=',
            '&#x2B;': '+',
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
            '&#x27;': "'",
            '&#x60;': '\`'
        };
        
        let decoded = str;
        for (const [entity, char] of Object.entries(entities)) {
            decoded = decoded.replace(new RegExp(entity, 'g'), char);
        }
        return decoded;
    }

`;
    
    // Inserir a fun√ß√£o antes de exchangeCodeForToken
    content = content.substring(0, insertPoint) + newFunction + content.substring(insertPoint);
}

// Atualizar a fun√ß√£o exchangeCodeForToken para usar decodeHtmlEntities
const oldCode = `        try {
            console.log('\\nüîÑ INICIANDO TROCA DE C√ìDIGO POR TOKEN');
            console.log(\`   C√≥digo recebido: \${code.substring(0, 10)}...\${code.substring(code.length - 10)} (length: \${code.length})\`);
            
            // Limpar c√≥digo - remover poss√≠veis espa√ßos ou caracteres extras
            // IMPORTANTE: + pode ser convertido em espa√ßo se o proxy n√£o estiver configurado corretamente
            const cleanCode = code.trim().replace(/\\s+/g, '+'); // Restaurar + se foi convertido em espa√ßo`;

const newCode = `        try {
            console.log('\\nüîÑ INICIANDO TROCA DE C√ìDIGO POR TOKEN');
            console.log(\`   C√≥digo recebido (raw): \${code.substring(0, 20)}...\${code.substring(code.length - 10)} (length: \${code.length})\`);
            
            // CORRE√á√ÉO CR√çTICA: Decodificar HTML entities PRIMEIRO
            // O c√≥digo pode vir HTML-encoded do callback (ex: &#x2F; ao inv√©s de /)
            let cleanCode = this.decodeHtmlEntities(code);
            console.log(\`   C√≥digo ap√≥s decode HTML: \${cleanCode.substring(0, 20)}...\${cleanCode.substring(cleanCode.length - 10)}\`);
            
            // Depois limpar espa√ßos e restaurar + se necess√°rio
            // IMPORTANTE: + pode ser convertido em espa√ßo se o proxy n√£o estiver configurado corretamente
            cleanCode = cleanCode.trim().replace(/\\s+/g, '+'); // Restaurar + se foi convertido em espa√ßo`;

if (content.includes(oldCode)) {
    content = content.replace(oldCode, newCode);
    console.log('‚úÖ C√≥digo de tratamento HTML encoding atualizado');
} else if (content.includes('C√≥digo recebido (raw)')) {
    console.log('‚ö†Ô∏è Corre√ß√£o j√° aplicada anteriormente');
} else {
    console.log('‚ö†Ô∏è C√≥digo n√£o encontrado exatamente, tentando corre√ß√£o alternativa...');
    
    // Tentar uma corre√ß√£o mais robusta
    const regex = /console\.log\('\\nüîÑ INICIANDO TROCA DE C√ìDIGO POR TOKEN'\);[\s\S]*?const cleanCode = code\.trim\(\)\.replace\(\/\\s\+\/g, '\+'\);/;
    
    if (regex.test(content)) {
        content = content.replace(regex, newCode);
        console.log('‚úÖ Corre√ß√£o aplicada com regex');
    } else {
        console.error('‚ùå N√£o foi poss√≠vel aplicar a corre√ß√£o');
        process.exit(1);
    }
}

// Salvar arquivo
fs.writeFileSync(filePath, content);
console.log('‚úÖ Arquivo atualizado com sucesso');
console.log('üìù Salvando backup...');
fs.writeFileSync(filePath + '.bak', fs.readFileSync(filePath));
EOF

echo "üìù Aplicando corre√ß√£o..."
cd /root/editaliza
node /tmp/fix_oauth_encoding.js

echo ""
echo "üîÑ Reiniciando aplica√ß√£o..."
pm2 restart editaliza-app

echo ""
echo "‚è≥ Aguardando aplica√ß√£o iniciar..."
sleep 5

echo ""
echo "üìä Status da aplica√ß√£o:"
pm2 status editaliza-app

echo ""
echo "üìã Verificando logs para confirmar mudan√ßa:"
pm2 logs editaliza-app --lines 10 --nostream | grep -E "OAUTH|decode HTML|C√≥digo"

echo ""
echo "‚úÖ Corre√ß√£o aplicada!"
echo ""
echo "üß™ Para testar:"
echo "1. Acesse https://editaliza.com.br/login.html"
echo "2. Clique em 'Entrar com Google'"
echo "3. Complete o fluxo OAuth"
echo "4. Monitore logs: pm2 logs editaliza-app"
echo ""
echo "üìù Se ainda houver erro 'Malformed auth code', verifique:"
echo "- Google Console tem redirect_uri: https://editaliza.com.br/auth/google/callback"
echo "- Logs mostram 'C√≥digo ap√≥s decode HTML' com / ao inv√©s de &#x2F;"