/**
 * @file js/navigation-init.js
 * @description Inicializa√ß√£o universal da navega√ß√£o para todas as p√°ginas
 * @version 1.0 - Fix para navega√ß√£o n√£o aparecendo em p√°ginas al√©m da home
 */

(function() {
    'use strict';
    
    // Fun√ß√£o para aguardar m√≥dulos cr√≠ticos
    async function waitForModules(maxWait = 10000) {
        const startTime = Date.now();
        
        while (Date.now() - startTime < maxWait) {
            // Verificar se app e components est√£o dispon√≠veis
            if (window.app && window.components) {
                console.log('‚úÖ M√≥dulos de navega√ß√£o prontos');
                return true;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        console.warn('‚ö†Ô∏è Timeout aguardando m√≥dulos de navega√ß√£o');
        return false;
    }
    
    // Fun√ß√£o para detectar p√°gina atual
    function getCurrentPage() {
        const path = window.location.pathname;
        const pageName = path.substring(path.lastIndexOf('/') + 1) || 'index.html';
        return pageName;
    }
    
    // Fun√ß√£o principal de inicializa√ß√£o da navega√ß√£o
    async function initializeNavigation() {
        console.log('üöÄ Inicializando navega√ß√£o universal...');
        
        try {
            // Aguardar m√≥dulos estarem dispon√≠veis
            const modulesReady = await waitForModules();
            
            if (!modulesReady) {
                console.error('‚ùå M√≥dulos n√£o carregados, navega√ß√£o n√£o renderizada');
                return;
            }
            
            // Detectar p√°gina atual
            const currentPage = getCurrentPage();
            console.log('üìç P√°gina atual:', currentPage);
            
            // Verificar se estamos autenticados
            if (!app.isAuthenticated()) {
                console.log('üîí Usu√°rio n√£o autenticado, pulando navega√ß√£o');
                // Se n√£o estiver autenticado e n√£o estiver em p√°gina p√∫blica, redirecionar
                const publicPages = ['login.html', 'register.html', 'forgot-password.html', 'reset-password.html', 'index.html'];
                if (!publicPages.includes(currentPage)) {
                    window.location.href = '/login.html';
                }
                return;
            }
            
            // Renderizar navega√ß√£o principal
            if (components && typeof components.renderMainNavigation === 'function') {
                console.log('üé® Renderizando navega√ß√£o principal...');
                await components.renderMainNavigation(currentPage);
                console.log('‚úÖ Navega√ß√£o renderizada com sucesso');
            } else {
                console.error('‚ùå Fun√ß√£o renderMainNavigation n√£o dispon√≠vel');
            }
            
            // Para p√°ginas que precisam do PlanContext (n√£o home.html)
            if (currentPage !== 'home.html') {
                // Verificar se precisamos carregar o contexto de plano
                const pagesNeedingPlan = ['dashboard.html', 'plan.html', 'cronograma.html', 'plan_settings.html'];
                
                if (pagesNeedingPlan.includes(currentPage)) {
                    // Carregar PlanContext se n√£o estiver dispon√≠vel
                    if (!window.PlanContext) {
                        console.log('üì¶ Carregando PlanContext...');
                        await loadScript('/js/state/plan-context.js');
                    }
                    
                    // Inicializar contexto se dispon√≠vel
                    if (window.PlanContext) {
                        try {
                            await window.PlanContext.initialize();
                            console.log('‚úÖ PlanContext inicializado');
                        } catch (error) {
                            console.warn('‚ö†Ô∏è Erro ao inicializar PlanContext:', error);
                        }
                    }
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar navega√ß√£o:', error);
        }
    }
    
    // Fun√ß√£o auxiliar para carregar scripts dinamicamente
    function loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
    
    // Inicializar quando DOM estiver pronto
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeNavigation);
    } else {
        // DOM j√° carregado
        initializeNavigation();
    }
    
    // Exportar para uso global se necess√°rio
    window.NavigationInit = {
        initialize: initializeNavigation,
        getCurrentPage: getCurrentPage
    };
    
})();

console.log('üì¶ NavigationInit carregado - navega√ß√£o universal dispon√≠vel');