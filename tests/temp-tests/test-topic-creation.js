/**
 * Teste espec√≠fico para cria√ß√£o de t√≥picos simulando o repository
 */

require('dotenv').config();
const db = require('./database-simple-postgres');
const { createRepositories } = require('./src/repositories');

async function testTopicCreation() {
    console.log('üß™ TESTANDO CRIA√á√ÉO DE T√ìPICOS...\n');

    try {
        // Inicializar repositories
        const repos = createRepositories(db);
        console.log('‚úÖ Repositories inicializados');

        // Buscar um plano existente
        const plan = await repos.plan.findById(1);
        console.log('üìã Plano encontrado:', plan ? plan.plan_name : 'Nenhum');

        if (!plan) {
            console.log('‚ùå Nenhum plano encontrado. Criando um plano de teste...');
            
            // Criar usu√°rio de teste se necess√°rio
            let userId = 1;
            try {
                const user = await db.get('SELECT id FROM app.users LIMIT 1');
                userId = user ? user.id : 1;
            } catch (e) {
                console.log('‚ö†Ô∏è Usando userId padr√£o: 1');
            }

            // Criar plano de teste
            const planData = {
                user_id: userId,
                plan_name: 'Plano de Teste Debug',
                exam_date: '2025-12-31'
            };

            try {
                const newPlanId = await repos.plan.createPlan(planData);
                console.log('‚úÖ Plano de teste criado com ID:', newPlanId);
            } catch (createError) {
                console.log('‚ùå Erro ao criar plano:', createError.message);
                return;
            }
        }

        // Buscar um plano v√°lido
        const validPlan = await db.get('SELECT id, user_id FROM app.study_plans LIMIT 1');
        if (!validPlan) {
            console.log('‚ùå Nenhum plano v√°lido encontrado');
            return;
        }

        console.log(`üìã Usando plano ID: ${validPlan.id}, User ID: ${validPlan.user_id}`);

        // Criar disciplina de teste
        console.log('\nüìö CRIANDO DISCIPLINA DE TESTE...');
        
        const subjectData = {
            study_plan_id: validPlan.id,
            subject_name: 'Disciplina Debug Test',
            priority_weight: 3
        };

        let subjectId;
        try {
            subjectId = await repos.subject.createSubject(subjectData);
            console.log('‚úÖ Disciplina criada com ID:', subjectId);
        } catch (subjectError) {
            console.log('‚ùå Erro ao criar disciplina:', subjectError.message);
            
            // Tentar buscar uma disciplina existente
            const existingSubject = await db.get('SELECT id FROM app.subjects WHERE study_plan_id = $1 LIMIT 1', [validPlan.id]);
            if (existingSubject) {
                subjectId = existingSubject.id;
                console.log('üìã Usando disciplina existente ID:', subjectId);
            } else {
                console.log('‚ùå N√£o foi poss√≠vel obter disciplina v√°lida');
                return;
            }
        }

        // Criar t√≥pico de teste
        console.log('\nüìù CRIANDO T√ìPICO DE TESTE...');
        
        const topicData = {
            subject_id: subjectId,
            topic_name: 'T√≥pico Debug Test',
            description: 'Descri√ß√£o do t√≥pico de teste',
            priority_weight: 3,
            difficulty: 2,
            estimated_hours: 2,
            status: 'pending'
        };

        try {
            const topicId = await repos.topic.createTopic(topicData);
            console.log('‚úÖ T√≥pico criado com sucesso! ID:', topicId);
            
            // Verificar se foi realmente criado
            const createdTopic = await repos.topic.findById(topicId);
            console.log('üìã T√≥pico verificado:', createdTopic ? createdTopic.topic_name : 'N√£o encontrado');
            
            // Limpar o teste
            await db.run('DELETE FROM app.topics WHERE id = $1', [topicId]);
            console.log('üßπ T√≥pico de teste removido');
            
        } catch (topicError) {
            console.log('‚ùå Erro ao criar t√≥pico:', topicError.message);
            console.log('Stack:', topicError.stack);
            
            // Vamos tentar uma inser√ß√£o direta para ver qual √© o problema
            console.log('\nüîç TENTANDO INSER√á√ÉO DIRETA...');
            
            try {
                const directInsert = `
                    INSERT INTO app.topics (
                        subject_id, topic_name, description, priority_weight,
                        difficulty, estimated_hours, status,
                        created_at, updated_at
                    ) VALUES (
                        $1, $2, $3, $4, $5, $6, $7,
                        CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
                    ) RETURNING id
                `;

                const directResult = await db.get(directInsert, [
                    subjectId,
                    'T√≥pico Direto Test',
                    'Descri√ß√£o direta',
                    3,
                    2,
                    2,
                    'pending'
                ]);
                
                console.log('‚úÖ Inser√ß√£o direta bem-sucedida! ID:', directResult.id);
                
                // Limpar
                await db.run('DELETE FROM app.topics WHERE id = $1', [directResult.id]);
                console.log('üßπ Registro direto removido');
                
            } catch (directError) {
                console.log('‚ùå Erro na inser√ß√£o direta:', directError.message);
            }
        }

        console.log('\n‚úÖ TESTE CONCLU√çDO!');

    } catch (error) {
        console.error('‚ùå ERRO GERAL NO TESTE:', error.message);
        console.error('Stack:', error.stack);
    }
    
    process.exit(0);
}

// Executar teste
testTopicCreation();