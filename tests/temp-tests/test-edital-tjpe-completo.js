const axios = require('axios');

const API_URL = 'http://localhost:3000';

// Estrutura completa do edital TJPE baseada no conte√∫do program√°tico
const EDITAL_TJPE = {
    'L√≠ngua Portuguesa': {
        weight: 4, // Peso alto pois √© fundamental
        topics: [
            { name: 'Interpreta√ß√£o de textos', weight: 5 },
            { name: 'Ortografia e Acentua√ß√£o', weight: 4 },
            { name: 'Pontua√ß√£o', weight: 4 },
            { name: 'Concord√¢ncia nominal e verbal', weight: 4 },
            { name: 'Reg√™ncia nominal e verbal', weight: 4 },
            { name: 'Morfossintaxe e Sintaxe', weight: 4 },
            { name: 'Morfologia - forma√ß√£o de palavras', weight: 3 },
            { name: 'Sem√¢ntica e Vocabul√°rio', weight: 3 },
            { name: 'Coloca√ß√£o Pronominal', weight: 3 },
            { name: 'Vozes verbais', weight: 2 },
            { name: 'Correla√ß√£o de tempos e modos verbais', weight: 2 },
            { name: 'Coordena√ß√£o e Subordina√ß√£o', weight: 2 },
            { name: 'Figuras de linguagem', weight: 2 },
            { name: 'Reda√ß√£o - reescrita de frases', weight: 3 },
            { name: 'Reda√ß√£o oficial', weight: 2 }
        ]
    },
    'Racioc√≠nio L√≥gico': {
        weight: 3,
        topics: [
            { name: 'L√≥gica Proposicional', weight: 5 },
            { name: 'Argumenta√ß√£o L√≥gica', weight: 4 },
            { name: 'An√°lise Combinat√≥ria', weight: 4 },
            { name: 'Probabilidade', weight: 4 },
            { name: 'Racioc√≠nio Sequencial', weight: 3 },
            { name: 'Racioc√≠nio L√≥gico Quantitativo', weight: 3 },
            { name: 'Racioc√≠nio L√≥gico Anal√≠tico', weight: 3 },
            { name: 'Diagramas L√≥gicos', weight: 3 }
        ]
    },
    'Direito Administrativo': {
        weight: 5, // Peso m√°ximo - mat√©ria principal
        topics: [
            { name: 'Princ√≠pios do Direito Administrativo', weight: 5 },
            { name: 'Administra√ß√£o P√∫blica - conceitos e princ√≠pios', weight: 5 },
            { name: 'Atos administrativos', weight: 5 },
            { name: 'Contratos administrativos', weight: 4 },
            { name: 'Licita√ß√£o - modalidades e procedimento', weight: 5 },
            { name: 'Sistema de Registro de Pre√ßos', weight: 3 },
            { name: 'Servi√ßos P√∫blicos', weight: 4 },
            { name: 'Servidores P√∫blicos - regime jur√≠dico', weight: 4 },
            { name: 'Responsabilidade do servidor p√∫blico', weight: 4 },
            { name: 'Bens P√∫blicos', weight: 3 },
            { name: 'Controle da Administra√ß√£o', weight: 4 },
            { name: 'Responsabilidade civil do Estado', weight: 4 },
            { name: 'Desapropria√ß√£o', weight: 3 },
            { name: 'Processo Administrativo', weight: 3 },
            { name: 'Lei de Improbidade Administrativa', weight: 5 },
            { name: 'Nova Lei de Licita√ß√µes (14.133/21)', weight: 5 }
        ]
    },
    'Direito Constitucional': {
        weight: 5, // Peso m√°ximo - mat√©ria principal
        topics: [
            { name: 'Princ√≠pios Fundamentais', weight: 5 },
            { name: 'Direitos e Garantias Fundamentais', weight: 5 },
            { name: 'Organiza√ß√£o do Estado', weight: 4 },
            { name: 'Organiza√ß√£o dos Poderes', weight: 5 },
            { name: 'Fun√ß√µes Essenciais √† Justi√ßa', weight: 4 },
            { name: 'Da Administra√ß√£o P√∫blica', weight: 5 },
            { name: 'Sistema Tribut√°rio Nacional', weight: 2 },
            { name: 'Ordem Econ√¥mica e Financeira', weight: 2 },
            { name: 'Ordem Social', weight: 2 },
            { name: 'Constitui√ß√£o de Pernambuco', weight: 4 },
            { name: 'A√ß√£o Civil P√∫blica', weight: 3 },
            { name: 'Mandado de Seguran√ßa', weight: 4 }
        ]
    },
    'Direito Civil': {
        weight: 4,
        topics: [
            { name: 'Pessoas naturais e jur√≠dicas', weight: 4 },
            { name: 'Domic√≠lio', weight: 2 },
            { name: 'Bens', weight: 3 },
            { name: 'Atos e Neg√≥cios jur√≠dicos', weight: 5 },
            { name: 'Prescri√ß√£o e decad√™ncia', weight: 4 },
            { name: 'Prova', weight: 3 },
            { name: 'Obriga√ß√µes', weight: 4 },
            { name: 'Responsabilidade Civil', weight: 5 }
        ]
    },
    'Direito Processual Civil': {
        weight: 4,
        topics: [
            { name: 'Jurisdi√ß√£o e a√ß√£o', weight: 4 },
            { name: 'Partes e procuradores', weight: 3 },
            { name: 'Compet√™ncia', weight: 5 },
            { name: 'Atos processuais', weight: 4 },
            { name: 'Forma√ß√£o, suspens√£o e extin√ß√£o do processo', weight: 3 },
            { name: 'Procedimento comum', weight: 4 },
            { name: 'Provas', weight: 5 },
            { name: 'Senten√ßa e coisa julgada', weight: 4 },
            { name: 'Recursos', weight: 5 },
            { name: 'Execu√ß√£o', weight: 4 },
            { name: 'Tutela provis√≥ria', weight: 4 },
            { name: 'Procedimentos especiais', weight: 3 }
        ]
    },
    'Direito Penal': {
        weight: 3,
        topics: [
            { name: 'Tipicidade, ilicitude e culpabilidade', weight: 5 },
            { name: 'Excludentes de ilicitude e culpabilidade', weight: 4 },
            { name: 'Erro de tipo e erro de proibi√ß√£o', weight: 3 },
            { name: 'Imputabilidade penal', weight: 3 },
            { name: 'Concurso de pessoas', weight: 3 },
            { name: 'Crimes contra a Administra√ß√£o P√∫blica', weight: 5 },
            { name: 'Crimes contra a f√© p√∫blica', weight: 4 },
            { name: 'Crimes contra o patrim√¥nio', weight: 4 },
            { name: 'Crimes contra a pessoa', weight: 3 }
        ]
    },
    'Direito Processual Penal': {
        weight: 3,
        topics: [
            { name: 'A√ß√£o Penal P√∫blica e Privada', weight: 4 },
            { name: 'Den√∫ncia e Queixa', weight: 4 },
            { name: 'Sujeitos do processo', weight: 3 },
            { name: 'Atos Processuais', weight: 3 },
            { name: 'Pris√£o e Liberdade Provis√≥ria', weight: 5 },
            { name: 'Senten√ßa penal', weight: 4 },
            { name: 'Recursos criminais', weight: 4 },
            { name: 'Habeas Corpus', weight: 4 }
        ]
    },
    'Legisla√ß√£o Espec√≠fica TJPE': {
        weight: 4,
        topics: [
            { name: 'Regimento Interno do TJPE', weight: 5 },
            { name: 'C√≥digo de Organiza√ß√£o Judici√°ria de PE', weight: 5 },
            { name: 'Regime Jur√≠dico dos Servidores de PE', weight: 5 },
            { name: 'Sistema PJe - Processo Eletr√¥nico', weight: 4 },
            { name: 'Lei de Informatiza√ß√£o do Processo', weight: 3 }
        ]
    }
};

async function testCronogramaTJPE() {
    console.log('==================================================');
    console.log('    TESTE COMPLETO - EDITAL TJPE COM IBFC');
    console.log('==================================================\n');
    
    try {
        // 1. Login
        console.log('üìù ETAPA 1: Autentica√ß√£o');
        console.log('------------------------');
        const loginResponse = await axios.post(`${API_URL}/api/auth/login`, {
            email: 'test@example.com',
            password: 'Test123!'
        });
        
        const token = loginResponse.data.token;
        const userId = loginResponse.data.userId;
        const headers = { 'Authorization': `Bearer ${token}` };
        
        console.log('‚úÖ Login realizado com sucesso');
        console.log(`   User ID: ${userId}\n`);
        
        // 2. Criar plano de estudo para o TJPE
        console.log('üìö ETAPA 2: Cria√ß√£o do Plano de Estudos');
        console.log('----------------------------------------');
        console.log('Concurso: TJPE - Analista Judici√°rio');
        console.log('Banca: IBFC');
        console.log('Prazo: 60 dias (simulando data de prova)');
        
        const examDate = new Date();
        examDate.setDate(examDate.getDate() + 60); // 60 dias para a prova
        
        const planResponse = await axios.post(`${API_URL}/api/plans`, {
            exam_name: 'TJPE - Analista Judici√°rio',
            exam_date: examDate.toISOString(),
            study_hours_per_day: {
                '0': 4, // Domingo - mais tempo
                '1': 3, // Segunda
                '2': 3, // Ter√ßa
                '3': 3, // Quarta
                '4': 3, // Quinta
                '5': 3, // Sexta
                '6': 5  // S√°bado - mais tempo
            },
            session_duration_minutes: 50 // Sess√µes de 50 minutos com 10 min de intervalo
        }, { headers });
        
        const planId = planResponse.data.id;
        console.log(`‚úÖ Plano criado - ID: ${planId}\n`);
        
        // 3. Adicionar todas as disciplinas com seus pesos
        console.log('üìñ ETAPA 3: Adicionando Disciplinas do Edital');
        console.log('----------------------------------------------');
        
        const subjectMap = {};
        let totalTopics = 0;
        
        for (const [subjectName, subjectData] of Object.entries(EDITAL_TJPE)) {
            const subjectResponse = await axios.post(`${API_URL}/api/plans/${planId}/subjects`, {
                subject_name: subjectName,
                priority_weight: subjectData.weight
            }, { headers });
            
            subjectMap[subjectName] = subjectResponse.data.id;
            console.log(`‚úÖ ${subjectName.padEnd(30)} - Peso: ${subjectData.weight} - ID: ${subjectResponse.data.id}`);
        }
        
        console.log('\n');
        
        // 4. Adicionar todos os t√≥picos com seus pesos
        console.log('üìù ETAPA 4: Adicionando T√≥picos/Assuntos');
        console.log('-----------------------------------------');
        
        for (const [subjectName, subjectData] of Object.entries(EDITAL_TJPE)) {
            const subjectId = subjectMap[subjectName];
            console.log(`\n${subjectName}:`);
            
            for (const topic of subjectData.topics) {
                await axios.post(`${API_URL}/api/subjects/${subjectId}/topics`, {
                    topic_name: topic.name,
                    priority_weight: topic.weight // Por enquanto n√£o usamos, mas j√° enviamos
                }, { headers });
                
                totalTopics++;
                const priorityIndicator = '‚òÖ'.repeat(topic.weight);
                console.log(`  ‚úÖ ${topic.name.padEnd(45)} ${priorityIndicator}`);
            }
        }
        
        console.log(`\nüìä Total de t√≥picos cadastrados: ${totalTopics}\n`);
        
        // 5. Gerar cronograma
        console.log('üóìÔ∏è ETAPA 5: Gerando Cronograma Otimizado');
        console.log('------------------------------------------');
        console.log('Aplicando algoritmo de Pr√°tica Dirigida Ponderada...');
        
        const generateResponse = await axios.post(`${API_URL}/api/plans/${planId}/generate`, {}, { headers });
        
        console.log(`‚úÖ ${generateResponse.data.message}\n`);
        
        // 6. Analisar as sess√µes geradas
        console.log('üìä ETAPA 6: An√°lise do Cronograma Gerado');
        console.log('-----------------------------------------');
        
        const sessionsResponse = await axios.get(`${API_URL}/api/plans/${planId}/sessions`, { headers });
        const sessions = sessionsResponse.data;
        
        // Estat√≠sticas gerais
        const stats = {
            total: sessions.length,
            byType: {},
            bySubject: {},
            practiceBySubject: {},
            topicsBySubject: {}
        };
        
        sessions.forEach(session => {
            // Contar por tipo
            stats.byType[session.session_type] = (stats.byType[session.session_type] || 0) + 1;
            
            // Contar por mat√©ria
            if (session.session_type === 'Novo T√≥pico') {
                stats.topicsBySubject[session.subject_name] = (stats.topicsBySubject[session.subject_name] || 0) + 1;
            } else if (session.session_type === 'Pr√°tica Dirigida') {
                const subjectName = session.subject_name.replace('Pr√°tica: ', '');
                stats.practiceBySubject[subjectName] = (stats.practiceBySubject[subjectName] || 0) + 1;
            }
        });
        
        console.log('üìà RESUMO GERAL:');
        console.log('----------------');
        console.log(`Total de sess√µes de estudo: ${stats.total}`);
        console.log(`Dias de estudo: ${Math.ceil(stats.total / 3)} (aproximadamente)`);
        console.log('\nDistribui√ß√£o por tipo:');
        Object.entries(stats.byType).forEach(([type, count]) => {
            const percentage = ((count / stats.total) * 100).toFixed(1);
            console.log(`  ‚Ä¢ ${type.padEnd(25)}: ${String(count).padStart(3)} sess√µes (${percentage}%)`);
        });
        
        console.log('\nüìö COBERTURA DE T√ìPICOS POR DISCIPLINA:');
        console.log('------------------------------------------');
        
        for (const [subjectName, subjectData] of Object.entries(EDITAL_TJPE)) {
            const topicCount = stats.topicsBySubject[subjectName] || 0;
            const totalSubjectTopics = subjectData.topics.length;
            const coverage = ((topicCount / totalSubjectTopics) * 100).toFixed(0);
            
            console.log(`${subjectName.padEnd(30)} ${String(topicCount).padStart(2)}/${totalSubjectTopics} t√≥picos (${coverage}% cobertura)`);
        }
        
        console.log('\nüéØ DISTRIBUI√á√ÉO DE PR√ÅTICAS DIRIGIDAS:');
        console.log('---------------------------------------');
        console.log('(Deve refletir os pesos das disciplinas)\n');
        
        // Calcular propor√ß√µes esperadas
        const totalWeight = Object.values(EDITAL_TJPE).reduce((sum, s) => sum + s.weight, 0);
        const totalPractices = Object.values(stats.practiceBySubject).reduce((sum, count) => sum + count, 0);
        
        console.log('Disciplina                     Peso  Pr√°ticas  Real%  Esperado%  Status');
        console.log('------------------------------------------------------------------------');
        
        for (const [subjectName, subjectData] of Object.entries(EDITAL_TJPE)) {
            const practiceCount = stats.practiceBySubject[subjectName] || 0;
            const realPercentage = totalPractices > 0 ? ((practiceCount / totalPractices) * 100).toFixed(1) : '0.0';
            const expectedPercentage = ((subjectData.weight / totalWeight) * 100).toFixed(1);
            const difference = Math.abs(parseFloat(realPercentage) - parseFloat(expectedPercentage));
            
            let status = '‚úÖ';
            if (difference > 5) status = '‚ö†Ô∏è';
            if (difference > 10) status = '‚ùå';
            
            const bar = '‚ñà'.repeat(Math.round(practiceCount / 2));
            
            console.log(
                `${subjectName.padEnd(30)} ${String(subjectData.weight).padStart(4)}  ` +
                `${String(practiceCount).padStart(8)}  ${realPercentage.padStart(5)}%  ` +
                `${expectedPercentage.padStart(8)}%  ${status}`
            );
            console.log(`${''.padEnd(30)} ${bar}`);
        }
        
        console.log('\nüìÖ AMOSTRA DO CRONOGRAMA (Primeiras 20 sess√µes):');
        console.log('--------------------------------------------------');
        
        sessions.slice(0, 20).forEach((session, index) => {
            const date = new Date(session.session_date);
            const dateStr = date.toLocaleDateString('pt-BR', { 
                day: '2-digit', 
                month: '2-digit',
                weekday: 'short'
            });
            
            let description = '';
            if (session.session_type === 'Novo T√≥pico') {
                description = `${session.subject_name}: ${session.topic_description}`;
            } else if (session.session_type === 'Pr√°tica Dirigida') {
                description = session.subject_name;
            } else {
                description = session.subject_name;
            }
            
            console.log(`${String(index + 1).padStart(3)}. ${dateStr} - ${session.session_type.padEnd(20)} | ${description}`);
        });
        
        console.log('\n');
        console.log('==================================================');
        console.log('           TESTE CONCLU√çDO COM SUCESSO!');
        console.log('==================================================');
        console.log('\nüí° OBSERVA√á√ïES IMPORTANTES:');
        console.log('----------------------------');
        console.log('1. O cronograma distribui os t√≥picos usando Weighted Round-Robin');
        console.log('2. Ap√≥s cobrir todos os t√≥picos, preenche com Pr√°ticas Dirigidas');
        console.log('3. As Pr√°ticas seguem a propor√ß√£o dos pesos das disciplinas');
        console.log('4. Direito Admin e Constitucional (peso 5) devem ter mais pr√°ticas');
        console.log('5. Racioc√≠nio L√≥gico e Dir. Penal (peso 3) devem ter menos pr√°ticas');
        
    } catch (error) {
        console.error('‚ùå ERRO NO TESTE:', error.response?.data || error.message);
        if (error.response?.data?.details) {
            console.error('Detalhes:', error.response.data.details);
        }
        process.exit(1);
    }
}

// Executar teste
testCronogramaTJPE().catch(console.error);