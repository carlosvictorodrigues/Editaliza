// üß™ TEST SCRIPT - SESSIONS MIGRATION PHASE 5
// Execute: node test-sessions-migration.js

const http = require('http');

// Configura√ß√£o
const BASE_URL = 'http://localhost:3000';
const TEST_USER = {
    email: 'p@p.com',
    password: '123456'
};

let authToken = null;
let csrfToken = null;
let planId = null;
let sessionId = null;

// üõ†Ô∏è Utilit√°rios
const makeRequest = (path, method = 'GET', data = null) => {
    return new Promise((resolve, reject) => {
        const url = new URL(path, BASE_URL);
        const options = {
            hostname: url.hostname,
            port: url.port,
            path: url.pathname + url.search,
            method,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        if (authToken) {
            options.headers['Cookie'] = `connect.sid=${authToken}`;
        }
        if (csrfToken && method !== 'GET') {
            options.headers['X-CSRF-Token'] = csrfToken;
        }

        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', chunk => body += chunk);
            res.on('end', () => {
                if (res.headers['set-cookie']) {
                    const cookies = res.headers['set-cookie'];
                    const sessionCookie = cookies.find(c => c.startsWith('connect.sid='));
                    if (sessionCookie) {
                        authToken = sessionCookie.split('=')[1].split(';')[0];
                    }
                }
                
                try {
                    const response = body ? JSON.parse(body) : {};
                    resolve({ status: res.statusCode, data: response });
                } catch (e) {
                    resolve({ status: res.statusCode, data: body });
                }
            });
        });

        req.on('error', reject);
        if (data) req.write(JSON.stringify(data));
        req.end();
    });
};

// üß™ TESTES
const tests = {
    // 1. Autentica√ß√£o
    async authenticate() {
        console.log('\nüîê 1. AUTENTICA√á√ÉO');
        
        // Obter CSRF token
        const csrfRes = await makeRequest('/api/auth/csrf-token');
        csrfToken = csrfRes.data.csrfToken;
        console.log('   ‚úÖ CSRF Token obtido');

        // Login
        const loginRes = await makeRequest('/api/auth/login', 'POST', TEST_USER);
        if (loginRes.status === 200) {
            console.log('   ‚úÖ Login bem-sucedido');
            
            // Obter plano ativo
            const profileRes = await makeRequest('/api/users/profile');
            if (profileRes.data.user?.active_plan_id) {
                planId = profileRes.data.user.active_plan_id;
                console.log(`   ‚úÖ Plano ativo encontrado: ${planId}`);
            }
            return true;
        }
        console.log('   ‚ùå Falha no login:', loginRes.data);
        return false;
    },

    // 2. Listar sess√µes por data
    async getSessionsByDate() {
        console.log('\nüìÖ 2. LISTAR SESS√ïES POR DATA');
        
        if (!planId) {
            console.log('   ‚ö†Ô∏è Sem plano ativo para testar');
            return false;
        }

        const res = await makeRequest(`/api/sessions/by-date/${planId}`);
        if (res.status === 200) {
            const dates = Object.keys(res.data.scheduleByDate || {});
            console.log(`   ‚úÖ Sess√µes obtidas para ${dates.length} datas`);
            
            // Pegar primeira sess√£o para testes
            if (dates.length > 0) {
                const firstDate = dates[0];
                const sessions = res.data.scheduleByDate[firstDate];
                if (sessions && sessions.length > 0) {
                    sessionId = sessions[0].id;
                    console.log(`   ‚úÖ ID da primeira sess√£o: ${sessionId}`);
                }
            }
            return true;
        }
        console.log('   ‚ùå Erro:', res.data);
        return false;
    },

    // 3. Verificar sess√µes atrasadas
    async checkOverdueSessions() {
        console.log('\n‚è∞ 3. VERIFICAR SESS√ïES ATRASADAS');
        
        if (!planId) {
            console.log('   ‚ö†Ô∏è Sem plano ativo para testar');
            return false;
        }

        const res = await makeRequest(`/api/sessions/overdue-check/${planId}`);
        if (res.status === 200) {
            console.log("‚úÖ Verifica√ß√£o conclu√≠da");
            console.log(`      - Tem atrasadas: ${res.data.hasOverdue}`);
            console.log(`      - Total atrasadas: ${res.data.overdueCount}`);
            if (res.data.overdueCount > 0) {
                console.log(`      - Primeira atrasada: ${res.data.firstOverdueDate}`);
            }
            return true;
        }
        console.log('   ‚ùå Erro:', res.data);
        return false;
    },

    // 4. Atualizar sess√£o individual
    async updateSession() {
        console.log('\n‚úèÔ∏è 4. ATUALIZAR SESS√ÉO INDIVIDUAL');
        
        if (!sessionId) {
            console.log('   ‚ö†Ô∏è Sem sess√£o para testar');
            return false;
        }

        const updateData = {
            status: 'in_progress',
            notes: 'Teste de migra√ß√£o - Fase 5'
        };

        const res = await makeRequest(`/api/sessions/${sessionId}`, 'PATCH', updateData);
        if (res.status === 200) {
            console.log('   ‚úÖ Sess√£o atualizada com sucesso');
            return true;
        }
        console.log('   ‚ùå Erro:', res.data);
        return false;
    },

    // 5. Adicionar tempo de estudo
    async addStudyTime() {
        console.log('\n‚è±Ô∏è 5. ADICIONAR TEMPO DE ESTUDO');
        
        if (!sessionId) {
            console.log('   ‚ö†Ô∏è Sem sess√£o para testar');
            return false;
        }

        const timeData = {
            seconds: 300 // 5 minutos
        };

        const res = await makeRequest(`/api/sessions/${sessionId}/time`, 'POST', timeData);
        if (res.status === 200) {
            console.log('   ‚úÖ Tempo adicionado:', res.data.totalSeconds, 'segundos');
            return true;
        }
        console.log('   ‚ùå Erro:', res.data);
        return false;
    },

    // 6. Atualiza√ß√£o em lote
    async batchUpdateStatus() {
        console.log('\nüì¶ 6. ATUALIZA√á√ÉO EM LOTE DE STATUS');
        
        if (!planId) {
            console.log('   ‚ö†Ô∏è Sem plano ativo para testar');
            return false;
        }

        // Primeiro, obter algumas sess√µes
        const sessionsRes = await makeRequest(`/api/sessions/by-date/${planId}`);
        if (sessionsRes.status !== 200) {
            console.log('   ‚ö†Ô∏è N√£o foi poss√≠vel obter sess√µes');
            return false;
        }

        const allSessions = [];
        Object.values(sessionsRes.data.scheduleByDate || {}).forEach(dateSessions => {
            allSessions.push(...dateSessions);
        });

        if (allSessions.length < 2) {
            console.log('   ‚ö†Ô∏è Poucas sess√µes para teste em lote');
            return false;
        }

        // Pegar 2 sess√µes para teste
        const testSessions = allSessions.slice(0, 2);
        const updateData = {
            updates: testSessions.map(s => ({
                sessionId: s.id,
                status: 'pending',
                seconds: 0
            }))
        };

        const res = await makeRequest('/api/sessions/batch-update-status', 'PATCH', updateData);
        if (res.status === 200) {
            console.log(`   ‚úÖ ${res.data.updated} sess√µes atualizadas em lote`);
            return true;
        }
        console.log('   ‚ùå Erro:', res.data);
        return false;
    },

    // 7. Estat√≠sticas de sess√µes
    async getSessionStatistics() {
        console.log('\nüìä 7. ESTAT√çSTICAS DE SESS√ïES');
        
        if (!planId) {
            console.log('   ‚ö†Ô∏è Sem plano ativo para testar');
            return false;
        }

        const res = await makeRequest(`/api/sessions/statistics/${planId}`);
        if (res.status === 200) {
            console.log('   ‚úÖ Estat√≠sticas obtidas:');
            console.log(`      - Total: ${res.data.total}`);
            console.log(`      - Completadas: ${res.data.completed}`);
            console.log(`      - Em progresso: ${res.data.inProgress}`);
            console.log(`      - Pendentes: ${res.data.pending}`);
            console.log(`      - Tempo total: ${res.data.totalSeconds}s`);
            return true;
        }
        console.log('   ‚ùå Erro:', res.data);
        return false;
    },

    // 8. Progresso de quest√µes
    async getQuestionProgress() {
        console.log('\n‚ùì 8. PROGRESSO DE QUEST√ïES');
        
        if (!planId) {
            console.log('   ‚ö†Ô∏è Sem plano ativo para testar');
            return false;
        }

        const res = await makeRequest(`/api/sessions/question-progress/${planId}`);
        if (res.status === 200) {
            console.log('   ‚úÖ Progresso obtido:');
            console.log(`      - Quest√µes resolvidas: ${res.data.totalQuestions}`);
            console.log(`      - Quest√µes corretas: ${res.data.correctQuestions}`);
            console.log(`      - Taxa de acerto: ${res.data.successRate}%`);
            return true;
        }
        console.log('   ‚ùå Erro:', res.data);
        return false;
    }
};

// üöÄ EXECUTAR TESTES
async function runTests() {
    console.log('üß™ TESTE DE MIGRA√á√ÉO - FASE 5: SESS√ïES DE ESTUDO');
    console.log('================================================');
    console.log('üìÖ Data/Hora: ' + new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }));
    console.log('üåç Timezone: America/Sao_Paulo (CR√çTICO!)');
    
    const results = [];
    let passed = 0;
    let failed = 0;

    // Executar testes em sequ√™ncia
    for (const [name, test] of Object.entries(tests)) {
        try {
            const result = await test();
            results.push({ name, success: result });
            if (result) passed++;
            else failed++;
        } catch (error) {
            console.log(`   ‚ùå Erro n√£o tratado: ${error.message}`);
            results.push({ name, success: false });
            failed++;
        }
    }

    // Resumo
    console.log('\n' + '='.repeat(50));
    console.log('üìä RESUMO DOS TESTES');
    console.log('='.repeat(50));
    console.log(`‚úÖ Passou: ${passed}`);
    console.log(`‚ùå Falhou: ${failed}`);
    console.log(`üìà Taxa de sucesso: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);

    // Detalhes
    console.log('\nüìã DETALHES:');
    results.forEach(r => {
        console.log(`   ${r.success ? '‚úÖ' : '‚ùå'} ${r.name}`);
    });

    // Notas importantes
    console.log('\n‚ö†Ô∏è NOTAS IMPORTANTES:');
    console.log('1. Timezone brasileiro (America/Sao_Paulo) √© CR√çTICO');
    console.log('2. C√°lculos de streak devem considerar fuso hor√°rio');
    console.log('3. Opera√ß√µes em lote devem ser at√¥micas');
    console.log('4. Valida√ß√£o de ownership em todas as opera√ß√µes');
    console.log('5. Tempo de estudo √© aditivo (soma com existente)');

    if (failed === 0) {
        console.log('\nüéâ FASE 5 - MIGRA√á√ÉO DE SESS√ïES: SUCESSO TOTAL!');
    } else {
        console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM - REVISAR IMPLEMENTA√á√ÉO');
    }
}

// Executar
runTests().catch(console.error);