const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testUIUserFeatures() {
    console.log('üß™ Testando funcionalidades completas com ui@ui.com...\n');
    
    try {
        // 1. Login
        console.log('1Ô∏è‚É£ Fazendo login com ui@ui.com...');
        const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
            email: 'ui@ui.com',
            password: '123456'
        }, {
            validateStatus: () => true
        });
        
        if (loginResponse.status !== 200) {
            console.log('   ‚ùå Falha no login:', loginResponse.data);
            return;
        }
        
        console.log('   ‚úÖ Login bem-sucedido!');
        const token = loginResponse.data.token;
        const userId = loginResponse.data.user?.id;
        console.log('   User ID:', userId);
        
        const authHeaders = { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
        
        // 2. Verificar planos existentes
        console.log('\n2Ô∏è‚É£ Verificando planos do usu√°rio...');
        const plansResponse = await axios.get(`${BASE_URL}/api/plans`, {
            headers: authHeaders,
            validateStatus: () => true
        });
        
        if (plansResponse.status === 200) {
            console.log('   ‚úÖ Planos encontrados:', plansResponse.data.length);
            if (plansResponse.data.length > 0) {
                console.log('   Primeiro plano:', plansResponse.data[0].title);
            }
        } else {
            console.log('   ‚ö†Ô∏è Erro ao buscar planos:', plansResponse.status);
        }
        
        // 3. Criar novo plano
        console.log('\n3Ô∏è‚É£ Criando novo plano de estudos...');
        const newPlanResponse = await axios.post(`${BASE_URL}/api/plans`, {
            title: 'Plano de Teste Automatizado',
            description: 'Plano criado via teste automatizado',
            exam_date: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(), // 90 dias
            daily_hours: 4,
            total_weight: 100
        }, {
            headers: authHeaders,
            validateStatus: () => true
        });
        
        if (newPlanResponse.status === 201 || newPlanResponse.status === 200) {
            console.log('   ‚úÖ Plano criado com sucesso!');
            const planId = newPlanResponse.data.id;
            console.log('   Plan ID:', planId);
            
            // 4. Adicionar disciplinas ao plano
            console.log('\n4Ô∏è‚É£ Adicionando disciplinas ao plano...');
            const subjects = [
                { name: 'Matem√°tica', weight: 30, difficulty: 3 },
                { name: 'Portugu√™s', weight: 30, difficulty: 2 },
                { name: 'Hist√≥ria', weight: 20, difficulty: 2 },
                { name: 'Geografia', weight: 20, difficulty: 1 }
            ];
            
            for (const subject of subjects) {
                const subjectResponse = await axios.post(`${BASE_URL}/api/plans/${planId}/subjects`, subject, {
                    headers: authHeaders,
                    validateStatus: () => true
                });
                
                if (subjectResponse.status === 201 || subjectResponse.status === 200) {
                    console.log(`   ‚úÖ ${subject.name} adicionada`);
                } else {
                    console.log(`   ‚ùå Erro ao adicionar ${subject.name}:`, subjectResponse.status);
                }
            }
        } else {
            console.log('   ‚ùå Erro ao criar plano:', newPlanResponse.data);
        }
        
        // 5. Verificar sess√µes de estudo
        console.log('\n5Ô∏è‚É£ Verificando sess√µes de estudo...');
        const sessionsResponse = await axios.get(`${BASE_URL}/api/study-sessions`, {
            headers: authHeaders,
            validateStatus: () => true
        });
        
        if (sessionsResponse.status === 200) {
            console.log('   ‚úÖ Sess√µes encontradas:', sessionsResponse.data.length || 0);
            if (sessionsResponse.data.length > 0) {
                console.log('   Primeira sess√£o:', sessionsResponse.data[0].subject_name);
            }
        } else {
            console.log('   ‚ö†Ô∏è Endpoint de sess√µes:', sessionsResponse.status);
        }
        
        // 6. Marcar sess√£o como conclu√≠da
        console.log('\n6Ô∏è‚É£ Marcando sess√£o como conclu√≠da...');
        if (sessionsResponse.data && sessionsResponse.data.length > 0) {
            const sessionId = sessionsResponse.data[0].id;
            const completeResponse = await axios.put(`${BASE_URL}/api/study-sessions/${sessionId}/complete`, {
                completed: true
            }, {
                headers: authHeaders,
                validateStatus: () => true
            });
            
            if (completeResponse.status === 200) {
                console.log('   ‚úÖ Sess√£o marcada como conclu√≠da!');
            } else {
                console.log('   ‚ö†Ô∏è Status:', completeResponse.status);
            }
        }
        
        // 7. Verificar gamifica√ß√£o
        console.log('\n7Ô∏è‚É£ Verificando sistema de gamifica√ß√£o...');
        const gamificationResponse = await axios.get(`${BASE_URL}/api/gamification/stats`, {
            headers: authHeaders,
            validateStatus: () => true
        });
        
        if (gamificationResponse.status === 200) {
            console.log('   ‚úÖ Gamifica√ß√£o ativa!');
            console.log('   - Pontos:', gamificationResponse.data.points || 0);
            console.log('   - N√≠vel:', gamificationResponse.data.level || 1);
            console.log('   - Streak:', gamificationResponse.data.streak || 0);
        } else {
            console.log('   ‚ö†Ô∏è Status gamifica√ß√£o:', gamificationResponse.status);
        }
        
        // 8. Verificar estat√≠sticas
        console.log('\n8Ô∏è‚É£ Verificando estat√≠sticas...');
        const statsResponse = await axios.get(`${BASE_URL}/api/statistics`, {
            headers: authHeaders,
            validateStatus: () => true
        });
        
        if (statsResponse.status === 200) {
            console.log('   ‚úÖ Estat√≠sticas dispon√≠veis!');
            console.log('   - Horas estudadas:', statsResponse.data.total_hours || 0);
            console.log('   - Sess√µes conclu√≠das:', statsResponse.data.completed_sessions || 0);
        } else {
            console.log('   ‚ö†Ô∏è Status estat√≠sticas:', statsResponse.status);
        }
        
        // 9. Verificar notifica√ß√µes
        console.log('\n9Ô∏è‚É£ Verificando notifica√ß√µes inteligentes...');
        const notificationsResponse = await axios.get(`${BASE_URL}/api/notifications`, {
            headers: authHeaders,
            validateStatus: () => true
        });
        
        if (notificationsResponse.status === 200) {
            console.log('   ‚úÖ Sistema de notifica√ß√µes ativo!');
            console.log('   - Total notifica√ß√µes:', notificationsResponse.data.length || 0);
            if (notificationsResponse.data.length > 0) {
                console.log('   - √öltima:', notificationsResponse.data[0].message);
            }
        } else {
            console.log('   ‚ö†Ô∏è Status notifica√ß√µes:', notificationsResponse.status);
        }
        
        console.log('\n' + '='.repeat(60));
        console.log('üìä RESUMO DOS TESTES:');
        console.log('‚úÖ Login funcionando');
        console.log(`${plansResponse.status === 200 ? '‚úÖ' : '‚ö†Ô∏è'} Planos`);
        console.log(`${newPlanResponse.status === 201 || newPlanResponse.status === 200 ? '‚úÖ' : '‚ö†Ô∏è'} Criar plano`);
        console.log(`${sessionsResponse.status === 200 ? '‚úÖ' : '‚ö†Ô∏è'} Sess√µes de estudo`);
        console.log(`${gamificationResponse.status === 200 ? '‚úÖ' : '‚ö†Ô∏è'} Gamifica√ß√£o`);
        console.log(`${statsResponse.status === 200 ? '‚úÖ' : '‚ö†Ô∏è'} Estat√≠sticas`);
        console.log(`${notificationsResponse.status === 200 ? '‚úÖ' : '‚ö†Ô∏è'} Notifica√ß√µes`);
        
    } catch (error) {
        console.error('‚ùå Erro durante teste:', error.message);
        if (error.response) {
            console.error('   Status:', error.response.status);
            console.error('   Data:', error.response.data);
        }
    }
    
    console.log('\n‚úÖ Teste conclu√≠do!');
}

// Execute test
testUIUserFeatures();