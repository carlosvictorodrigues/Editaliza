/**
 * Teste de debug para verificar o problema no PATCH /api/sessions/:sessionId
 * 
 * PROBLEMA: 
 * - M√©todo do controller √© chamado mas trava ao executar query no banco
 * 
 * DIAGN√ìSTICO APLICADO:
 * - Adicionado logs detalhados em cada ponto do fluxo
 * - Adicionado timeout nas queries do banco para evitar travamento infinito
 * - Melhorado error handling
 */

const axios = require('axios');

// Configura√ß√£o
const BASE_URL = 'http://localhost:3000';

// Token de teste v√°lido - voc√™ pode precisar gerar um novo
const TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ODAsImVtYWlsIjoidGVzdGUuY29tcGxldG8uMTc1NjMxMjI4MjY3M0BlZGl0YWxpemEuY29tIiwibmFtZSI6IlVzdcOhcmlvIFRlc3RlIDE3NTYzMTIyODI2NzMiLCJpYXQiOjE3NTYzMTIyODIsImV4cCI6MTc1NjM5ODY4MiwiaXNzIjoiZWRpdGFsaXphIn0.2HsLQNRAQUj4kebQ8st0wayFQIZpm2e71t-_8oikjHY';

// ID da sess√£o para testar (ajuste conforme necess√°rio)
const SESSION_ID = 3147;

async function testSessionUpdate() {
    console.log('üîç DEBUG: Testando atualiza√ß√£o de sess√£o\n');
    console.log('==================================================');
    console.log('CONFIGURA√á√ÉO DO TESTE:');
    console.log('- URL Base:', BASE_URL);
    console.log('- Session ID:', SESSION_ID);
    console.log('- Token (primeiros 20 chars):', TEST_TOKEN.substring(0, 20) + '...');
    console.log('==================================================\n');
    
    try {
        const axiosInstance = axios.create({
            baseURL: BASE_URL,
            timeout: 10000, // 10 segundos
            headers: {
                'Authorization': `Bearer ${TEST_TOKEN}`,
                'Content-Type': 'application/json'
            }
        });

        console.log(`üì§ Enviando: PATCH /api/sessions/${SESSION_ID}`);
        console.log('üì¶ Body:', JSON.stringify({ status: 'Conclu√≠do' }));
        console.log('\n‚è≥ Aguardando resposta...\n');
        
        const startTime = Date.now();
        
        const response = await axiosInstance.patch(`/api/sessions/${SESSION_ID}`, {
            status: 'Conclu√≠do'
        });
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        console.log('‚úÖ SUCESSO! Resposta recebida');
        console.log('==================================================');
        console.log('‚è±Ô∏è  Tempo de resposta:', duration, 'ms');
        console.log('üìä Status HTTP:', response.status);
        console.log('üì• Dados recebidos:', JSON.stringify(response.data, null, 2));
        console.log('==================================================\n');
        
        // An√°lise do tempo de resposta
        if (duration < 100) {
            console.log('‚ö° EXCELENTE: Resposta muito r√°pida!');
        } else if (duration < 500) {
            console.log('‚úÖ BOM: Tempo de resposta aceit√°vel');
        } else if (duration < 2000) {
            console.log('‚ö†Ô∏è  ATEN√á√ÉO: Resposta um pouco lenta');
        } else {
            console.log('üêå PROBLEMA: Resposta muito lenta (poss√≠vel problema de performance)');
        }
        
    } catch (error) {
        console.error('‚ùå ERRO NO TESTE');
        console.error('==================================================');
        
        if (error.code === 'ECONNABORTED') {
            console.error('‚è±Ô∏è  TIMEOUT! A requisi√ß√£o travou ap√≥s 10 segundos');
            console.error('\nüîç DIAGN√ìSTICO:');
            console.error('- O problema persiste mesmo com os logs adicionados');
            console.error('- Prov√°vel problema no banco de dados ou conex√£o');
            console.error('\nüìã PR√ìXIMOS PASSOS:');
            console.error('1. Verificar logs do servidor para ver onde parou');
            console.error('2. Verificar se o banco de dados est√° respondendo');
            console.error('3. Testar a query diretamente no banco');
            
        } else if (error.response) {
            console.error('üìä Status HTTP:', error.response.status);
            console.error('üì• Resposta do servidor:', error.response.data);
            
            if (error.response.status === 401) {
                console.error('\nüîê Token expirado ou inv√°lido');
                console.error('‚û°Ô∏è  Gere um novo token de teste');
            } else if (error.response.status === 404) {
                console.error('\nüîç Sess√£o n√£o encontrada');
                console.error('‚û°Ô∏è  Verifique se a sess√£o', SESSION_ID, 'existe no banco');
            } else if (error.response.status === 500) {
                console.error('\nüí• Erro interno do servidor');
                console.error('‚û°Ô∏è  Verifique os logs do servidor para mais detalhes');
                if (error.response.data.details) {
                    console.error('‚û°Ô∏è  Detalhes:', error.response.data.details);
                }
            }
            
        } else {
            console.error('üîå Erro de conex√£o:', error.message);
            console.error('\nüìã VERIFICAR:');
            console.error('- O servidor est√° rodando?');
            console.error('- A porta 3000 est√° correta?');
            console.error('- H√° algum firewall bloqueando?');
        }
        
        console.error('==================================================');
    }
}

// Executar o teste
console.log('==================================================');
console.log('    TESTE DE DEBUG - UPDATE SESSION STATUS');
console.log('==================================================\n');

testSessionUpdate().then(() => {
    console.log('\nüèÅ Teste finalizado');
    process.exit(0);
}).catch(err => {
    console.error('\nüí• Erro fatal:', err);
    process.exit(1);
});