/**
 * Script de Teste Completo da Plataforma Editaliza
 * 
 * Este script testa todo o fluxo da aplica√ß√£o:
 * 1. Cria√ß√£o de conta
 * 2. Login
 * 3. Cria√ß√£o de plano
 * 4. Adi√ß√£o de disciplinas e t√≥picos com pesos
 * 5. Gera√ß√£o de cronograma com algoritmo round-robin ponderado
 * 6. Marca√ß√£o de sess√µes como conclu√≠das
 * 7. Verifica√ß√£o de estat√≠sticas e gamifica√ß√£o
 */

const axios = require('axios');
const API_URL = 'http://localhost:3000/api';

// Dados de teste
const testUser = {
    name: 'Teste Completo',
    email: `teste${Date.now()}@test.com`,
    password: 'Test@123456'
};

let authToken = '';
let userId = '';
let planId = '';
let sessions = [];

// Fun√ß√£o auxiliar para fazer requisi√ß√µes
async function makeRequest(method, endpoint, data = null, useAuth = true) {
    const config = {
        method,
        url: `${API_URL}${endpoint}`,
        headers: {}
    };
    
    if (useAuth && authToken) {
        config.headers['Authorization'] = `Bearer ${authToken}`;
    }
    
    if (data) {
        config.data = data;
    }
    
    try {
        const response = await axios(config);
        return { success: true, data: response.data };
    } catch (error) {
        console.error(`‚ùå Erro em ${method} ${endpoint}:`, error.response?.data || error.message);
        return { success: false, error: error.response?.data || error.message };
    }
}

async function testPlatform() {
    console.log('üöÄ Iniciando teste completo da plataforma...\n');
    
    // 1. CRIAR CONTA
    console.log('üìù 1. Testando cria√ß√£o de conta...');
    const registerResult = await makeRequest('POST', '/auth/register', testUser, false);
    
    if (!registerResult.success) {
        console.log('‚ùå Falha ao criar conta');
        return;
    }
    
    console.log('‚úÖ Conta criada com sucesso');
    authToken = registerResult.data.token;
    userId = registerResult.data.user.id;
    console.log(`   User ID: ${userId}`);
    
    // 2. LOGIN (testar se funciona)
    console.log('\nüîë 2. Testando login...');
    const loginResult = await makeRequest('POST', '/auth/login', {
        email: testUser.email,
        password: testUser.password
    }, false);
    
    if (!loginResult.success) {
        console.log('‚ùå Falha ao fazer login');
        return;
    }
    
    console.log('‚úÖ Login realizado com sucesso');
    authToken = loginResult.data.token;
    
    // 3. CRIAR PLANO DE ESTUDOS
    console.log('\nüìö 3. Criando plano de estudos...');
    const examDate = new Date();
    examDate.setMonth(examDate.getMonth() + 3);
    
    const planResult = await makeRequest('POST', '/plans', {
        plan_name: 'Concurso Teste TRF',
        exam_date: examDate.toISOString().split('T')[0]
    });
    
    if (!planResult.success) {
        console.log('‚ùå Falha ao criar plano');
        return;
    }
    
    console.log('‚úÖ Plano criado com sucesso');
    planId = planResult.data.plan.id;
    console.log(`   Plan ID: ${planId}`);
    
    // 4. ADICIONAR DISCIPLINAS E T√ìPICOS COM PESOS DIFERENTES
    console.log('\nüìñ 4. Adicionando disciplinas e t√≥picos com pesos...');
    
    const disciplinas = [
        { 
            nome: 'Direito Constitucional', 
            peso: 10,
            topicos: [
                { nome: 'Princ√≠pios Fundamentais', peso: 9 },
                { nome: 'Direitos e Garantias', peso: 8 },
                { nome: 'Organiza√ß√£o do Estado', peso: 7 }
            ]
        },
        {
            nome: 'Portugu√™s',
            peso: 8,
            topicos: [
                { nome: 'Interpreta√ß√£o de Texto', peso: 10 },
                { nome: 'Gram√°tica', peso: 6 },
                { nome: 'Reda√ß√£o Oficial', peso: 5 }
            ]
        },
        {
            nome: 'Inform√°tica',
            peso: 5,
            topicos: [
                { nome: 'Windows', peso: 4 },
                { nome: 'Word', peso: 3 },
                { nome: 'Excel', peso: 8 }
            ]
        },
        {
            nome: 'Racioc√≠nio L√≥gico',
            peso: 3,
            topicos: [
                { nome: 'Proposi√ß√µes', peso: 6 },
                { nome: 'Argumenta√ß√£o', peso: 5 },
                { nome: 'Quantificadores', peso: 4 }
            ]
        }
    ];
    
    for (const disciplina of disciplinas) {
        // Criar disciplina
        console.log(`\n   Adicionando ${disciplina.nome} (peso ${disciplina.peso})...`);
        const subjectResult = await makeRequest('POST', `/plans/${planId}/subjects`, {
            name: disciplina.nome,
            weight: disciplina.peso
        });
        
        if (!subjectResult.success) {
            console.log(`   ‚ùå Erro ao adicionar ${disciplina.nome}`);
            continue;
        }
        
        const subjectId = subjectResult.data.subject.id;
        console.log(`   ‚úÖ ${disciplina.nome} adicionada`);
        
        // Adicionar t√≥picos
        for (const topico of disciplina.topicos) {
            const topicResult = await makeRequest('POST', `/subjects/${subjectId}/topics`, {
                topic_description: topico.nome,
                weight: topico.peso
            });
            
            if (topicResult.success) {
                console.log(`      ‚úÖ T√≥pico: ${topico.nome} (peso ${topico.peso})`);
            } else {
                console.log(`      ‚ùå Erro no t√≥pico: ${topico.nome}`);
            }
        }
    }
    
    // 5. GERAR CRONOGRAMA
    console.log('\nüìÖ 5. Gerando cronograma...');
    
    const scheduleResult = await makeRequest('POST', `/plans/${planId}/generate-schedule`, {
        start_date: new Date().toISOString().split('T')[0],
        exam_date: examDate.toISOString().split('T')[0],
        available_days: {
            monday: true,
            tuesday: true,
            wednesday: true,
            thursday: true,
            friday: true,
            saturday: true,
            sunday: false
        },
        hours_per_day: 4
    });
    
    if (!scheduleResult.success) {
        console.log('‚ùå Falha ao gerar cronograma');
        return;
    }
    
    console.log('‚úÖ Cronograma gerado com sucesso');
    
    // 6. VERIFICAR DISTRIBUI√á√ÉO PONDERADA
    console.log('\nüîç 6. Analisando distribui√ß√£o ponderada do cronograma...');
    
    const sessionsResult = await makeRequest('GET', `/plans/${planId}/sessions`);
    
    if (!sessionsResult.success) {
        console.log('‚ùå Erro ao buscar sess√µes');
        return;
    }
    
    sessions = sessionsResult.data.sessions;
    console.log(`   Total de sess√µes geradas: ${sessions.length}`);
    
    // Analisar distribui√ß√£o por disciplina e t√≥pico
    const distribution = {};
    const topicFrequency = {};
    
    sessions.forEach(session => {
        // Contar por disciplina
        if (!distribution[session.subject_name]) {
            distribution[session.subject_name] = 0;
        }
        distribution[session.subject_name]++;
        
        // Contar por t√≥pico
        const key = `${session.subject_name} - ${session.topic_description}`;
        if (!topicFrequency[key]) {
            topicFrequency[key] = 0;
        }
        topicFrequency[key]++;
    });
    
    console.log('\n   üìä Distribui√ß√£o por Disciplina:');
    Object.entries(distribution)
        .sort((a, b) => b[1] - a[1])
        .forEach(([subject, count]) => {
            console.log(`      ${subject}: ${count} sess√µes`);
        });
    
    console.log('\n   üìä Top 5 T√≥picos Mais Frequentes:');
    Object.entries(topicFrequency)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .forEach(([topic, count]) => {
            console.log(`      ${topic}: ${count} vezes`);
        });
    
    // Verificar se respeita o algoritmo round-robin ponderado
    console.log('\n   üéØ Validando algoritmo round-robin ponderado:');
    
    // Direito Constitucional (peso 10) deve aparecer mais que Portugu√™s (peso 8)
    const direitoCount = distribution['Direito Constitucional'] || 0;
    const portuguesCount = distribution['Portugu√™s'] || 0;
    const informaticaCount = distribution['Inform√°tica'] || 0;
    const raciocinioCount = distribution['Racioc√≠nio L√≥gico'] || 0;
    
    const test1 = direitoCount > portuguesCount;
    const test2 = portuguesCount > informaticaCount;
    const test3 = informaticaCount > raciocinioCount;
    
    console.log(`      Direito (${direitoCount}) > Portugu√™s (${portuguesCount}): ${test1 ? '‚úÖ' : '‚ùå'}`);
    console.log(`      Portugu√™s (${portuguesCount}) > Inform√°tica (${informaticaCount}): ${test2 ? '‚úÖ' : '‚ùå'}`);
    console.log(`      Inform√°tica (${informaticaCount}) > Racioc√≠nio (${raciocinioCount}): ${test3 ? '‚úÖ' : '‚ùå'}`);
    
    // 7. MARCAR ALGUMAS SESS√ïES COMO CONCLU√çDAS
    console.log('\n‚úÖ 7. Marcando sess√µes como conclu√≠das...');
    
    const sessionsToComplete = sessions.slice(0, 5); // Primeiras 5 sess√µes
    
    for (const session of sessionsToComplete) {
        const completeResult = await makeRequest('POST', `/sessions/${session.id}/status`, {
            status: 'Conclu√≠do',
            notes: 'Sess√£o de teste conclu√≠da',
            questions_solved: Math.floor(Math.random() * 50) + 10
        });
        
        if (completeResult.success) {
            console.log(`   ‚úÖ Sess√£o ${session.id} conclu√≠da`);
        } else {
            console.log(`   ‚ùå Erro ao concluir sess√£o ${session.id}`);
        }
    }
    
    // 8. VERIFICAR ESTAT√çSTICAS E GAMIFICA√á√ÉO
    console.log('\nüéÆ 8. Verificando estat√≠sticas e gamifica√ß√£o...');
    
    // Buscar perfil de gamifica√ß√£o
    const gamificationResult = await makeRequest('GET', '/gamification/profile');
    
    if (gamificationResult.success) {
        const profile = gamificationResult.data;
        console.log('\n   üèÜ Perfil de Gamifica√ß√£o:');
        console.log(`      XP: ${profile.xp || 0}`);
        console.log(`      N√≠vel: ${profile.level_info?.title || 'N/A'}`);
        console.log(`      Streak: ${profile.current_streak || 0} dias`);
        console.log(`      Conquistas: ${profile.achievements?.length || 0}`);
        
        if (profile.achievements && profile.achievements.length > 0) {
            console.log('\n      üéØ Conquistas Desbloqueadas:');
            profile.achievements.forEach(ach => {
                console.log(`         - ${ach.achievement_id}`);
            });
        }
    } else {
        console.log('   ‚ùå Erro ao buscar gamifica√ß√£o');
    }
    
    // Buscar estat√≠sticas gerais
    const statsResult = await makeRequest('GET', '/statistics/general');
    
    if (statsResult.success) {
        const stats = statsResult.data;
        console.log('\n   üìä Estat√≠sticas Gerais:');
        console.log(`      Sess√µes completadas: ${stats.metricas_desempenho?.sessoes_semana || 0}`);
        console.log(`      Horas estudadas: ${stats.metricas_desempenho?.horas_semana || 0}`);
        console.log(`      Progresso semanal: ${stats.graficos_progresso?.progresso_semanal || 0}%`);
    } else {
        console.log('   ‚ùå Erro ao buscar estat√≠sticas');
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üèÅ TESTE COMPLETO FINALIZADO');
    console.log('='.repeat(60));
}

// Executar teste
testPlatform().then(() => {
    console.log('\n‚ú® Script de teste conclu√≠do');
    process.exit(0);
}).catch(error => {
    console.error('\n‚ùå Erro fatal:', error);
    process.exit(1);
});