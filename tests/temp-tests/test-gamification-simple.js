/**
 * Teste Simplificado de Gamifica√ß√£o
 * Verifica se XP e estat√≠sticas s√£o atualizadas ao concluir sess√µes
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function makeRequest(method, endpoint, data = null, token = null) {
    try {
        const config = {
            method,
            url: `${BASE_URL}/api${endpoint}`,
            timeout: 5000, // 5 segundos de timeout
            headers: {}
        };
        
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        
        if (data) {
            config.data = data;
            config.headers['Content-Type'] = 'application/json';
        }
        
        const response = await axios(config);
        return { success: true, data: response.data };
    } catch (error) {
        return { 
            success: false, 
            error: error.response?.data || error.message,
            status: error.response?.status 
        };
    }
}

async function testarGamificacao() {
    console.log('üéÆ TESTE R√ÅPIDO DE GAMIFICA√á√ÉO\n');
    
    let token, userId, planId;
    
    // 1. Criar usu√°rio
    console.log('1Ô∏è‚É£ Criando usu√°rio de teste...');
    const timestamp = Date.now();
    const userData = {
        name: `Test ${timestamp}`,
        email: `test.${timestamp}@editaliza.com`,
        password: 'Test@123!',
        confirmPassword: 'Test@123!'
    };
    
    const registerResult = await makeRequest('POST', '/auth/register', userData);
    if (!registerResult.success) {
        console.error('‚ùå Erro ao registrar:', registerResult.error);
        return;
    }
    
    token = registerResult.data.token;
    userId = registerResult.data.user.id;
    console.log('‚úÖ Usu√°rio criado - ID:', userId);
    
    // 2. Criar plano
    console.log('\n2Ô∏è‚É£ Criando plano de estudos...');
    const planResult = await makeRequest('POST', '/plans', {
        plan_name: 'Teste Gamifica√ß√£o',
        exam_date: '2025-12-31',
        study_hours_per_day: {"0":2,"1":2,"2":2,"3":2,"4":2,"5":2,"6":2},
        daily_question_goal: 10,
        weekly_question_goal: 70,
        session_duration_minutes: 30
    }, token);
    
    if (!planResult.success) {
        console.error('‚ùå Erro ao criar plano:', planResult.error);
        return;
    }
    
    planId = planResult.data.planId || planResult.data.newPlanId;
    console.log('‚úÖ Plano criado - ID:', planId);
    
    // 3. Adicionar disciplina
    console.log('\n3Ô∏è‚É£ Adicionando disciplina...');
    const subjectResult = await makeRequest('POST', `/plans/${planId}/subjects`, {
        name: 'Matem√°tica',
        weight: 5
    }, token);
    
    if (!subjectResult.success) {
        console.error('‚ùå Erro ao criar disciplina:', subjectResult.error);
        return;
    }
    
    const subjectId = subjectResult.data.subjectId || subjectResult.data.id;
    console.log('‚úÖ Disciplina criada - ID:', subjectId);
    
    // 4. Adicionar t√≥pico
    console.log('\n4Ô∏è‚É£ Adicionando t√≥pico...');
    await makeRequest('POST', `/subjects/${subjectId}/topics`, {
        topic_name: '√Ålgebra',
        priority_weight: 5,
        status: 'N√£o Iniciado'
    }, token);
    console.log('‚úÖ T√≥pico adicionado');
    
    // 5. Gerar cronograma
    console.log('\n5Ô∏è‚É£ Gerando cronograma...');
    const generateResult = await makeRequest('POST', `/plans/${planId}/generate`, {
        daily_question_goal: 10,
        weekly_question_goal: 70,
        session_duration_minutes: 30,
        study_hours_per_day: {"0":2,"1":2,"2":2,"3":2,"4":2,"5":2,"6":2},
        has_essay: false,
        reta_final_mode: false
    }, token);
    
    if (!generateResult.success) {
        console.error('‚ùå Erro ao gerar cronograma:', generateResult.error);
        return;
    }
    console.log('‚úÖ Cronograma gerado');
    console.log('   Resposta completa:', JSON.stringify(generateResult.data, null, 2));
    const sessionsCreated = generateResult.data?.sessionsCreated || 
                           generateResult.data?.statistics?.totalSessions || 
                           generateResult.data?.statistics?.studySessions || 0;
    console.log('   Sess√µes criadas:', sessionsCreated);
    
    // 6. Verificar gamifica√ß√£o ANTES
    console.log('\n6Ô∏è‚É£ Verificando gamifica√ß√£o inicial...');
    // Tentar diferentes endpoints de gamifica√ß√£o
    console.log('   Tentando /api/gamification/profile...');
    let initialGamification = await makeRequest('GET', '/gamification/profile', null, token);
    
    if (!initialGamification.success) {
        console.log('   Tentando /api/plans/' + planId + '/gamification...');
        initialGamification = await makeRequest('GET', `/plans/${planId}/gamification`, null, token);
    }
    
    if (!initialGamification.success) {
        console.log('‚ö†Ô∏è  Gamifica√ß√£o n√£o dispon√≠vel - continuando teste...');
    } else {
        const profile = initialGamification.data;
        console.log('üìä Estado Inicial:');
        console.log('   XP:', profile.xp || 0);
        console.log('   N√≠vel:', profile.level || 1);
        console.log('   Conquistas:', profile.achievements?.length || 0);
    }
    
    // 7. Buscar sess√µes
    console.log('\n7Ô∏è‚É£ Buscando sess√µes...');
    const sessionsResult = await makeRequest('GET', `/plans/${planId}/sessions`, null, token);
    
    if (!sessionsResult.success) {
        console.error('‚ùå Erro ao buscar sess√µes:', sessionsResult.error);
        return;
    }
    
    const sessions = sessionsResult.data.sessions || sessionsResult.data || [];
    console.log(`‚úÖ ${sessions.length} sess√µes encontradas`);
    
    if (sessions.length === 0) {
        console.log('‚ö†Ô∏è  Nenhuma sess√£o foi criada no cronograma');
        console.log('   Debug - Resposta:', JSON.stringify(sessionsResult.data, null, 2));
    }
    
    // 8. Marcar 3 sess√µes como conclu√≠das
    console.log('\n8Ô∏è‚É£ Marcando 3 sess√µes como conclu√≠das...');
    let completed = 0;
    
    for (let i = 0; i < Math.min(3, sessions.length); i++) {
        const session = sessions[i];
        const sessionId = session.id || session.session_id;
        
        const result = await makeRequest('PATCH', `/sessions/${sessionId}`, {
            status: 'Conclu√≠do'
        }, token);
        
        if (result.success) {
            completed++;
            console.log(`   ‚úÖ Sess√£o ${sessionId} conclu√≠da`);
        } else {
            console.log(`   ‚ùå Erro na sess√£o ${sessionId}:`, result.error);
        }
    }
    
    console.log(`   Total: ${completed}/3 sess√µes conclu√≠das`);
    
    // 9. Verificar gamifica√ß√£o DEPOIS
    console.log('\n9Ô∏è‚É£ Verificando gamifica√ß√£o ap√≥s conclus√µes...');
    const finalGamification = await makeRequest('GET', '/gamification/profile', null, token);
    
    if (!finalGamification.success) {
        console.log('‚ö†Ô∏è  Gamifica√ß√£o n√£o dispon√≠vel');
    } else {
        const finalProfile = finalGamification.data;
        const initialProfile = initialGamification.data || {};
        
        console.log('üìä Estado Final:');
        console.log('   XP:', finalProfile.xp || 0);
        console.log('   N√≠vel:', finalProfile.level || 1);
        console.log('   Conquistas:', finalProfile.achievements?.length || 0);
        
        console.log('\nüìà Mudan√ßas:');
        console.log(`   XP ganho: +${(finalProfile.xp || 0) - (initialProfile.xp || 0)}`);
        console.log(`   Novos badges: +${(finalProfile.achievements?.length || 0) - (initialProfile.achievements?.length || 0)}`);
    }
    
    // 10. Verificar estat√≠sticas
    console.log('\nüîü Verificando estat√≠sticas...');
    const statsResult = await makeRequest('GET', `/sessions/statistics/${planId}`, null, token);
    
    if (!statsResult.success) {
        console.log('‚ö†Ô∏è  Estat√≠sticas n√£o dispon√≠veis');
    } else {
        const stats = statsResult.data;
        console.log('üìä Estat√≠sticas:');
        console.log('   Sess√µes conclu√≠das:', stats.completed_sessions || completed);
        console.log('   Taxa de conclus√£o:', stats.completion_rate || 0, '%');
        console.log('   Horas estudadas:', stats.total_study_hours || 0);
    }
    
    // Resumo
    console.log('\n' + '='.repeat(50));
    console.log('üìã RESUMO DO TESTE');
    console.log('='.repeat(50));
    
    const hasGamification = finalGamification.success;
    const hasStatistics = statsResult.success;
    const xpChanged = finalGamification.success && 
                     (finalGamification.data.xp || 0) > (initialGamification.data?.xp || 0);
    
    console.log(`\n‚úÖ Sess√µes marcadas com sucesso: ${completed > 0 ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚úÖ Gamifica√ß√£o dispon√≠vel: ${hasGamification ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚úÖ XP incrementado: ${xpChanged ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚úÖ Estat√≠sticas dispon√≠veis: ${hasStatistics ? '‚úÖ' : '‚ùå'}`);
    
    if (completed > 0) {
        console.log('\nüéâ FUNCIONALIDADE B√ÅSICA FUNCIONANDO!');
        if (!hasGamification) {
            console.log('‚ö†Ô∏è  Gamifica√ß√£o precisa ser implementada/corrigida');
        }
        if (!hasStatistics) {
            console.log('‚ö†Ô∏è  Estat√≠sticas precisam ser implementadas/corrigidas');
        }
    }
}

// Executar
console.log('üöÄ Iniciando teste simplificado...\n');

testarGamificacao()
    .then(() => {
        console.log('\n‚ú® Teste finalizado');
        process.exit(0);
    })
    .catch(error => {
        console.error('\n‚ùå Erro:', error.message);
        process.exit(1);
    });