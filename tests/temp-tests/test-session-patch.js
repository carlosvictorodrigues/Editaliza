/**
 * Teste para verificar a corre√ß√£o da rota PATCH /api/sessions/:sessionId
 * 
 * PROBLEMA IDENTIFICADO:
 * - handleValidationErrors n√£o estava chamando next() quando n√£o havia erros
 * - Isso causava timeout na requisi√ß√£o
 * 
 * SOLU√á√ÉO APLICADA:
 * - Adicionado "return next()" no handleValidationErrors quando n√£o h√° erros
 */

const axios = require('axios');

// Configura√ß√£o
const BASE_URL = 'http://localhost:3000';
// Token v√°lido gerado com user_id = 80
const TOKEN = process.env.TEST_TOKEN || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ODAsImVtYWlsIjoidGVzdGVAZWRpdGFsaXphLmNvbSIsIm5hbWUiOiJVc3XDoXJpbyBUZXN0ZSIsImlhdCI6MTc1NjMxMjQ4OCwiZXhwIjoxNzU2Mzk4ODg4LCJpc3MiOiJlZGl0YWxpemEifQ.Mn6fTrcLXWBcQCGlPpRUCltFKrjopAigv8W0huayG_I';

async function testSessionPatch() {
    console.log('üß™ Testando corre√ß√£o da rota PATCH /api/sessions/:sessionId\n');
    
    try {
        // 1. Configurar o axios com timeout
        const axiosInstance = axios.create({
            baseURL: BASE_URL,
            timeout: 5000, // 5 segundos de timeout
            headers: {
                'Authorization': `Bearer ${TOKEN}`,
                'Content-Type': 'application/json'
            }
        });

        // 2. Testar a rota PATCH
        const sessionId = 3147; // ID da sess√£o do log fornecido
        console.log(`üì§ Enviando PATCH /api/sessions/${sessionId}`);
        console.log('   Body: { status: "Conclu√≠do" }\n');
        
        const startTime = Date.now();
        
        const response = await axiosInstance.patch(`/api/sessions/${sessionId}`, {
            status: 'Conclu√≠do'
        });
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        console.log('‚úÖ Resposta recebida com sucesso!');
        console.log(`‚è±Ô∏è  Tempo de resposta: ${duration}ms`);
        console.log('üì• Status:', response.status);
        console.log('üì• Dados:', JSON.stringify(response.data, null, 2));
        
        // Verifica√ß√£o
        if (duration < 1000) {
            console.log('\nüéâ SUCESSO! A corre√ß√£o funcionou - resposta r√°pida sem timeout!');
        } else if (duration < 5000) {
            console.log('\n‚ö†Ô∏è  AVISO: Resposta demorou mais que o esperado, mas n√£o deu timeout');
        }
        
    } catch (error) {
        console.error('\n‚ùå Erro no teste:');
        
        if (error.code === 'ECONNABORTED') {
            console.error('   TIMEOUT! A requisi√ß√£o travou ap√≥s 5 segundos');
            console.error('   ‚û°Ô∏è  O problema N√ÉO foi corrigido completamente');
        } else if (error.response) {
            // Erro do servidor (4xx, 5xx)
            console.error('   Status:', error.response.status);
            console.error('   Erro:', error.response.data);
            
            if (error.response.status === 401) {
                console.error('\n   üí° Dica: O token pode estar expirado. Gere um novo token.');
            } else if (error.response.status === 404) {
                console.error('\n   üí° Dica: A sess√£o 2966 pode n√£o existir. Verifique o ID.');
            }
        } else {
            console.error('   Erro de conex√£o:', error.message);
            console.error('\n   üí° Dica: Verifique se o servidor est√° rodando na porta 3000');
        }
    }
}

// Executar o teste
console.log('========================================');
console.log('  TESTE DE CORRE√á√ÉO - PATCH SESSIONS');
console.log('========================================\n');

testSessionPatch().then(() => {
    console.log('\n========================================');
    process.exit(0);
}).catch(err => {
    console.error('Erro fatal:', err);
    process.exit(1);
});