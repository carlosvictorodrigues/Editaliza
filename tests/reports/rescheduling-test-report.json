{
  "timestamp": "2025-08-08T22:47:41.465Z",
  "summary": {
    "total": 10,
    "passed": 4,
    "failed": 6,
    "successRate": "40.0",
    "duration": 31560
  },
  "results": {
    "unit": {
      "API Endpoint Tests": {
        "success": false,
        "tests": 0,
        "failures": 0,
        "duration": 5711,
        "output": "\n> meu-cronograma@1.0.0 test\n> jest --detectOpenHandles --forceExit unit/rescheduling/rescheduling-endpoint.test.js\n\n  console.error\n    Rescheduling test error: Error: SQLITE_MISUSE: Database is closed\n        at Database.<anonymous> (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\sqlite3\\lib\\sqlite3.js:19:27)\n        at get (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\helpers\\database-helper.js:186:15)\n        at new Promise (<anonymous>)\n        at DatabaseTestHelper.get (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\helpers\\database-helper.js:185:12)\n        at get (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\unit\\rescheduling\\rescheduling-endpoint.test.js:85:35)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\route.js:149:13)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\unit\\rescheduling\\rescheduling-endpoint.test.js:75:9)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\jsonwebtoken\\verify.js:261:12\n        at getSecret (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\jsonwebtoken\\verify.js:97:14)\n        at Object.<anonymous>.module.exports [as verify] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\jsonwebtoken\\verify.js:101:10)\n        at verify (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\unit\\rescheduling\\rescheduling-endpoint.test.js:70:11)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\route.js:149:13)\n        at Route.dispatch (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\route.js:119:3)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:284:15\n        at param (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:365:14)\n        at param (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:376:14)\n        at Function.process_params (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:421:3)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:280:10)\n        at jsonParser (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\body-parser\\lib\\types\\json.js:122:7)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at trim_prefix (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:328:13)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:286:9\n        at Function.process_params (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:346:12)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:280:10)\n        at expressInit (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\middleware\\init.js:40:5)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at trim_prefix (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:328:13)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:286:9\n        at Function.process_params (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:346:12)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:280:10)\n        at query (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\middleware\\query.js:45:5)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at trim_prefix (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:328:13)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:286:9\n        at Function.process_params (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:346:12)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:280:10)\n        at Function.handle (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:175:3)\n        at Function.handle (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\application.js:181:10)\n        at Server.app (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\express.js:39:9)\n        at Server.emit (node:events:518:28)\n        at parserOnIncoming (node:_http_server:1155:12)\n        at HTTPParser.parserOnHeadersComplete (node:_http_common:117:17)\n    --> in Database#get('SELECT * FROM study_plans WHERE id = ? AND user_id = ?', [ 1, 1 ], [Function (anonymous)])\n        at get (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\helpers\\database-helper.js:186:15)\n        at new Promise (<anonymous>)\n        at DatabaseTestHelper.get (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\helpers\\database-helper.js:185:12)\n        at get (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\unit\\rescheduling\\rescheduling-endpoint.test.js:85:35)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\route.js:149:13)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\unit\\rescheduling\\rescheduling-endpoint.test.js:75:9)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\jsonwebtoken\\verify.js:261:12\n        at getSecret (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\jsonwebtoken\\verify.js:97:14)\n        at Object.<anonymous>.module.exports [as verify] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\jsonwebtoken\\verify.js:101:10)\n        at verify (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\tests\\unit\\rescheduling\\rescheduling-endpoint.test.js:70:11)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\route.js:149:13)\n        at Route.dispatch (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\route.js:119:3)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:284:15\n        at param (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:365:14)\n        at param (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:376:14)\n        at Function.process_params (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:421:3)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:280:10)\n        at jsonParser (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\body-parser\\lib\\types\\json.js:122:7)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at trim_prefix (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:328:13)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:286:9\n        at Function.process_params (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:346:12)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:280:10)\n        at expressInit (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\middleware\\init.js:40:5)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at trim_prefix (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:328:13)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:286:9\n        at Function.process_params (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:346:12)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:280:10)\n        at query (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\middleware\\query.js:45:5)\n        at Layer.handle [as handle_request] (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\layer.js:95:5)\n        at trim_prefix (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:328:13)\n        at C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:286:9\n        at Function.process_params (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:346:12)\n        at next (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:280:10)\n        at Function.handle (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\router\\index.js:175:3)\n        at Function.handle (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\application.js:181:10)\n        at Server.app (C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\node_modules\\express\\lib\\express.js:39:9)\n        at Server.emit (node:events:518:28)\n        at parserOnIncoming (node:_http_server:1155:12)\n        at HTTPParser.parserOnHeadersComplete (node:_http_common:117:17) {\n      errno: 21,\n      code: 'SQLITE_MISUSE',\n      __augmented: true\n    }\n\n    \u001b[0m \u001b[90m 151 |\u001b[39m\n     \u001b[90m 152 |\u001b[39m       } \u001b[36mcatch\u001b[39m (error) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 153 |\u001b[39m         console\u001b[33m.\u001b[39merror(\u001b[32m'Rescheduling test error:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 154 |\u001b[39m         res\u001b[33m.\u001b[39mstatus(\u001b[35m500\u001b[39m)\u001b[33m.\u001b[39mjson({ \n     \u001b[90m 155 |\u001b[39m           success\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m\u001b[33m,\u001b[39m \n     \u001b[90m 156 |\u001b[39m           error\u001b[33m:\u001b[39m \u001b[32m'Erro interno do servidor.'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at error (tests/unit/rescheduling/rescheduling-endpoint.test.js:153:17)\n\n",
        "errorOutput": "FAIL tests/unit/rescheduling/rescheduling-endpoint.test.js\n  Intelligent Rescheduling API Endpoint Tests\n    Authentication and Authorization\n      √ should reject requests without authentication token (58 ms)\n      √ should reject requests with invalid authentication token (22 ms)\n      √ should reject requests for non-existent plans (17 ms)\n      √ should reject requests for plans owned by other users (17 ms)\n    Response Format Validation\n      √ should return correct response format for no overdue sessions (16 ms)\n      √ should return correct response format for successful rescheduling (28 ms)\n      √ should return correct response format for partial rescheduling (27 ms)\n    Edge Cases and Error Handling\n      √ should handle invalid plan ID parameter (13 ms)\n      √ should handle database connection errors gracefully (63 ms)\n      × should update postponement count after rescheduling (5 ms)\n      × should handle multiple concurrent rescheduling requests (40 ms)\n    Success Message Validation\n      × should show success message when all sessions are rescheduled (18 ms)\n      × should show warning message when only some sessions are rescheduled (22 ms)\n    Session Data Integrity\n      × should preserve session metadata during rescheduling (16 ms)\n      × should not modify sessions that are not overdue (14 ms)\n\n  ● Intelligent Rescheduling API Endpoint Tests › Edge Cases and Error Handling › should update postponement count after rescheduling\n\n    TypeError: Cannot read properties of undefined (reading 'postponement_count')\n\n    \u001b[0m \u001b[90m 337 |\u001b[39m       \u001b[90m// Get initial postponement count\u001b[39m\n     \u001b[90m 338 |\u001b[39m       \u001b[36mconst\u001b[39m initialPlan \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m testDB\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'SELECT postponement_count FROM study_plans WHERE id = ?'\u001b[39m\u001b[33m,\u001b[39m [testPlan\u001b[33m.\u001b[39mid])\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 339 |\u001b[39m       \u001b[36mconst\u001b[39m initialCount \u001b[33m=\u001b[39m initialPlan\u001b[33m.\u001b[39mpostponement_count \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 340 |\u001b[39m\n     \u001b[90m 341 |\u001b[39m       \u001b[90m// Perform rescheduling\u001b[39m\n     \u001b[90m 342 |\u001b[39m       \u001b[36mawait\u001b[39m request(app)\u001b[0m\n\n      at Object.postponement_count (tests/unit/rescheduling/rescheduling-endpoint.test.js:339:40)\n\n  ● Intelligent Rescheduling API Endpoint Tests › Edge Cases and Error Handling › should handle multiple concurrent rescheduling requests\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value: 404\n    Received array: [200, 409, 500]\n\n    \u001b[0m \u001b[90m 368 |\u001b[39m       \u001b[90m// All requests should complete successfully or handle conflicts gracefully\u001b[39m\n     \u001b[90m 369 |\u001b[39m       responses\u001b[33m.\u001b[39mforEach(response \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 370 |\u001b[39m         expect([\u001b[35m200\u001b[39m\u001b[33m,\u001b[39m \u001b[35m409\u001b[39m\u001b[33m,\u001b[39m \u001b[35m500\u001b[39m])\u001b[33m.\u001b[39mtoContain(response\u001b[33m.\u001b[39mstatus)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 371 |\u001b[39m         expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'success'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 372 |\u001b[39m       })\u001b[33m;\u001b[39m\n     \u001b[90m 373 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      at toContain (tests/unit/rescheduling/rescheduling-endpoint.test.js:370:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/rescheduling/rescheduling-endpoint.test.js:369:17)\n\n  ● Intelligent Rescheduling API Endpoint Tests › Success Message Validation › should show success message when all sessions are rescheduled\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 404\n\n    \u001b[0m \u001b[90m 386 |\u001b[39m         \u001b[33m.\u001b[39msend()\u001b[33m;\u001b[39m\n     \u001b[90m 387 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 388 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 389 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39msuccess)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 390 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoContain(\u001b[32m'✅ Todas as 2 tarefas atrasadas foram replanejadas com sucesso!'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 391 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/unit/rescheduling/rescheduling-endpoint.test.js:388:31)\n\n  ● Intelligent Rescheduling API Endpoint Tests › Success Message Validation › should show warning message when only some sessions are rescheduled\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 404\n\n    \u001b[0m \u001b[90m 402 |\u001b[39m         \u001b[33m.\u001b[39msend()\u001b[33m;\u001b[39m\n     \u001b[90m 403 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 404 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 405 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39msuccess)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 406 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoContain(\u001b[32m'⚠'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 407 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoContain(\u001b[32m'5 de 8 tarefas foram replanejadas'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/unit/rescheduling/rescheduling-endpoint.test.js:404:31)\n\n  ● Intelligent Rescheduling API Endpoint Tests › Session Data Integrity › should preserve session metadata during rescheduling\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n    \u001b[0m \u001b[90m 424 |\u001b[39m         \u001b[33m.\u001b[39msend()\u001b[33m;\u001b[39m\n     \u001b[90m 425 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 426 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39msuccess)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 427 |\u001b[39m\n     \u001b[90m 428 |\u001b[39m       \u001b[90m// Verify session metadata was preserved\u001b[39m\n     \u001b[90m 429 |\u001b[39m       \u001b[36mconst\u001b[39m updatedSession \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m testDB\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'SELECT * FROM study_sessions WHERE id = ?'\u001b[39m\u001b[33m,\u001b[39m [originalSession\u001b[33m.\u001b[39mid])\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/unit/rescheduling/rescheduling-endpoint.test.js:426:37)\n\n  ● Intelligent Rescheduling API Endpoint Tests › Session Data Integrity › should not modify sessions that are not overdue\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n    \u001b[0m \u001b[90m 475 |\u001b[39m         \u001b[33m.\u001b[39msend()\u001b[33m;\u001b[39m\n     \u001b[90m 476 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 477 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39msuccess)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 478 |\u001b[39m\n     \u001b[90m 479 |\u001b[39m       \u001b[90m// Verify future session was not modified\u001b[39m\n     \u001b[90m 480 |\u001b[39m       \u001b[36mconst\u001b[39m unchangedSession \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m testDB\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'SELECT * FROM study_sessions WHERE id = ?'\u001b[39m\u001b[33m,\u001b[39m [futureSession\u001b[33m.\u001b[39mid])\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/unit/rescheduling/rescheduling-endpoint.test.js:477:37)\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 9 passed, 15 total\nSnapshots:   0 total\nTime:        2.776 s\nRan all test suites matching /unit\\\\rescheduling\\\\rescheduling-endpoint.test.js/i.\n"
      },
      "Database Integrity Tests": {
        "success": false,
        "tests": 0,
        "failures": 0,
        "duration": 3172,
        "output": "\n> meu-cronograma@1.0.0 test\n> jest --detectOpenHandles --forceExit unit/rescheduling/database-integrity.test.js\n\n",
        "errorOutput": "FAIL tests/unit/rescheduling/database-integrity.test.js\n  Rescheduling Database Integrity Tests\n    Non-Overdue Session Protection\n      √ should never modify future sessions during rescheduling (16 ms)\n      √ should never modify completed sessions (8 ms)\n    Daily Study Time Limits\n      √ should respect daily hour limits when calculating available slots (6 ms)\n      √ should calculate available slots correctly for different days (3 ms)\n    Session Count Limits Per Day\n      √ should enforce maximum 2 sessions per subject per day load balancing rule (7 ms)\n      √ should distribute sessions across multiple days when daily limits are reached (10 ms)\n    Exam Date Constraints\n      × should never schedule sessions beyond exam date (14 ms)\n      √ should handle impossible rescheduling scenarios gracefully (23 ms)\n    Database Relationship Integrity\n      √ should maintain foreign key relationships during rescheduling (7 ms)\n      √ should preserve session metadata consistency (6 ms)\n    Concurrent Access Safety\n      √ should handle concurrent modifications safely (7 ms)\n\n  ● Rescheduling Database Integrity Tests › Exam Date Constraints › should never schedule sessions beyond exam date\n\n    expect(received).toBeLessThanOrEqual(expected)\n\n    Expected: <= 3\n    Received:    4\n\n    \u001b[0m \u001b[90m 402 |\u001b[39m       \u001b[90m// Calculate available days until exam\u001b[39m\n     \u001b[90m 403 |\u001b[39m       \u001b[36mconst\u001b[39m daysBetween \u001b[33m=\u001b[39m \u001b[33mMath\u001b[39m\u001b[33m.\u001b[39mceil((examDate \u001b[33m-\u001b[39m today) \u001b[33m/\u001b[39m (\u001b[35m1000\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m))\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 404 |\u001b[39m       expect(daysBetween)\u001b[33m.\u001b[39mtoBeLessThanOrEqual(\u001b[35m3\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 405 |\u001b[39m\n     \u001b[90m 406 |\u001b[39m       \u001b[90m// Any rescheduling must respect this constraint\u001b[39m\n     \u001b[90m 407 |\u001b[39m       \u001b[36mconst\u001b[39m scheduleTest \u001b[33m=\u001b[39m \u001b[36masync\u001b[39m (sessionDate) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toBeLessThanOrEqual (tests/unit/rescheduling/database-integrity.test.js:404:27)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 10 passed, 11 total\nSnapshots:   0 total\nTime:        1.252 s\nRan all test suites matching /unit\\\\rescheduling\\\\database-integrity.test.js/i.\n"
      },
      "Intelligent Logic Tests": {
        "success": false,
        "tests": 0,
        "failures": 0,
        "duration": 3000,
        "output": "\n> meu-cronograma@1.0.0 test\n> jest --detectOpenHandles --forceExit unit/rescheduling/intelligent-logic.test.js\n\n",
        "errorOutput": "FAIL tests/unit/rescheduling/intelligent-logic.test.js\n  Intelligent Rescheduling Logic Tests\n    Subject-Aware Grouping\n      √ should correctly group overdue sessions by subject (19 ms)\n      √ should prioritize sessions by original schedule date within subject groups (7 ms)\n    Intelligent Slot Assignment\n      √ should prefer slots before future sessions of the same subject (12 ms)\n      × should maintain learning continuity by preferring subject-adjacent slots (12 ms)\n    Fallback Strategies\n      √ should use fallback slots when preferred slots are unavailable (15 ms)\n      × should gracefully handle scenarios where no slots are available (27 ms)\n    Load Balancing Across Subjects and Days\n      × should distribute sessions evenly across available days (13 ms)\n      √ should balance subjects within daily limits (15 ms)\n    Algorithm Performance and Edge Cases\n      √ should handle large numbers of overdue sessions efficiently (52 ms)\n      √ should maintain data consistency during complex rescheduling scenarios (16 ms)\n\n  ● Intelligent Rescheduling Logic Tests › Intelligent Slot Assignment › should maintain learning continuity by preferring subject-adjacent slots\n\n    expect(received).toBeLessThanOrEqual(expected)\n\n    Expected: <= 1\n    Received:    2\n\n    \u001b[0m \u001b[90m 331 |\u001b[39m         \u001b[90m// Verify preferred slot is closer to math sessions than random slot\u001b[39m\n     \u001b[90m 332 |\u001b[39m         \u001b[36mif\u001b[39m (slot \u001b[33m===\u001b[39m \u001b[35m1\u001b[39m) { \u001b[90m// Day 1 is 2 days from day 3 math\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 333 |\u001b[39m           expect(closestMathDistance)\u001b[33m.\u001b[39mtoBeLessThanOrEqual(randomMathDistance)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 334 |\u001b[39m         }\n     \u001b[90m 335 |\u001b[39m       }\n     \u001b[90m 336 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBeLessThanOrEqual (tests/unit/rescheduling/intelligent-logic.test.js:333:39)\n\n  ● Intelligent Rescheduling Logic Tests › Fallback Strategies › should gracefully handle scenarios where no slots are available\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 3\n    Received: 2\n\n    \u001b[0m \u001b[90m 482 |\u001b[39m       \u001b[36mconst\u001b[39m maxPossibleSlots \u001b[33m=\u001b[39m totalDaysUntilExam\u001b[33m;\u001b[39m \u001b[90m// 1 session per day max\u001b[39m\n     \u001b[90m 483 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 484 |\u001b[39m       expect(totalSlotsUsed)\u001b[33m.\u001b[39mtoBe(maxPossibleSlots)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 485 |\u001b[39m\n     \u001b[90m 486 |\u001b[39m       \u001b[90m// Rescheduling algorithm should recognize this and return appropriate error/status\u001b[39m\n     \u001b[90m 487 |\u001b[39m       \u001b[36mconst\u001b[39m overdueCount \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m testDB\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[0m\n\n      at Object.toBe (tests/unit/rescheduling/intelligent-logic.test.js:484:30)\n\n  ● Intelligent Rescheduling Logic Tests › Load Balancing Across Subjects and Days › should distribute sessions evenly across available days\n\n    expect(received).toBeLessThanOrEqual(expected)\n\n    Expected: <= 1\n    Received:    2\n\n    \u001b[0m \u001b[90m 545 |\u001b[39m\n     \u001b[90m 546 |\u001b[39m       expect(distribution\u001b[33m.\u001b[39mreduce((sum\u001b[33m,\u001b[39m count) \u001b[33m=>\u001b[39m sum \u001b[33m+\u001b[39m count\u001b[33m,\u001b[39m \u001b[35m0\u001b[39m))\u001b[33m.\u001b[39mtoBe(totalOverdue)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 547 |\u001b[39m       expect(\u001b[33mMath\u001b[39m\u001b[33m.\u001b[39mmax(\u001b[33m...\u001b[39mdistribution) \u001b[33m-\u001b[39m \u001b[33mMath\u001b[39m\u001b[33m.\u001b[39mmin(\u001b[33m...\u001b[39mdistribution\u001b[33m.\u001b[39mfilter(d \u001b[33m=>\u001b[39m d \u001b[33m>\u001b[39m \u001b[35m0\u001b[39m)))\u001b[33m.\u001b[39mtoBeLessThanOrEqual(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// Even distribution\u001b[39m\n     \u001b[90m     |\u001b[39m                                                                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 548 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 549 |\u001b[39m\n     \u001b[90m 550 |\u001b[39m     test(\u001b[32m'should balance subjects within daily limits'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toBeLessThanOrEqual (tests/unit/rescheduling/intelligent-logic.test.js:547:88)\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 7 passed, 10 total\nSnapshots:   0 total\nTime:        1.301 s\nRan all test suites matching /unit\\\\rescheduling\\\\intelligent-logic.test.js/i.\n"
      },
      "Constraint Validation Tests": {
        "success": false,
        "tests": 0,
        "failures": 0,
        "duration": 3260,
        "output": "\n> meu-cronograma@1.0.0 test\n> jest --detectOpenHandles --forceExit unit/rescheduling/constraint-validation.test.js\n\n",
        "errorOutput": "FAIL tests/unit/rescheduling/constraint-validation.test.js\n  Rescheduling Constraint Validation Tests\n    Daily Study Time Limits\n      √ should respect daily hour allocation constraints (14 ms)\n      √ should handle fractional hours correctly (4 ms)\n      √ should work with different session durations (5 ms)\n    Session Count Limits Per Day\n      √ should enforce maximum 2 sessions per subject per day (8 ms)\n      √ should distribute overdue sessions across multiple days when subject limits are hit (10 ms)\n      √ should handle mixed subjects with load balancing (14 ms)\n    Exam Date Constraints\n      × should never schedule sessions beyond exam date (21 ms)\n      √ should handle edge case where exam is tomorrow (68 ms)\n      × should handle impossible scenarios gracefully (9 ms)\n    Combined Constraint Scenarios\n      √ should respect all constraints simultaneously in complex scenario (21 ms)\n\n  ● Rescheduling Constraint Validation Tests › Exam Date Constraints › should never schedule sessions beyond exam date\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 5\n    Received: 6\n\n    \u001b[0m \u001b[90m 422 |\u001b[39m       \u001b[36mconst\u001b[39m daysUntilExam \u001b[33m=\u001b[39m \u001b[33mMath\u001b[39m\u001b[33m.\u001b[39mceil((examDateTime \u001b[33m-\u001b[39m today) \u001b[33m/\u001b[39m (\u001b[35m1000\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m 423 |\u001b[39m       \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 424 |\u001b[39m       expect(daysUntilExam)\u001b[33m.\u001b[39mtoBe(\u001b[35m5\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 425 |\u001b[39m\n     \u001b[90m 426 |\u001b[39m       \u001b[36mconst\u001b[39m dailyCapacity \u001b[33m=\u001b[39m \u001b[35m2\u001b[39m\u001b[33m;\u001b[39m \u001b[90m// 2 hours per day, 1 hour per session\u001b[39m\n     \u001b[90m 427 |\u001b[39m       \u001b[36mconst\u001b[39m totalCapacity \u001b[33m=\u001b[39m daysUntilExam \u001b[33m*\u001b[39m dailyCapacity\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/unit/rescheduling/constraint-validation.test.js:424:29)\n\n  ● Rescheduling Constraint Validation Tests › Exam Date Constraints › should handle impossible scenarios gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n    \u001b[0m \u001b[90m 558 |\u001b[39m\n     \u001b[90m 559 |\u001b[39m       \u001b[36mif\u001b[39m (impossibleReschedules \u001b[33m>\u001b[39m \u001b[35m0\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 560 |\u001b[39m         expect(result\u001b[33m.\u001b[39msuccess)\u001b[33m.\u001b[39mtoBe(\u001b[36mfalse\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 561 |\u001b[39m         expect(result\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoContain(\u001b[32m'não puderam ser reagendadas'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 562 |\u001b[39m       }\n     \u001b[90m 563 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/unit/rescheduling/constraint-validation.test.js:560:32)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 8 passed, 10 total\nSnapshots:   0 total\nTime:        1.349 s\nRan all test suites matching /unit\\\\rescheduling\\\\constraint-validation.test.js/i.\n"
      },
      "Edge Cases Tests": {
        "success": true,
        "tests": 0,
        "failures": 0,
        "duration": 2994,
        "output": "\n> meu-cronograma@1.0.0 test\n> jest --detectOpenHandles --forceExit unit/rescheduling/edge-cases.test.js\n\n",
        "errorOutput": "PASS tests/unit/rescheduling/edge-cases.test.js\n  Rescheduling Edge Case Tests\n    No Overdue Tasks Scenarios\n      √ should handle plans with no sessions at all (7 ms)\n      √ should handle plans with only future sessions (10 ms)\n      √ should handle plans with only completed sessions (7 ms)\n    No Available Slots Scenarios\n      √ should handle schedule completely full until exam (12 ms)\n      √ should handle subject-specific slot exhaustion (14 ms)\n    Maximum Capacity Situations\n      √ should handle plans at absolute maximum capacity (89 ms)\n      √ should handle single-session-per-day scenarios (12 ms)\n    Boundary Conditions\n      √ should handle zero study hours configuration (8 ms)\n      √ should handle session duration longer than daily hours (6 ms)\n      √ should handle exam date in the past (6 ms)\n    Error Recovery and Resilience\n      √ should handle corrupted study hours configuration (3 ms)\n      √ should handle missing or null session duration (4 ms)\n      √ should handle very large numbers of overdue sessions (71 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       13 passed, 13 total\nSnapshots:   0 total\nTime:        1.341 s\nRan all test suites matching /unit\\\\rescheduling\\\\edge-cases.test.js/i.\n"
      },
      "Spaced Repetition Tests": {
        "success": false,
        "tests": 0,
        "failures": 0,
        "duration": 3214,
        "output": "\n> meu-cronograma@1.0.0 test\n> jest --detectOpenHandles --forceExit unit/rescheduling/spaced-repetition.test.js\n\n  console.log\n    Interpretação de Texto: 90% → 7 day interval\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:207:17)\n\n  console.log\n    Gramática: 60% → 3 day interval\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:207:17)\n\n  console.log\n    Redação: 40% → 2 day interval\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:207:17)\n\n  console.log\n    Matemática momentum: 0.714 sessions/day\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:533:17)\n\n  console.log\n    Português momentum: 0.429 sessions/day\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:533:17)\n\n  console.log\n    História momentum: 0.286 sessions/day\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:533:17)\n\n  console.log\n    Interference-minimized schedule:\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:650:15)\n\n  console.log\n      2025-08-09: quantitative, linguistic\n\n      at log (tests/unit/rescheduling/spaced-repetition.test.js:653:19)\n          at Array.forEach (<anonymous>)\n\n  console.log\n      2025-08-10: quantitative, linguistic\n\n      at log (tests/unit/rescheduling/spaced-repetition.test.js:653:19)\n          at Array.forEach (<anonymous>)\n\n  console.log\n    Mitose e Meiose: 47h since study (need 24h)\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:730:19)\n\n  console.log\n      Consolidation complete: ✅\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:731:19)\n\n  console.log\n    Fotossíntese: 23h since study (need 12h)\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:730:19)\n\n  console.log\n      Consolidation complete: ✅\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:731:19)\n\n  console.log\n    Taxonomia: 23h since study (need 6h)\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:730:19)\n\n  console.log\n      Consolidation complete: ✅\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:731:19)\n\n  console.log\n    Complex session rescheduling:\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:803:15)\n\n  console.log\n      Current time: 19:00\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:804:15)\n\n  console.log\n      Optimal window: 10:00-14:00\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:805:15)\n\n  console.log\n      Recommended slot: 10:00\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:806:15)\n\n  console.log\n    Adaptive learning analysis:\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:868:15)\n\n  console.log\n      Performance trend: 60% → 70% → 80% → 90%\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:869:15)\n\n  console.log\n      Learning rate: 30.0% improvement\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:870:15)\n\n  console.log\n      Adapted interval: 7 → 13 days\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:871:15)\n\n  console.log\n    Limites: 50% avg → 3 day interval\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:952:17)\n\n  console.log\n    Derivadas Parciais: 50% avg → 2 day interval\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:952:17)\n\n  console.log\n    Integrais Múltiplas: 50% avg → 1 day interval\n\n      at Object.log (tests/unit/rescheduling/spaced-repetition.test.js:952:17)\n\n",
        "errorOutput": "FAIL tests/unit/rescheduling/spaced-repetition.test.js\n  Spaced Repetition Preservation Tests\n    Optimal Interval Preservation\n      × should maintain scientifically-backed review intervals (9 ms)\n      √ should calculate optimal intervals based on session performance (21 ms)\n      × should handle forgetting curve considerations in rescheduling (7 ms)\n    Session Type Sequence Integrity\n      √ should preserve logical session progression (8 ms)\n      √ should handle session type dependencies (10 ms)\n    Learning Momentum Preservation\n      √ should maintain subject-specific learning momentum (34 ms)\n      √ should avoid cognitive interference between subjects (10 ms)\n    Memory Consolidation Optimization\n      √ should optimize for memory consolidation windows (11 ms)\n      √ should consider circadian rhythm in rescheduling (6 ms)\n    Adaptive Learning Algorithm\n      √ should adapt intervals based on historical performance (7 ms)\n      √ should handle difficult topics with shorter intervals (14 ms)\n\n  ● Spaced Repetition Preservation Tests › Optimal Interval Preservation › should maintain scientifically-backed review intervals\n\n    expect(received).toBeGreaterThanOrEqual(expected)\n\n    Expected: >= 3\n    Received:    -1\n\n    \u001b[0m \u001b[90m 125 |\u001b[39m       \u001b[90m// Check spacing to future review\u001b[39m\n     \u001b[90m 126 |\u001b[39m       \u001b[36mconst\u001b[39m spacingDays \u001b[33m=\u001b[39m \u001b[33mMath\u001b[39m\u001b[33m.\u001b[39mceil((secondReviewDate \u001b[33m-\u001b[39m optimalRescheduleDate) \u001b[33m/\u001b[39m (\u001b[35m1000\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m))\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 127 |\u001b[39m       expect(spacingDays)\u001b[33m.\u001b[39mtoBeGreaterThanOrEqual(\u001b[35m3\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// At least 3 days spacing\u001b[39m\n     \u001b[90m     |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 128 |\u001b[39m\n     \u001b[90m 129 |\u001b[39m       \u001b[90m// Verify the review sequence integrity\u001b[39m\n     \u001b[90m 130 |\u001b[39m       \u001b[36mconst\u001b[39m allTopicSessions \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m testDB\u001b[33m.\u001b[39mall(\u001b[0m\n\n      at Object.toBeGreaterThanOrEqual (tests/unit/rescheduling/spaced-repetition.test.js:127:27)\n\n  ● Spaced Repetition Preservation Tests › Optimal Interval Preservation › should handle forgetting curve considerations in rescheduling\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 15\n    Received: 16\n\n    \u001b[0m \u001b[90m 254 |\u001b[39m       \u001b[36mconst\u001b[39m daysOverdue \u001b[33m=\u001b[39m \u001b[33mMath\u001b[39m\u001b[33m.\u001b[39mceil((today \u001b[33m-\u001b[39m plannedReviewDate) \u001b[33m/\u001b[39m (\u001b[35m1000\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m 255 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 256 |\u001b[39m       expect(daysSinceLastStudy)\u001b[33m.\u001b[39mtoBe(\u001b[35m15\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 257 |\u001b[39m       expect(daysOverdue)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m5\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// Significantly overdue\u001b[39m\n     \u001b[90m 258 |\u001b[39m\n     \u001b[90m 259 |\u001b[39m       \u001b[90m// Forgetting curve: retention drops exponentially with time\u001b[39m\u001b[0m\n\n      at Object.toBe (tests/unit/rescheduling/spaced-repetition.test.js:256:34)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 9 passed, 11 total\nSnapshots:   0 total\nTime:        1.317 s\nRan all test suites matching /unit\\\\rescheduling\\\\spaced-repetition.test.js/i.\n"
      }
    },
    "integration": {
      "Full Workflow Integration": {
        "success": false,
        "tests": 0,
        "failures": 0,
        "duration": 9287,
        "output": "\n> meu-cronograma@1.0.0 test\n> jest --detectOpenHandles --forceExit integration/rescheduling-workflow.test.js\n\n",
        "errorOutput": "FAIL tests/integration/rescheduling-workflow.test.js (7.54 s)\n  Rescheduling Integration Tests\n    User 3@3.com Complete Workflow\n      √ should successfully reschedule 7 overdue tasks for user 3@3.com (101 ms)\n      × should respect all constraints during user 3@3.com workflow (52 ms)\n    Real-world Scenario Integration Tests\n      √ should handle concurso student scenario (65 ms)\n      √ should handle working professional scenario (87 ms)\n      √ should handle procrastinator scenario (234 ms)\n      √ should handle ENEM student scenario (142 ms)\n    Performance and Reliability Tests\n      √ should handle stress test scenario efficiently (4743 ms)\n      √ should maintain data consistency across multiple operations (133 ms)\n      √ should provide detailed progress information (142 ms)\n    Error Handling and Edge Cases\n      √ should handle unauthorized access gracefully (29 ms)\n      √ should handle non-existent plan (17 ms)\n      √ should handle plan with no overdue sessions (16 ms)\n\n  ● Rescheduling Integration Tests › User 3@3.com Complete Workflow › should respect all constraints during user 3@3.com workflow\n\n    expect(received).toBeLessThanOrEqual(expected)\n\n    Matcher error: received value must be a number or bigint\n\n    Received has type:  date\n    Received has value: 2025-08-09T03:00:00.000Z\n\n    \u001b[0m \u001b[90m 407 |\u001b[39m         \n     \u001b[90m 408 |\u001b[39m         \u001b[90m// 1. Should not exceed exam date\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 409 |\u001b[39m         expect(date)\u001b[33m.\u001b[39mtoBeLessThanOrEqual(examDate)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 410 |\u001b[39m\n     \u001b[90m 411 |\u001b[39m         \u001b[90m// 2. Should not exceed daily hour limits\u001b[39m\n     \u001b[90m 412 |\u001b[39m         \u001b[36mconst\u001b[39m dayNames \u001b[33m=\u001b[39m [\u001b[32m'sunday'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'monday'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'tuesday'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'wednesday'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'thursday'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'friday'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'saturday'\u001b[39m]\u001b[33m;\u001b[39m\u001b[0m\n\n      at toBeLessThanOrEqual (tests/integration/rescheduling-workflow.test.js:409:22)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/rescheduling-workflow.test.js:405:38)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        7.653 s\nRan all test suites matching /integration\\\\rescheduling-workflow.test.js/i.\n"
      }
    },
    "manual": {
      "User 3@3.com Validation": {
        "success": true,
        "duration": 108,
        "output": "🚀 Starting Manual Rescheduling Tests\n====================================\nConnected to database: C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\db.sqlite\n\n=== Testing User 3@3.com Scenario ===\n✅ User 3@3.com found\n\nAnalyzing study plan for user ID: 1000\nDatabase connection closed.\n\n✅ Manual testing completed\n",
        "errorOutput": "❌ Error in user 3@3.com test: SQLITE_ERROR: no such column: created_at\n"
      },
      "Database Health Check": {
        "success": true,
        "duration": 116,
        "output": "🚀 Starting Manual Rescheduling Tests\n====================================\nConnected to database: C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\db.sqlite\n\n=== Database Health Check ===\nOrphaned sessions: 0\nSessions with invalid dates: 0\nSessions scheduled beyond exam date: 0\nSessions with negative postpone counts: 0\nPlans with corrupted study hours: 0\n\nTotal database health issues: 0\nDatabase health: ✅ HEALTHY\nDatabase connection closed.\n\n✅ Manual testing completed\n",
        "errorOutput": ""
      },
      "Performance Validation": {
        "success": true,
        "duration": 108,
        "output": "🚀 Starting Manual Rescheduling Tests\n====================================\nConnected to database: C:\\Users\\Gabriel\\OneDrive\\Área de Trabalho\\Editaliza\\db.sqlite\n\n=== Performance Testing ===\nDatabase Statistics:\n  Users: 16\n  Study Plans: 7\n  Total Sessions: 204\n  Overdue Sessions: 73\n\nComplex query executed in 1ms\nFound 5 plans with overdue sessions\n\nTotal performance test completed in 3ms\nDatabase connection closed.\n\n✅ Manual testing completed\n",
        "errorOutput": ""
      }
    }
  },
  "coverage": {
    "features": [
      "API endpoint validation",
      "Database integrity",
      "Intelligent rescheduling logic",
      "Constraint validation",
      "Edge case handling",
      "Spaced repetition preservation",
      "Load balancing",
      "Integration workflows"
    ],
    "scenarios": [
      "User 3@3.com (7 overdue tasks)",
      "Concurso student",
      "Working professional",
      "ENEM student",
      "Procrastinator",
      "Perfectionist",
      "Stress test"
    ],
    "safetyGuarantees": [
      "Non-overdue session protection",
      "Daily study time limits",
      "Session count limits",
      "Exam date boundaries",
      "Subject load balancing",
      "Learning continuity",
      "Database integrity",
      "Security enforcement"
    ]
  },
  "deployment": {
    "ready": false,
    "recommendation": "FIX ISSUES BEFORE DEPLOYMENT",
    "blockers": 6
  }
}