/**
 * Verificar problema de sess√µes misturadas
 */

const db = require('./database-postgresql.js');

async function verifyUserSessions() {
    console.log('üîç Analisando problema de sess√µes...\n');
    
    try {
        // 1. Encontrar o usu√°rio correto
        console.log('üìå Buscando usu√°rio editaliza@outlook.com:');
        const user = await db.get(`
            SELECT id, name, email
            FROM users
            WHERE email = $1
        `, ['editaliza@outlook.com']);
        
        if (!user) {
            console.log('‚ùå Usu√°rio n√£o encontrado com este email');
            
            // Buscar usu√°rios similares
            const users = await db.all(`
                SELECT id, name, email
                FROM users
                WHERE email LIKE '%editaliza%' OR name LIKE '%Lucas%'
                ORDER BY id DESC
                LIMIT 10
            `);
            
            console.log('\nüìß Usu√°rios encontrados:');
            users.forEach(u => {
                console.log(`  ID ${u.id}: ${u.name} - ${u.email}`);
            });
            return;
        }
        
        console.log(`‚úÖ Usu√°rio encontrado: ${user.name} (ID: ${user.id})`);
        
        // 2. Buscar planos deste usu√°rio
        const plans = await db.all(`
            SELECT id, plan_name, exam_date
            FROM study_plans
            WHERE user_id = $1
            ORDER BY id DESC
        `, [user.id]);
        
        console.log(`\nüìã Planos do usu√°rio ${user.id}:`);
        if (plans.length === 0) {
            console.log('  ‚ùå Nenhum plano encontrado');
        } else {
            plans.forEach(p => {
                console.log(`  - Plano ID ${p.id}: ${p.plan_name}`);
            });
            
            // 3. Verificar sess√µes do plano mais recente
            const currentPlan = plans[0];
            console.log(`\nüìÖ Sess√µes do plano ${currentPlan.id} (${currentPlan.plan_name}):`);
            
            const sessions = await db.all(`
                SELECT id, subject_name, session_date, status
                FROM study_sessions
                WHERE study_plan_id = $1
                ORDER BY id DESC
                LIMIT 10
            `, [currentPlan.id]);
            
            if (sessions.length === 0) {
                console.log('  ‚ùå Nenhuma sess√£o encontrada');
            } else {
                sessions.forEach(s => {
                    console.log(`  - ID ${s.id}: ${s.subject_name} (${s.status})`);
                });
            }
        }
        
        // 4. Verificar a sess√£o problem√°tica 11910
        console.log('\n‚ö†Ô∏è VERIFICANDO SESS√ÉO 11910:');
        const problemSession = await db.get(`
            SELECT 
                ss.id,
                ss.study_plan_id,
                sp.user_id,
                sp.plan_name,
                u.email as owner_email
            FROM study_sessions ss
            JOIN study_plans sp ON ss.study_plan_id = sp.id
            JOIN users u ON sp.user_id = u.id
            WHERE ss.id = $1
        `, [11910]);
        
        if (problemSession) {
            console.log(`  - Pertence ao plano ${problemSession.study_plan_id} (${problemSession.plan_name})`);
            console.log(`  - Dono: usu√°rio ${problemSession.user_id} (${problemSession.owner_email})`);
            
            if (user && problemSession.user_id !== user.id) {
                console.log('\n‚ùå PROBLEMA IDENTIFICADO:');
                console.log(`  Voc√™ est√° logado como usu√°rio ${user.id} (${user.email})`);
                console.log(`  Mas a sess√£o 11910 pertence ao usu√°rio ${problemSession.user_id} (${problemSession.owner_email})`);
                console.log('\nüîß ISSO SIGNIFICA QUE:');
                console.log('  1. O frontend est√° mostrando dados do plano errado');
                console.log('  2. Provavelmente est√° usando planId 140 (do usu√°rio 148) ao inv√©s do seu plano');
                console.log('\n‚úÖ SOLU√á√ÉO:');
                console.log('  1. Limpar localStorage no navegador');
                console.log('  2. Fazer logout e login novamente');
                console.log('  3. O sistema deve carregar automaticamente SEU plano, n√£o o plano 140');
            }
        }
        
        // 5. Verificar qual plano est√° sendo usado no frontend
        console.log('\nüìä DIAGN√ìSTICO FINAL:');
        console.log('  - O backend est√° funcionando corretamente');
        console.log('  - A valida√ß√£o de seguran√ßa est√° funcionando (404 quando tenta acessar sess√£o de outro usu√°rio)');
        console.log('  - O problema est√° no FRONTEND que est√° carregando o plano 140 ao inv√©s do seu plano');
        console.log('\nüéØ A√á√ÉO NECESS√ÅRIA:');
        console.log('  Execute no console do navegador:');
        console.log('  localStorage.clear(); sessionStorage.clear(); location.reload();');
        
    } catch (error) {
        console.error('‚ùå Erro:', error.message);
    } finally {
        process.exit(0);
    }
}

verifyUserSessions();