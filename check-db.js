// Script para verificar dados no banco
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./db.sqlite');

console.info('üìä Verificando dados no banco de dados...\n');

// Verificar usu√°rios
db.all('SELECT COUNT(*) as count FROM users', (err, rows) => {
    if (err) {
        console.error('‚ùå Erro ao verificar usu√°rios:', err);
        return;
    }
    console.info(`üë§ Usu√°rios cadastrados: ${rows[0].count}`);
    
    // Se h√° usu√°rios, mostrar alguns detalhes
    if (rows[0].count > 0) {
        db.all('SELECT id, email, created_at FROM users LIMIT 3', (err, users) => {
            if (err) {
                console.error('‚ùå Erro ao listar usu√°rios:', err);
                return;
            }
            
            console.info('üìù Usu√°rios encontrados:');
            users.forEach(user => {
                console.info(`  - ID: ${user.id}, Email: ${user.email}, Criado: ${user.created_at}`);
            });
            
            // Verificar planos do primeiro usu√°rio
            const firstUserId = users[0].id;
            db.all('SELECT COUNT(*) as count FROM plans WHERE user_id = ?', [firstUserId], (err, planRows) => {
                if (err) {
                    console.error('‚ùå Erro ao verificar planos:', err);
                    return;
                }
                
                console.info(`\nüìö Planos do usu√°rio ${firstUserId}: ${planRows[0].count}`);
                
                if (planRows[0].count > 0) {
                    db.all('SELECT id, plan_name, exam_date, created_at FROM plans WHERE user_id = ? LIMIT 2', [firstUserId], (err, plans) => {
                        if (err) {
                            console.error('‚ùå Erro ao listar planos:', err);
                            return;
                        }
                        
                        console.info('üìã Planos encontrados:');
                        plans.forEach(plan => {
                            console.info(`  - ID: ${plan.id}, Nome: ${plan.plan_name}, Prova: ${plan.exam_date}`);
                        });
                        
                        // Testar endpoint de progresso
                        const testPlanId = plans[0].id;
                        console.info(`\nüß™ Testando dados para o plano ID: ${testPlanId}`);
                        
                        // Verificar t√≥picos
                        db.all('SELECT COUNT(*) as count FROM topics WHERE plan_id = ?', [testPlanId], (err, topicRows) => {
                            if (err) {
                                console.error('‚ùå Erro ao verificar t√≥picos:', err);
                                return;
                            }
                            console.info(`üìñ T√≥picos no plano: ${topicRows[0].count}`);
                            
                            // Verificar sess√µes
                            db.all('SELECT COUNT(*) as count FROM sessions WHERE plan_id = ?', [testPlanId], (err, sessionRows) => {
                                if (err) {
                                    console.error('‚ùå Erro ao verificar sess√µes:', err);
                                    return;
                                }
                                console.info(`‚è∞ Sess√µes de estudo: ${sessionRows[0].count}`);
                                
                                // Verificar sess√µes conclu√≠das
                                db.all("SELECT COUNT(*) as count FROM sessions WHERE plan_id = ? AND status = 'Conclu√≠do'", [testPlanId], (err, completedRows) => {
                                    if (err) {
                                        console.error('‚ùå Erro ao verificar sess√µes conclu√≠das:', err);
                                        return;
                                    }
                                    console.info(`‚úÖ Sess√µes conclu√≠das: ${completedRows[0].count}`);
                                    
                                    console.info('\nüéØ RESUMO:');
                                    console.info(`- Banco possui dados suficientes para testes: ${planRows[0].count > 0 && topicRows[0].count > 0 ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
                                    console.info(`- Plano ID para testes: ${testPlanId}`);
                                    console.info(`- Progresso esperado: ${completedRows[0].count}/${sessionRows[0].count} sess√µes`);
                                    
                                    db.close();
                                });
                            });
                        });
                    });
                } else {
                    console.info('‚ö†Ô∏è  Nenhum plano encontrado. Crie um plano para testar a interface.');
                    db.close();
                }
            });
        });
    } else {
        console.info('‚ö†Ô∏è  Nenhum usu√°rio encontrado. Registre um usu√°rio para testar.');
        db.close();
    }
});
