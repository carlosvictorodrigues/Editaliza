{
  "name": "meu-cronograma",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "start:prod": "NODE_ENV=production node server.js",
    "dev": "nodemon server.js",
    "dev:debug": "nodemon --inspect server.js",
    "test": "jest --detectOpenHandles --forceExit",
    "test:watch": "jest --watch --detectOpenHandles",
    "test:coverage": "jest --coverage --detectOpenHandles --forceExit",
    "test:auth": "jest --testPathPattern=auth --detectOpenHandles --forceExit",
    "test:fortress": "node tests/fortress/fortress-runner.js",
    "test:fortress:unit": "node tests/fortress/fortress-runner.js --mode=unit",
    "test:fortress:integration": "node tests/fortress/fortress-runner.js --mode=integration",
    "test:fortress:e2e": "node tests/fortress/fortress-runner.js --mode=e2e",
    "test:fortress:full": "node tests/fortress/fortress-runner.js --mode=full --coverage --verbose",
    "test:metrics": "jest --testPathPattern=unit/metrics --detectOpenHandles --forceExit",
    "test:navigation": "jest --testPathPattern=unit/navigation --detectOpenHandles --forceExit",
    "test:api": "jest --testPathPattern=unit/api --detectOpenHandles --forceExit",
    "test:interface": "jest --testPathPattern=unit/interface --detectOpenHandles --forceExit",
    "test:annotations": "jest --testPathPattern=unit/annotations --detectOpenHandles --forceExit",
    "test:sessions": "jest --testPathPattern=unit/sessions --detectOpenHandles --forceExit",
    "test:timer": "jest --testPathPattern=timer --detectOpenHandles --forceExit",
    "security:check": "npm audit --production && npm audit fix --force",
    "security:scan": "npm audit --json > security-report.json",
    "security:update": "npm update && npm audit fix",
    "lint": "eslint . --ext .js",
    "lint:fix": "eslint . --ext .js --fix",
    "precommit": "npm run lint && npm run security:check",
    "prepare": "node -e \"console.log('Checking environment...'); if (process.env.NODE_ENV === 'production' || process.env.DOCKER_BUILD === 'true') { console.log('Production/Docker environment detected - skipping Husky'); process.exit(0); } else { console.log('Development environment - installing Husky'); require('child_process').spawn('npx', ['husky'], { stdio: 'inherit' }); }\"",
    "postinstall": "npm run env:check",
    "env:check": "node scripts/env-check.js",
    "build": "echo '✅ Build completed - Node.js application ready'",
    "build:prod": "NODE_ENV=production npm ci --omit=dev --ignore-scripts && npm run env:check",
    "clean": "node -e \"console.log('Cleaning...'); require('fs').unlinkSync('sessions.db'); console.log('✅ Sessions cleaned')\" 2>/dev/null || echo 'No sessions to clean'",
    "backup": "node -e \"const fs = require('fs'); const date = new Date().toISOString().split('T')[0]; fs.copyFileSync('db.sqlite', 'db_backup_' + date + '.sqlite'); console.log('✅ Database backed up')\"",
    "test:e2e": "jest --testPathPattern=integration/e2e --detectOpenHandles --forceExit",
    "seed-test-data": "node scripts/seed-test-data.js",
    "clean-test-data": "node scripts/seed-test-data.js clean",
    "validate-test-data": "node scripts/seed-test-data.js validate",
    "lint:tests": "eslint tests/ --ext .js --fix",
    "health": "curl -s http://localhost:3000/health | node -e \"process.stdin.pipe(require('fs').createWriteStream('/dev/null')); console.log('✅ Health check completed')\" 2>/dev/null || echo '❌ Server not running'",
    "fortress:report": "node tests/fortress/generate-report.js",
    "fortress:validate": "node tests/fortress/validate-coverage.js",
    "fortress:dashboard": "node tests/fortress/start-dashboard.js",
    "validate:all": "npm run lint && npm run test:fortress:full && npm run fortress:validate",
    "docker:build": "docker build -t editaliza:latest .",
    "docker:build:prod": "docker build -f Dockerfile.prod -t editaliza:prod --build-arg DOCKER_BUILD=true .",
    "docker:run": "docker run -d -p 3000:3000 --name editaliza-container editaliza:latest",
    "docker:stop": "docker stop editaliza-container && docker rm editaliza-container",
    "compose:up": "docker compose -f docker-compose.yml up -d",
    "compose:down": "docker compose -f docker-compose.yml down",
    "compose:prod": "docker compose -f docker-compose.prod.yml --env-file .env.prod up -d --build",
    "compose:prod:down": "docker compose -f docker-compose.prod.yml down",
    "compose:logs": "docker compose logs -f",
    "compose:restart": "docker compose restart",
    "build:artifact": "npm run docker:build:prod && docker save editaliza:prod | gzip > editaliza-prod.tar.gz",
    "deploy:setup": "cp .env.example .env && echo '⚠️  Configure .env before running the app'",
    "deploy:prod:setup": "cp .env.prod.example .env.prod && echo '⚠️  Configure .env.prod before deploying'",
    "deploy:digitalocean": "node scripts/deploy-digitalocean.js",
    "deploy:prepare": "npm run env:check && npm run lint && npm run docker:build:prod"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^6.0.0",
    "bcryptjs": "^2.4.3",
    "better-sqlite3": "^12.2.0",
    "connect-sqlite3": "^0.9.15",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-rate-limit": "^7.5.1",
    "express-session": "^1.18.2",
    "express-validator": "^7.0.1",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2",
    "nodemailer": "^7.0.5",
    "passport": "^0.7.0",
    "passport-google-oauth20": "^2.0.0",
    "pg": "^8.16.3",
    "sqlite3": "^5.1.7",
    "validator": "^13.15.15",
    "winston": "^3.17.0",
    "winston-daily-rotate-file": "^5.0.0",
    "xss": "^1.0.15"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "@types/jest": "^29.5.5",
    "axios": "^1.11.0",
    "eslint": "^9.32.0",
    "eslint-plugin-jest": "^29.0.1",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^30.0.5",
    "jest-extended": "^4.0.2",
    "jsdom": "^26.1.0",
    "lint-staged": "^16.1.5",
    "nodemon": "^3.0.1",
    "sharp": "^0.34.3",
    "supertest": "^6.3.3"
  }
}
