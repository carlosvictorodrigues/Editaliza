/**
 * Script de Verifica√ß√£o do Sistema de Emails
 * Para ser executado no servidor ap√≥s deploy
 */

const emailService = require('./src/services/emailService');

async function verifyEmailSystem() {
    console.log('üîç VERIFICA√á√ÉO DO SISTEMA DE EMAILS - EDITALIZA');
    console.log('‚ïê'.repeat(70));
    
    try {
        // 1. Verificar configura√ß√£o geral
        console.log('\nüìã 1. VERIFICANDO CONFIGURA√á√ÉO...');
        console.log('‚îÄ'.repeat(50));
        
        const hasEmailUser = !!process.env.EMAIL_USER;
        const hasSendGridKey = !!process.env.SENDGRID_API_KEY;
        const appUrl = process.env.APP_URL || 'URL n√£o configurada';
        
        console.log(`‚úì EMAIL_USER: ${hasEmailUser ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
        console.log(`‚úì SENDGRID_API_KEY: ${hasSendGridKey ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
        console.log(`‚úì APP_URL: ${appUrl}`);
        
        // 2. Verificar SendGrid service
        console.log('\nüìß 2. VERIFICANDO SENDGRID SERVICE...');
        console.log('‚îÄ'.repeat(50));
        
        let sendGridAvailable = false;
        try {
            const SendGridService = require('./src/services/sendGridService');
            const status = SendGridService.getStatus();
            sendGridAvailable = status.configured;
            
            console.log(`‚úì SendGrid Module: ‚úÖ Carregado`);
            console.log(`‚úì SendGrid API: ${status.configured ? '‚úÖ Configurado' : '‚ö†Ô∏è N√£o configurado'}`);
            console.log(`‚úì Provider: ${status.provider}`);
            console.log(`‚úì Method: ${status.method}`);
            console.log(`‚úì Daily Limit: ${status.limits.daily}`);
        } catch (error) {
            console.log(`‚úì SendGrid Module: ‚ùå Erro - ${error.message}`);
        }
        
        // 3. Testar email service principal
        console.log('\nüì¨ 3. TESTANDO EMAIL SERVICE...');
        console.log('‚îÄ'.repeat(50));
        
        const testEmail = 'admin@editaliza.com.br';
        const testUser = 'Administrador';
        const testToken = 'test-token-verification-' + Date.now();
        
        console.log('üì§ Executando teste de envio...');
        const result = await emailService.sendPasswordRecoveryEmail(
            testEmail, 
            testUser, 
            testToken,
            process.env.APP_URL
        );
        
        console.log('\nüìä RESULTADO DO TESTE:');
        console.log('‚îÄ'.repeat(30));
        console.log(`‚úì Success: ${result.success ? '‚úÖ' : '‚ùå'}`);
        console.log(`‚úì Provider: ${result.provider || 'simulation'}`);
        console.log(`‚úì Simulated: ${result.simulated ? '‚ö†Ô∏è Sim' : '‚úÖ N√£o'}`);
        
        if (result.resetLink) {
            console.log(`‚úì Reset Link: ${result.resetLink}`);
        }
        if (result.messageId) {
            console.log(`‚úì Message ID: ${result.messageId}`);
        }
        if (result.error) {
            console.log(`‚úì Error: ‚ö†Ô∏è ${result.error}`);
        }
        
        // 4. An√°lise e recomenda√ß√µes
        console.log('\nüéØ 4. AN√ÅLISE E STATUS...');
        console.log('‚îÄ'.repeat(50));
        
        let overallStatus = 'üü¢ SISTEMA OK';
        let recommendations = [];
        
        if (!hasSendGridKey && !hasEmailUser) {
            overallStatus = 'üî¥ CONFIGURA√á√ÉO NECESS√ÅRIA';
            recommendations.push('Configure SENDGRID_API_KEY ou EMAIL_USER/EMAIL_PASS no .env');
        } else if (!hasSendGridKey) {
            overallStatus = 'üü° FUNCIONANDO (FALLBACK)';
            recommendations.push('Configure SENDGRID_API_KEY para emails profissionais em produ√ß√£o');
        } else if (!sendGridAvailable) {
            overallStatus = 'üü° SENDGRID COM PROBLEMAS';
            recommendations.push('Verifique se a SENDGRID_API_KEY est√° correta e ativa');
        }
        
        if (!process.env.APP_URL || process.env.APP_URL.includes('localhost')) {
            recommendations.push('Configure APP_URL=https://app.editaliza.com.br no .env');
        }
        
        console.log(`\nüìä STATUS GERAL: ${overallStatus}`);
        
        if (recommendations.length > 0) {
            console.log('\nüìù RECOMENDA√á√ïES:');
            recommendations.forEach((rec, index) => {
                console.log(`   ${index + 1}. ${rec}`);
            });
        }
        
        // 5. Modo de produ√ß√£o
        console.log('\nüöÄ 5. STATUS PARA LAN√áAMENTO...');
        console.log('‚îÄ'.repeat(50));
        
        const productionReady = sendGridAvailable && process.env.APP_URL && !process.env.APP_URL.includes('localhost');
        
        console.log(`‚úì Emails Reais: ${sendGridAvailable ? '‚úÖ SendGrid ativo' : '‚ö†Ô∏è Apenas simula√ß√£o'}`);
        console.log(`‚úì URL Produ√ß√£o: ${process.env.APP_URL && !process.env.APP_URL.includes('localhost') ? '‚úÖ Configurada' : '‚ö†Ô∏è Localhost'}`);
        console.log(`‚úì Fallback: ‚úÖ Sempre dispon√≠vel`);
        
        console.log(`\nüéØ PRONTO PARA LAN√áAMENTO: ${productionReady ? '‚úÖ SIM' : '‚ö†Ô∏è Configura√ß√£o pendente'}`);
        
        console.log('\n‚ïê'.repeat(70));
        console.log('‚úÖ VERIFICA√á√ÉO CONCLU√çDA');
        
        if (productionReady) {
            console.log('üéâ SISTEMA PRONTO PARA COMERCIALIZA√á√ÉO!');
        } else {
            console.log('‚ö†Ô∏è Complete as configura√ß√µes antes do lan√ßamento');
        }
        
        console.log('‚ïê'.repeat(70));
        
    } catch (error) {
        console.error('\n‚ùå ERRO NA VERIFICA√á√ÉO:');
        console.error('‚îÄ'.repeat(30));
        console.error('Message:', error.message);
        console.error('Stack:', error.stack);
        
        console.log('\nüîß SOLU√á√ÉO:');
        console.log('1. Verifique se os arquivos foram carregados corretamente');
        console.log('2. Execute: npm install @sendgrid/mail');
        console.log('3. Reinicie: pm2 restart editaliza-app');
    }
}

// Executar verifica√ß√£o
verifyEmailSystem();