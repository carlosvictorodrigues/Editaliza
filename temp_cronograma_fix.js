// ===== CORRE√á√ÉO CR√çTICA: Fun√ß√£o global para abrir sess√µes de estudo melhorada =====
function openStudySession(sessionId) {
    try {
        console.log(`üéØ Iniciando sess√£o ${sessionId} no cronograma...`);
        
        // CORRE√á√ÉO: Verificar se h√° um timer ativo para essa sess√£o
        if (window.TimerSystem && TimerSystem.hasActiveTimer(sessionId)) {
            console.log(`‚è∞ Timer ativo encontrado para sess√£o ${sessionId} - continuando sem abrir modal`);
            TimerSystem.continueTimer(sessionId);
            app.showToast('‚è±Ô∏è Timer retomado! Continue estudando.', 'success');
            return; // N√£o abrir modal
        }
        
        // CORRE√á√ÉO: Verificar se h√° um timer pausado com tempo
        if (window.TimerSystem && TimerSystem.timers[sessionId] && TimerSystem.timers[sessionId].elapsed > 1000) {
            const timeStr = TimerSystem.formatTime(TimerSystem.timers[sessionId].elapsed);
            console.log(`‚è∏Ô∏è Timer pausado encontrado para sess√£o ${sessionId} - Tempo: ${timeStr}`);
            
            // Perguntar se quer continuar ou come√ßar do zero (via modal de confirma√ß√£o)
            const continueTimer = confirm(`Voc√™ j√° tem ${timeStr} de estudo nesta sess√£o.\n\nDeseja:\n- OK: Continuar de onde parou\n- Cancelar: Come√ßar do zero`);
            
            if (continueTimer) {
                TimerSystem.continueTimer(sessionId);
                app.showToast(`‚è±Ô∏è Continuando de ${timeStr}`, 'success');
                return; // N√£o abrir modal
            } else {
                // Resetar timer e abrir modal normalmente
                TimerSystem.timers[sessionId] = null;
                delete TimerSystem.timers[sessionId];
            }
        }
        
        // SOLU√á√ÉO: Buscar sess√£o de forma mais flex√≠vel
        let foundSession = null;
        
        // Primeiro, procurar em todas as datas do fullSchedule
        if (typeof fullSchedule !== 'undefined') {
            for (const dateStr in fullSchedule) {
                const sessions = fullSchedule[dateStr];
                foundSession = sessions.find(s => s.id == sessionId);
                if (foundSession) {
                    console.log(`üìö Sess√£o encontrada no cronograma local:`, foundSession);
                    break;
                }
            }
        }
        
        // Se n√£o encontrou, tentar buscar no servidor
        if (!foundSession && app.state.activePlanId) {
            console.log(`üîç Sess√£o n√£o encontrada no cronograma local, buscando no servidor...`);
            
            // Buscar sess√£o individual do servidor
            app.apiFetch(`/schedules/sessions/${sessionId}`)
                .then(sessionData => {
                    console.log(`‚úÖ Sess√£o encontrada no servidor:`, sessionData);
                    StudyChecklist.show(sessionData);
                })
                .catch(error => {
                    console.error(`‚ùå Erro ao buscar sess√£o ${sessionId}:`, error);
                    app.showToast('Erro: Sess√£o n√£o encontrada. Verifique se voc√™ tem permiss√£o para acess√°-la.', 'error');
                });
            return;
        }
        
        if (foundSession) {
            console.log(`‚úÖ Abrindo modal de estudo para sess√£o:`, foundSession);
            StudyChecklist.show(foundSession);
        } else {
            console.error(`‚ùå Sess√£o ${sessionId} n√£o encontrada`);
            app.showToast('Sess√£o n√£o encontrada. Recarregue a p√°gina e tente novamente.', 'error');
        }
        
    } catch (error) {
        console.error(`‚ùå Erro ao abrir sess√£o ${sessionId}:`, error);
        app.showToast('Erro inesperado ao abrir sess√£o. Tente novamente.', 'error');
    }
}