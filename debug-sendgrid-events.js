/**
 * Debug detalhado do SendGrid - Verificar eventos e problemas
 */

require('dotenv').config();
const axios = require('axios');

async function debugSendGrid() {
    console.log('üîç DEBUG DETALHADO DO SENDGRID\n');
    console.log('‚ïê'.repeat(60));
    
    const apiKey = process.env.SENDGRID_API_KEY;
    
    if (!apiKey) {
        console.log('‚ùå SENDGRID_API_KEY n√£o encontrada');
        return;
    }
    
    // 1. Verificar Events via API
    console.log('üìä 1. VERIFICANDO EVENTS API...\n');
    
    try {
        // Buscar eventos recentes
        const eventsResponse = await axios.get('https://api.sendgrid.com/v3/suppression/bounces', {
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('Bounces encontrados:', eventsResponse.data.length);
        if (eventsResponse.data.length > 0) {
            console.log('Emails rejeitados:');
            eventsResponse.data.forEach(bounce => {
                console.log(`  - ${bounce.email}: ${bounce.reason}`);
            });
        }
    } catch (error) {
        console.log('Erro ao buscar bounces:', error.response?.status || error.message);
    }
    
    // 2. Verificar Blocks
    console.log('\nüìä 2. VERIFICANDO BLOCKS...\n');
    
    try {
        const blocksResponse = await axios.get('https://api.sendgrid.com/v3/suppression/blocks', {
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('Blocks encontrados:', blocksResponse.data.length);
        if (blocksResponse.data.length > 0) {
            console.log('Emails bloqueados:');
            blocksResponse.data.forEach(block => {
                console.log(`  - ${block.email}: ${block.reason}`);
            });
        }
    } catch (error) {
        console.log('Erro ao buscar blocks:', error.response?.status || error.message);
    }
    
    // 3. Verificar Invalid Emails
    console.log('\nüìä 3. VERIFICANDO EMAILS INV√ÅLIDOS...\n');
    
    try {
        const invalidResponse = await axios.get('https://api.sendgrid.com/v3/suppression/invalid_emails', {
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('Emails inv√°lidos:', invalidResponse.data.length);
        if (invalidResponse.data.length > 0) {
            invalidResponse.data.forEach(invalid => {
                console.log(`  - ${invalid.email}: ${invalid.reason}`);
            });
        }
    } catch (error) {
        console.log('Erro ao buscar inv√°lidos:', error.response?.status || error.message);
    }
    
    // 4. Teste com email simples de texto
    console.log('\nüìä 4. TESTE COM EMAIL SIMPLES (TEXTO PURO)...\n');
    
    const sgMail = require('@sendgrid/mail');
    sgMail.setApiKey(apiKey);
    
    const simpleEmail = {
        to: 'carlosvictorodrigues@gmail.com',
        from: 'contato@editaliza.com.br',
        subject: 'Teste Simples - Texto Puro',
        text: 'Este √© um teste simples sem HTML.'
    };
    
    try {
        console.log('Enviando email de texto puro...');
        const response = await sgMail.send(simpleEmail);
        console.log('‚úÖ Status:', response[0].statusCode);
        console.log('‚úÖ Message ID:', response[0].headers['x-message-id']);
        
        // Aguardar 3 segundos e verificar status
        console.log('\n‚è≥ Aguardando 3 segundos para verificar status...\n');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
    } catch (error) {
        console.error('‚ùå Erro no envio:', error.response?.body || error.message);
    }
    
    // 5. Verificar configura√ß√£o da conta
    console.log('\nüìä 5. VERIFICANDO CONFIGURA√á√ÉO DA CONTA...\n');
    
    try {
        const userResponse = await axios.get('https://api.sendgrid.com/v3/user/profile', {
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('Perfil da conta:');
        console.log('  Email:', userResponse.data.email);
        console.log('  Username:', userResponse.data.username);
        console.log('  Active:', userResponse.data.active);
        
    } catch (error) {
        console.log('Erro ao buscar perfil:', error.response?.status || error.message);
    }
    
    // 6. Verificar sender authentication
    console.log('\nüìä 6. VERIFICANDO SENDER AUTHENTICATION...\n');
    
    try {
        const sendersResponse = await axios.get('https://api.sendgrid.com/v3/verified_senders', {
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (sendersResponse.data.results) {
            console.log('Remetentes verificados:');
            sendersResponse.data.results.forEach(sender => {
                console.log(`  ${sender.from_email}:`);
                console.log(`    Verificado: ${sender.verified ? '‚úÖ' : '‚ùå'}`);
                console.log(`    Locked: ${sender.locked ? 'Sim' : 'N√£o'}`);
            });
        }
    } catch (error) {
        console.log('Erro ao buscar senders:', error.response?.status || error.message);
    }
    
    // 7. Verificar limites da conta
    console.log('\nüìä 7. POSS√çVEIS CAUSAS DO PROBLEMA:\n');
    console.log('‚îÄ'.repeat(40));
    
    console.log('‚ö†Ô∏è Poss√≠veis causas para "Processing" eterno:');
    console.log('1. Conta SendGrid em modo de revis√£o (nova conta)');
    console.log('2. Conta suspensa ou com restri√ß√µes');
    console.log('3. Limite de envio atingido');
    console.log('4. IP do servidor bloqueado pelo SendGrid');
    console.log('5. Problema com verifica√ß√£o do dom√≠nio (apesar de mostrar verified)');
    
    console.log('\nüí° RECOMENDA√á√ïES:');
    console.log('‚îÄ'.repeat(40));
    console.log('1. Entre em contato com o suporte do SendGrid');
    console.log('2. Verifique se a conta est√° ativa no painel do SendGrid');
    console.log('3. Teste com outro provedor (Amazon SES, Mailgun)');
    console.log('4. Verifique se h√° alertas ou avisos no painel do SendGrid');
    
    console.log('\nüìß ALTERNATIVA IMEDIATA:');
    console.log('‚îÄ'.repeat(40));
    console.log('Use Gmail SMTP com senha de app enquanto resolve o SendGrid:');
    console.log('1. Acesse: https://myaccount.google.com/apppasswords');
    console.log('2. Crie uma senha de app');
    console.log('3. Configure EMAIL_USER e EMAIL_PASS no .env');
    
    console.log('‚ïê'.repeat(60));
}

debugSendGrid();