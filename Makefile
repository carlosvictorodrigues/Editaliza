# =========================================
# EDITALIZA - MAKEFILE
# Comandos simplificados para deploy
# =========================================

.PHONY: help setup build dev prod logs stop clean test health

# Configura√ß√µes
IMAGE_NAME=editaliza
CONTAINER_NAME=editaliza
PORT=3000

## Ajuda
help: ## Mostrar esta ajuda
	@echo "Comandos dispon√≠veis:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

## Setup inicial
setup: ## Configurar ambiente de desenvolvimento
	@echo "üîß Configurando ambiente..."
	@cp .env.example .env 2>/dev/null || echo ".env j√° existe"
	@echo "‚úÖ Configure o arquivo .env antes de continuar"

setup-prod: ## Configurar ambiente de produ√ß√£o
	@echo "üîß Configurando produ√ß√£o..."
	@cp .env.prod.example .env.prod 2>/dev/null || echo ".env.prod j√° existe"
	@echo "‚úÖ Configure o arquivo .env.prod antes de fazer deploy"

## Build
build: ## Construir imagem Docker
	@echo "üî® Construindo imagem..."
	docker build -t $(IMAGE_NAME):latest .

build-prod: ## Construir imagem de produ√ß√£o
	@echo "üî® Construindo imagem de produ√ß√£o..."
	docker build -t $(IMAGE_NAME):prod --target runner .

## Desenvolvimento
dev: ## Iniciar ambiente de desenvolvimento
	@echo "üöÄ Iniciando desenvolvimento..."
	docker-compose up -d
	@echo "‚úÖ Ambiente dispon√≠vel em http://localhost:$(PORT)"

dev-logs: ## Ver logs de desenvolvimento
	docker-compose logs -f

dev-stop: ## Parar ambiente de desenvolvimento
	@echo "üõë Parando desenvolvimento..."
	docker-compose down

## Produ√ß√£o
prod: ## Deploy em produ√ß√£o
	@echo "üöÄ Deploy em produ√ß√£o..."
	@if [ ! -f .env.prod ]; then echo "‚ùå Arquivo .env.prod n√£o encontrado. Execute 'make setup-prod' primeiro"; exit 1; fi
	docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d --build
	@echo "‚úÖ Produ√ß√£o iniciada"

prod-logs: ## Ver logs de produ√ß√£o
	docker-compose -f docker-compose.prod.yml logs -f

prod-stop: ## Parar produ√ß√£o
	@echo "üõë Parando produ√ß√£o..."
	docker-compose -f docker-compose.prod.yml down

## Utilit√°rios
logs: ## Ver logs (development por padr√£o)
	docker-compose logs -f

stop: ## Parar todos os containers
	@echo "üõë Parando todos os containers..."
	docker-compose down 2>/dev/null || true
	docker-compose -f docker-compose.prod.yml down 2>/dev/null || true

restart: ## Reiniciar aplica√ß√£o
	@echo "üîÑ Reiniciando..."
	docker-compose restart

restart-prod: ## Reiniciar produ√ß√£o
	@echo "üîÑ Reiniciando produ√ß√£o..."
	docker-compose -f docker-compose.prod.yml restart

## Health e Status
health: ## Verificar sa√∫de da aplica√ß√£o
	@echo "üè• Verificando sa√∫de..."
	@curl -s http://localhost:$(PORT)/health | jq '.' 2>/dev/null || curl -s http://localhost:$(PORT)/health || echo "‚ùå Aplica√ß√£o n√£o est√° respondendo"

status: ## Status dos containers
	@echo "üìä Status dos containers:"
	@docker-compose ps 2>/dev/null || echo "Nenhum container de desenvolvimento rodando"
	@docker-compose -f docker-compose.prod.yml ps 2>/dev/null || echo "Nenhum container de produ√ß√£o rodando"

## Testes
test: ## Executar testes
	@echo "üß™ Executando testes..."
	npm test

test-full: ## Executar todos os testes
	@echo "üß™ Executando testes completos..."
	npm run test:fortress:full

lint: ## Verificar c√≥digo
	@echo "üîç Verificando c√≥digo..."
	npm run lint

validate: ## Validar projeto completo
	@echo "‚úÖ Validando projeto..."
	npm run validate:all

## Backup
backup: ## Fazer backup do banco
	@echo "üíæ Fazendo backup..."
	npm run backup

## Limpeza
clean: ## Limpar dados de desenvolvimento
	@echo "üßπ Limpando..."
	docker-compose down -v 2>/dev/null || true
	docker system prune -f
	@echo "‚úÖ Limpeza conclu√≠da"

clean-prod: ## Limpar dados de produ√ß√£o (CUIDADO!)
	@echo "‚ö†Ô∏è  Esta opera√ß√£o ir√° remover TODOS os dados de produ√ß√£o!"
	@echo -n "Tem certeza? Digite 'yes' para confirmar: " && read confirm && [ "$$confirm" = "yes" ]
	docker-compose -f docker-compose.prod.yml down -v
	docker volume rm editaliza_data_prod editaliza_uploads_prod editaliza_logs_prod 2>/dev/null || true
	@echo "‚úÖ Dados de produ√ß√£o removidos"

## Artifact
artifact: ## Gerar artefato para deploy
	@echo "üì¶ Gerando artefato..."
	npm run build:artifact
	@echo "‚úÖ Artefato editaliza-prod.tar.gz criado"

## Atualiza√ß√£o
update: ## Atualizar aplica√ß√£o (git pull + rebuild)
	@echo "üîÑ Atualizando aplica√ß√£o..."
	git pull origin main
	make build
	make restart
	sleep 5
	make health
	@echo "‚úÖ Atualiza√ß√£o conclu√≠da"

update-prod: ## Atualizar produ√ß√£o (ZERO DOWNTIME)
	@echo "üîÑ Atualizando produ√ß√£o..."
	git pull origin main
	docker-compose -f docker-compose.prod.yml build
	docker-compose -f docker-compose.prod.yml up -d
	sleep 10
	make health
	@echo "‚úÖ Produ√ß√£o atualizada"

## Debug
debug: ## Entrar no container para debug
	@echo "üêõ Entrando no container..."
	docker exec -it editaliza-dev sh 2>/dev/null || docker exec -it editaliza-prod sh

debug-prod: ## Entrar no container de produ√ß√£o
	@echo "üêõ Entrando no container de produ√ß√£o..."
	docker exec -it editaliza-prod sh

## Info
info: ## Informa√ß√µes do sistema
	@echo "üìã Informa√ß√µes do sistema:"
	@echo "Docker version: $$(docker --version)"
	@echo "Docker Compose version: $$(docker-compose --version)"
	@echo "Node.js version: $$(node --version 2>/dev/null || echo 'Node.js n√£o instalado localmente')"
	@echo "Imagens dispon√≠veis:"
	@docker images | grep editaliza || echo "Nenhuma imagem encontrada"
	@echo "Volumes:"
	@docker volume ls | grep editaliza || echo "Nenhum volume encontrado"

## Configura√ß√£o Docker
docker-setup: ## Configurar Docker (se necess√°rio)
	@echo "üê≥ Verificando Docker..."
	@docker --version > /dev/null 2>&1 || (echo "‚ùå Docker n√£o instalado"; exit 1)
	@docker-compose --version > /dev/null 2>&1 || (echo "‚ùå Docker Compose n√£o instalado"; exit 1)
	@echo "‚úÖ Docker configurado corretamente"

## Comandos de emerg√™ncia
emergency-stop: ## Parar TUDO (emerg√™ncia)
	@echo "üö® PARANDO TUDO..."
	docker stop $$(docker ps -aq) 2>/dev/null || true
	docker-compose down 2>/dev/null || true
	docker-compose -f docker-compose.prod.yml down 2>/dev/null || true

emergency-logs: ## Logs de emerg√™ncia (√∫ltimas 50 linhas)
	@echo "üö® LOGS DE EMERG√äNCIA:"
	docker-compose logs --tail=50 2>/dev/null || echo "Sem logs de desenvolvimento"
	docker-compose -f docker-compose.prod.yml logs --tail=50 2>/dev/null || echo "Sem logs de produ√ß√£o"