/**
 * Contextual Notifications PRO - Sistema Inteligente de Notifica√ß√µes
 * 
 * Este m√≥dulo implementa notifica√ß√µes contextuais baseadas no comportamento
 * do usu√°rio, progresso de estudos e padr√µes de engajamento.
 */

const ContextualNotifications = {
    // Estado interno
    initialized: false,
    userData: null,
    recentNotifications: new Map(), // Deduplica√ß√£o de notifica√ß√µes
    notificationCooldowns: new Map(), // Cooldowns por tipo
    patterns: {
        lastSessionTime: null,
        studyStreak: 0,
        consecutiveDays: 0,
        procrastinationCount: 0,
        lastSubjectStudied: null
    },

    // Configura√ß√µes
    config: {
        enabled: true,
        maxNotificationsPerDay: 6,
        notificationCooldown: 300000, // 5 minutos
        procrastinationThreshold: 3,
        streakMilestones: [3, 7, 14, 21, 30],
        debug: true
    },

    // Inicializa√ß√£o segura
    async init() {
        if (this.initialized) return;
        
        try {
            console.log('üîî Inicializando Sistema de Notifica√ß√µes Contextuais...');
            
            // Verificar depend√™ncias
            if (!window.app) {
                throw new Error('App principal n√£o encontrado');
            }
            
            // Garantir que showToast existe
            if (!window.app.showToast && !window.app.showMessage) {
                console.warn('‚ö†Ô∏è showToast n√£o encontrado, usando fallback');
                window.app.showToast = function(message, type) {
                    if (window.app.showMessage) {
                        window.app.showMessage(message, type);
                    } else {
                        console.log(`üì± ${message} (${type})`);
                    }
                };
            }

            // Carregar dados do usu√°rio
            await this.loadUserData();
            
            // Registrar event listeners de forma segura
            this.setupEventListeners();
            
            // Inicializar detec√ß√£o de padr√µes
            this.initPatternDetection();
            
            this.initialized = true;
            console.log('‚úÖ Sistema de Notifica√ß√µes Contextuais inicializado com sucesso');
            
            // Notifica√ß√£o de boas-vindas (se n√£o for primeira vez hoje)
            const today = new Date().toDateString();
            const lastWelcome = localStorage.getItem('lastWelcomeDate');
            
            if (this.config.showWelcome && lastWelcome !== today) {
                setTimeout(() => {
                    console.log('üîî Disparando mensagem de boas-vindas...');
                    this.showWelcomeMessage();
                    localStorage.setItem('lastWelcomeDate', today);
                }, 3000);
            }
            
            // Teste imediato (apenas em desenvolvimento)
            if (window.location.hostname === 'localhost' && this.config.debug) {
                setTimeout(() => {
                    console.log('üîî TESTE: Notifica√ß√£o de desenvolvimento');
                    this.showContextualToast({
                        type: 'info',
                        title: 'üß™ Sistema Ativo',
                        message: 'Notifica√ß√µes Inteligentes funcionando perfeitamente!',
                        duration: 4000
                    });
                }, 5000);
            }
            
        } catch (error) {
            console.error('‚ùå Erro na inicializa√ß√£o das notifica√ß√µes contextuais:', error);
            // Fallback silencioso - n√£o quebra a aplica√ß√£o
        }
    },

    // Carregamento seguro de dados do usu√°rio
    async loadUserData() {
        try {
            // Tentar carregar dados de gamifica√ß√£o existentes
            if (window.app && window.app.getGamificationData && window.app.state?.activePlanId) {
                this.userData = await window.app.getGamificationData(window.app.state.activePlanId);
                
                if (this.userData) {
                    this.patterns.studyStreak = this.userData.studyStreak || 0;
                    this.patterns.consecutiveDays = this.userData.totalStudyDays || 0;
                }
            }
            
            // Dados do localStorage para padr√µes comportamentais
            const storedPatterns = localStorage.getItem('editaliza_notification_patterns');
            if (storedPatterns) {
                const parsed = JSON.parse(storedPatterns);
                this.patterns = { ...this.patterns, ...parsed };
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao carregar dados do usu√°rio para notifica√ß√µes:', error);
            // Continuar com dados padr√£o
        }
    },

    // Configura√ß√£o de event listeners n√£o invasivos
    setupEventListeners() {
        // Listener para conclus√£o de sess√µes
        document.addEventListener('sessionCompleted', (event) => {
            this.handleSessionCompleted(event.detail);
        });

        // Listener para conquistas
        document.addEventListener('achievementUnlocked', (event) => {
            this.handleAchievement(event.detail);
        });

        // Listener para milestones de XP
        document.addEventListener('xpGained', (event) => {
            this.handleXPGain(event.detail);
        });

        // Listener para mudan√ßas de level
        document.addEventListener('levelUp', (event) => {
            this.handleLevelUp(event.detail);
        });

        // Detec√ß√£o de inatividade
        this.setupInactivityDetection();
    },

    // Detec√ß√£o de padr√µes comportamentais
    initPatternDetection() {
        // Verificar procrastina√ß√£o (usu√°rio abrindo app mas n√£o estudando)
        this.detectProcrastination();
        
        // Verificar consist√™ncia de hor√°rios
        this.analyzeStudyTiming();
        
        // Salvar padr√µes periodicamente
        setInterval(() => this.savePatterns(), 60000); // 1 minuto
    },

    // === HANDLERS DE EVENTOS ===

    handleSessionCompleted(sessionData) {
        if (!this.isEnabled()) return;

        const { sessionType, duration, subject, difficulty, sessionId } = sessionData;
        
        // Criar chave √∫nica para deduplica√ß√£o
        const notificationKey = `session_completed_${sessionId || Date.now()}_${subject}`;
        
        // Verificar se j√° processamos esta notifica√ß√£o recentemente
        if (this.recentNotifications.has(notificationKey)) {
            console.log('üîî Notifica√ß√£o de sess√£o j√° processada, ignorando duplicata:', notificationKey);
            return;
        }
        
        // Verificar cooldown para notifica√ß√µes de sess√£o (30 segundos)
        const cooldownKey = 'session_completion';
        const lastNotification = this.notificationCooldowns.get(cooldownKey);
        const now = Date.now();
        
        if (lastNotification && (now - lastNotification) < 30000) {
            console.log('üîî Cooldown ativo para notifica√ß√µes de sess√£o, ignorando');
            return;
        }
        
        // Registrar notifica√ß√£o para deduplica√ß√£o
        this.recentNotifications.set(notificationKey, now);
        this.notificationCooldowns.set(cooldownKey, now);
        
        // Limpar notifica√ß√µes antigas (manter apenas √∫ltimas 5 minutos)
        this.cleanupOldNotifications();
        
        // Atualizar padr√µes
        this.patterns.lastSessionTime = now;
        this.patterns.lastSubjectStudied = subject;
        this.procrastinationCount = 0; // Reset procrastination counter
        
        console.log('üîî Processando notifica√ß√£o de sess√£o conclu√≠da:', { sessionType, duration, subject, sessionId });
        
        // Mensagem contextual baseada no tipo de sess√£o
        setTimeout(() => {
            this.showSessionCompletionMessage(sessionType, duration, subject, difficulty);
        }, 1000);

        // Verificar streaks e milestones
        this.checkStreakMilestones();
    },

    handleAchievement(achievement) {
        if (!this.isEnabled()) return;
        
        setTimeout(() => {
            this.showAchievementMessage(achievement);
        }, 500);
    },

    handleXPGain(xpData) {
        if (!this.isEnabled()) return;
        
        const { amount, total, source } = xpData;
        
        // Mostrar XP gain apenas para valores significativos
        if (amount >= 50) {
            setTimeout(() => {
                this.showXPMessage(amount, total, source);
            }, 1500);
        }
    },

    handleLevelUp(levelData) {
        if (!this.isEnabled()) return;
        
        setTimeout(() => {
            this.showLevelUpMessage(levelData);
        }, 2000);
    },

    // === TIPOS DE MENSAGENS ===

    showSessionCompletionMessage(sessionType, duration, subject, difficulty) {
        // Verifica√ß√£o adicional para evitar duplicatas na exibi√ß√£o
        const messageKey = `completion_message_${Date.now()}`;
        
        if (this.recentNotifications.has(messageKey)) {
            console.log('üîî Mensagem de conclus√£o j√° exibida, evitando duplicata');
            return;
        }
        
        this.recentNotifications.set(messageKey, Date.now());
        
        const messages = this.getSessionMessages(sessionType, subject, difficulty, duration);
        const message = this.selectRandomMessage(messages);
        
        console.log('üîî Exibindo mensagem de conclus√£o de sess√£o:', { sessionType, subject, message });
        
        this.showContextualToast({
            type: 'celebration',
            title: 'üéâ Sess√£o Conclu√≠da!',
            message: message,
            duration: 6000,
            actions: [
                {
                    text: 'Pr√≥xima Sess√£o',
                    action: () => this.suggestNextSession()
                }
            ]
        });
    },

    showAchievementMessage(achievement) {
        this.showContextualToast({
            type: 'achievement',
            title: 'üèÜ Nova Conquista!',
            message: `Voc√™ desbloqueou: "${achievement.title}"! ${achievement.description}`,
            duration: 8000,
            actions: [
                {
                    text: 'Ver Conquistas',
                    action: () => this.openAchievementsPanel()
                }
            ]
        });
    },

    showXPMessage(amount, total, source) {
        const levelProgress = this.calculateLevelProgress(total);
        
        this.showContextualToast({
            type: 'motivational',
            title: '‚ú® Experi√™ncia Ganha!',
            message: `+${amount} XP! Voc√™ tem ${total} XP total. ${levelProgress}`,
            duration: 5000
        });
    },

    showLevelUpMessage(levelData) {
        this.showContextualToast({
            type: 'celebration',
            title: 'üéñÔ∏è Level Up!',
            message: `Parab√©ns! Voc√™ alcan√ßou: ${levelData.newLevel}! Continue assim!`,
            duration: 8000,
            actions: [
                {
                    text: 'Ver Progresso',
                    action: () => this.openProgressPanel()
                }
            ]
        });
    },

    showWelcomeMessage() {
        const streak = this.patterns.studyStreak;
        let welcomeMessage;

        if (streak === 0) {
            welcomeMessage = "Que bom te ver de volta! Vamos retomar os estudos com for√ßa total! üí™";
        } else if (streak < 3) {
            welcomeMessage = `Voc√™ tem ${streak} ${streak === 1 ? 'dia' : 'dias'} de sequ√™ncia! Continue construindo seu h√°bito! üî•`;
        } else if (streak < 7) {
            welcomeMessage = `Incr√≠vel! ${streak} dias consecutivos! Voc√™ est√° criando um h√°bito s√≥lido! ‚≠ê`;
        } else {
            welcomeMessage = `Que const√¢ncia! ${streak} dias de sequ√™ncia! Voc√™ √© um exemplo de disciplina! üèÜ`;
        }

        this.showContextualToast({
            type: 'motivational',
            title: 'üëã Ol√°!',
            message: welcomeMessage,
            duration: 6000
        });
        
        console.log('üîî Mensagem de boas-vindas exibida:', welcomeMessage);
    },

    // === DETEC√á√ÉO DE PADR√ïES ===

    detectProcrastination() {
        const now = Date.now();
        const lastSession = this.patterns.lastSessionTime;
        
        // Se usu√°rio n√£o estuda h√° mais de 2 dias
        if (lastSession && (now - lastSession) > (48 * 60 * 60 * 1000)) {
            this.patterns.procrastinationCount++;
            
            if (this.patterns.procrastinationCount >= this.config.procrastinationThreshold) {
                this.showProcrastinationNudge();
            }
        }
    },

    showProcrastinationNudge() {
        const nudges = [
            "Que tal come√ßar com apenas 15 minutos de estudo hoje? Pequenos passos fazem grandes diferen√ßas! üå±",
            "Sentindo resist√™ncia para estudar? √â normal! Que tal escolher o t√≥pico mais f√°cil para quebrar o gelo? ‚ùÑÔ∏è",
            "Lembra da sua meta? Cada sess√£o, mesmo curta, te aproxima da aprova√ß√£o! üéØ",
            "Que tal definir um hor√°rio fixo de estudo? A consist√™ncia √© mais importante que a dura√ß√£o! ‚è∞"
        ];

        this.showContextualToast({
            type: 'reminder',
            title: 'üí≠ Pensamento do dia',
            message: this.selectRandomMessage(nudges),
            duration: 8000,
            actions: [
                {
                    text: 'Estudar Agora',
                    action: () => window.location.href = '/cronograma.html'
                }
            ]
        });
    },

    analyzeStudyTiming() {
        const hour = new Date().getHours();
        let timingMessage = null;

        if (hour >= 6 && hour <= 9) {
            timingMessage = "Manh√£ √© um √≥timo hor√°rio para estudar! Seu c√©rebro est√° 23% mais focado agora! üß†";
        } else if (hour >= 14 && hour <= 16) {
            timingMessage = "Tarde perfeita para revis√µes! √â quando a reten√ß√£o de mem√≥ria est√° no pico! üîÑ";
        } else if (hour >= 19 && hour <= 21) {
            timingMessage = "Noite ideal para simulados! Teste seus conhecimentos do dia! üìù";
        }

        if (timingMessage && Math.random() < 0.3) { // 30% chance
            setTimeout(() => {
                this.showContextualToast({
                    type: 'info',
                    title: '‚è∞ Dica de Timing',
                    message: timingMessage,
                    duration: 6000
                });
            }, 5000);
        }
    },

    checkStreakMilestones() {
        const streak = this.patterns.studyStreak;
        
        if (this.config.streakMilestones.includes(streak)) {
            const milestoneMessages = {
                3: "3 dias consecutivos! Voc√™ est√° construindo um h√°bito poderoso! üî•",
                7: "Uma semana inteira! Sua disciplina est√° impressionante! üí™",
                14: "2 semanas de consist√™ncia! Voc√™ √© impar√°vel! ‚≠ê",
                21: "3 semanas! Cientificamente, voc√™ j√° tem um h√°bito consolidado! üß†",
                30: "1 m√™s de estudos! Voc√™ √© oficialmente um concurseiro dedicado! üèÜ"
            };

            this.showContextualToast({
                type: 'celebration',
                title: 'üéä Marco Alcan√ßado!',
                message: milestoneMessages[streak],
                duration: 10000,
                actions: [
                    {
                        text: 'Compartilhar',
                        action: () => this.shareAchievement(streak)
                    }
                ]
            });
        }
    },

    // === MENSAGENS CONTEXTUAIS ===

    getSessionMessages(sessionType, subject, difficulty, duration) {
        const baseMessages = {
            'Novo T√≥pico': [
                `Excelente! Voc√™ expandiu seu conhecimento em ${subject}! O aprendizado de novos conceitos fortalece conex√µes neurais! üß†`,
                `Novo t√≥pico dominado! Em ${subject}, voc√™ est√° construindo uma base s√≥lida para a aprova√ß√£o! üìö`,
                `Parab√©ns por explorar ${subject}! Cada novo t√≥pico √© um passo rumo ao seu objetivo! üéØ`
            ],
            'Revis√£o': [
                `Revis√£o conclu√≠da! A repeti√ß√£o espa√ßada em ${subject} aumenta sua reten√ß√£o em at√© 90%! üîÑ`,
                `√ìtima revis√£o! Voc√™ est√° solidificando ${subject} na mem√≥ria de longo prazo! üíæ`,
                `Revis√£o perfeita! Em ${subject}, voc√™ est√° aplicando a ci√™ncia da aprendizagem! üî¨`
            ],
            'Simulado': [
                `Simulado finalizado! Testar ${subject} na pr√°tica √© essencial para o sucesso na prova! ‚úÖ`,
                `Bem feito! O simulado de ${subject} te prepara para o formato real da prova! üìù`,
                `Simulado conclu√≠do! Voc√™ est√° medindo e melhorando seu desempenho em ${subject}! üìä`
            ]
        };

        let messages = baseMessages[sessionType] || [
            `Sess√£o de ${subject} conclu√≠da! Voc√™ est√° no caminho certo! üöÄ`,
            `Excelente trabalho em ${subject}! Cada minuto conta para sua aprova√ß√£o! ‚è∞`,
            `Parab√©ns! Mais uma sess√£o produtiva de ${subject} finalizada! üéâ`
        ];

        // Adicionar contexto de dura√ß√£o
        if (duration > 60) {
            messages = messages.map(msg => msg + ` Impressionante foco por ${Math.round(duration)} minutos!`);
        }

        // Adicionar contexto de dificuldade
        if (difficulty && difficulty >= 4) {
            messages = messages.map(msg => msg + ` T√≥pico desafiador dominado! üí™`);
        }

        return messages;
    },

    // === UTILIT√ÅRIOS ===

    showContextualToast(options) {
        console.log('üîî Exibindo notifica√ß√£o contextual:', options);
        
        // Fallback para app.showToast se n√£o encontrar container
        if (!document.getElementById('toast-container') && window.app && window.app.showToast) {
            console.log('üîî Usando fallback app.showToast');
            const emoji = options.type === 'celebration' ? 'üéâ' : options.type === 'achievement' ? 'üèÜ' : 'üí°';
            window.app.showToast(`${emoji} ${options.message}`, 'success');
            return;
        }
        
        const container = document.getElementById('toast-container') || this.createToastContainer();

        const toast = document.createElement('div');
        toast.className = 'bg-white rounded-lg shadow-lg border p-4 max-w-sm w-full transform transition-all duration-300 opacity-0 translate-x-full';

        const typeClasses = {
            celebration: 'border-l-4 border-yellow-400 bg-yellow-50',
            achievement: 'border-l-4 border-purple-500 bg-purple-50',
            motivational: 'border-l-4 border-blue-500 bg-blue-50',
            reminder: 'border-l-4 border-red-500 bg-red-50',
            info: 'border-l-4 border-gray-400 bg-gray-50'
        };

        // Extrair emoji do t√≠tulo
        const titleParts = options.title.split(' ');
        const emoji = titleParts[0];
        const titleText = titleParts.slice(1).join(' ');

        toast.innerHTML = `
            <div class="${typeClasses[options.type] || typeClasses.info} rounded-lg p-3">
                <div class="flex items-start space-x-3">
                    <div class="flex-shrink-0">
                        <span class="text-2xl" role="img" aria-hidden="true">${emoji}</span>
                    </div>
                    <div class="flex-1 min-w-0">
                        <h4 class="text-sm font-semibold text-gray-900 mb-1">${titleText}</h4>
                        <p class="text-sm text-gray-700 leading-relaxed">${options.message}</p>
                    </div>
                    <div class="flex-shrink-0">
                        <button type="button" class="inline-flex items-center justify-center w-6 h-6 text-gray-400 hover:text-gray-600 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" aria-label="Fechar notifica√ß√£o">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        `;

        const closeButton = toast.querySelector('button');
        const close = () => {
            toast.classList.add('opacity-0', 'translate-x-full');
            setTimeout(() => toast.remove(), 300);
        };
        closeButton.addEventListener('click', close);

        container.appendChild(toast);

        // Animate in (slide from right)
        requestAnimationFrame(() => {
            toast.classList.remove('opacity-0', 'translate-x-full');
        });

        setTimeout(close, options.duration || 6000);
    },

    createToastContainer() {
        let container = document.getElementById('toast-container');
        if (container) return container;

        container = document.createElement('div');
        container.id = 'toast-container';
        container.className = 'fixed top-5 right-5 z-50 space-y-3';
        document.body.appendChild(container);
        return container;
    },

    selectRandomMessage(messages) {
        return messages[Math.floor(Math.random() * messages.length)];
    },

    calculateLevelProgress(totalXP) {
        // L√≥gica simplificada de progress
        const nextLevel = Math.ceil(totalXP / 500) * 500;
        const remaining = nextLevel - totalXP;
        
        if (remaining <= 50) {
            return `Faltam apenas ${remaining} XP para o pr√≥ximo n√≠vel!`;
        }
        
        return `Continue assim para alcan√ßar ${nextLevel} XP!`;
    },

    setupInactivityDetection() {
        let inactiveTimer;
        
        const resetTimer = () => {
            clearTimeout(inactiveTimer);
            inactiveTimer = setTimeout(() => {
                this.handleInactivity();
            }, 15 * 60 * 1000); // 15 minutos
        };

        ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(event => {
            document.addEventListener(event, resetTimer, true);
        });

        resetTimer();
    },

    handleInactivity() {
        if (!this.isEnabled()) return;

        const inactivityMessages = [
            "Que tal uma pausa ativa? Levante, estique o corpo e volte com tudo! üßò",
            "15 minutos de pausa! Hidrate-se e prepare-se para a pr√≥xima sess√£o! üíß",
            "Momento para respirar! Seu c√©rebro agradece pelas pausas estrat√©gicas! ü´Å"
        ];

        this.showContextualToast({
            type: 'reminder',
            title: '‚è∏Ô∏è Pausa Detectada',
            message: this.selectRandomMessage(inactivityMessages),
            duration: 5000
        });
    },

    // === A√á√ïES ===

    suggestNextSession() {
        if (window.location.pathname !== '/cronograma.html') {
            window.location.href = '/cronograma.html';
        }
    },

    openAchievementsPanel() {
        if (window.location.pathname !== '/plan.html') {
            window.location.href = '/plan.html';
        }
    },

    openProgressPanel() {
        if (window.location.pathname !== '/plan.html') {
            window.location.href = '/plan.html';
        }
    },

    shareAchievement(streak) {
        if (navigator.share) {
            navigator.share({
                title: 'Editaliza - Progresso nos Estudos',
                text: `Consegui manter ${streak} dias consecutivos de estudo com a Editaliza! üî•`,
                url: window.location.href
            });
        }
    },

    // === CONTROLES ===

    isEnabled() {
        return this.config.enabled && this.initialized;
    },

    enable() {
        this.config.enabled = true;
        localStorage.setItem('editaliza_notifications_enabled', 'true');
    },

    disable() {
        this.config.enabled = false;
        localStorage.setItem('editaliza_notifications_enabled', 'false');
    },

    savePatterns() {
        localStorage.setItem('editaliza_notification_patterns', JSON.stringify(this.patterns));
    },

    // Limpar notifica√ß√µes antigas para evitar vazamento de mem√≥ria
    cleanupOldNotifications() {
        const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);
        
        // Limpar notifica√ß√µes antigas
        for (const [key, timestamp] of this.recentNotifications.entries()) {
            if (timestamp < fiveMinutesAgo) {
                this.recentNotifications.delete(key);
            }
        }
        
        // Limpar cooldowns antigos
        for (const [key, timestamp] of this.notificationCooldowns.entries()) {
            if (timestamp < fiveMinutesAgo) {
                this.notificationCooldowns.delete(key);
            }
        }
    },

    // === DEBUG ===
    getStatus() {
        return {
            initialized: this.initialized,
            enabled: this.config.enabled,
            patterns: this.patterns,
            userData: this.userData ? 'Loaded' : 'Not loaded',
            recentNotifications: this.recentNotifications.size,
            cooldowns: this.notificationCooldowns.size
        };
    },

    // M√©todo para teste manual
    testSessionCompletion(sessionId = 3625) {
        console.log('üß™ TESTE: Simulando conclus√£o de sess√£o', sessionId);
        
        // Limpar notifica√ß√µes anteriores para este teste
        const testKey = `session_completed_${sessionId}_Teste`;
        this.recentNotifications.delete(testKey);
        this.notificationCooldowns.delete('session_completion');
        
        // Simular evento de conclus√£o
        this.handleSessionCompleted({
            sessionType: 'Novo T√≥pico',
            duration: 25,
            subject: 'Direito Constitucional',
            difficulty: 3,
            sessionId: sessionId
        });
    },

    // Limpar todos os caches de notifica√ß√£o (para teste)
    clearNotificationCache() {
        this.recentNotifications.clear();
        this.notificationCooldowns.clear();
        console.log('üîÑ Cache de notifica√ß√µes limpo');
    }
};

// Disponibilizar globalmente
window.ContextualNotifications = ContextualNotifications;

// Auto-inicializa√ß√£o segura quando DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => ContextualNotifications.init(), 1000);
    });
} else {
    setTimeout(() => ContextualNotifications.init(), 1000);
}

console.log('üì¶ M√≥dulo ContextualNotifications carregado');