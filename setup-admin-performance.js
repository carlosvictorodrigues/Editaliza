/**
 * SCRIPT DE SETUP PARA OTIMIZA√á√ïES DE PERFORMANCE ADMIN
 * 
 * Este script configura todas as otimiza√ß√µes necess√°rias para
 * eliminar os timeouts das rotas administrativas:
 * 
 * 1. Aplica √≠ndices de performance no PostgreSQL
 * 2. Cria views materializadas para m√©tricas
 * 3. Configura cache warming inicial
 * 4. Executa testes de performance
 * 
 * COMO USAR:
 * node setup-admin-performance.js
 */

const { dbGet, dbAll, dbRun } = require('./database-postgresql');
const fs = require('fs');
const path = require('path');

// =====================================================
// CONFIGURA√á√ÉO DO SETUP
// =====================================================

const SETUP_CONFIG = {
    // Arquivo SQL com √≠ndices de performance
    indexesFile: path.join(__dirname, 'database', 'admin-performance-indexes.sql'),
    
    // Configura√ß√µes de teste
    test: {
        enabled: true,
        userCount: 1000,    // Simular 1000 usu√°rios para teste
        concurrency: 10     // 10 queries simult√¢neas
    },
    
    // Configura√ß√µes de cache warming
    cacheWarming: {
        enabled: true,
        routes: [
            '/admin/system/metrics',
            '/admin/users?page=1&limit=20',
            '/admin/config'
        ]
    }
};

// =====================================================
// FUN√á√ïES UTILIT√ÅRIAS
// =====================================================

/**
 * Log com timestamp
 */
function log(message, type = 'INFO') {
    const timestamp = new Date().toISOString();
    const prefix = `[${timestamp}] [${type}]`;
    console.log(`${prefix} ${message}`);
}

/**
 * Medir tempo de execu√ß√£o
 */
function measureTime(startTime) {
    const endTime = process.hrtime(startTime);
    return (endTime[0] * 1000 + endTime[1] / 1e6).toFixed(2);
}

// =====================================================
// SETUP DE PERFORMANCE
// =====================================================

/**
 * 1. Aplicar √≠ndices de performance
 */
async function setupPerformanceIndexes() {
    log('üîß Aplicando √≠ndices de performance...');
    
    try {
        if (!fs.existsSync(SETUP_CONFIG.indexesFile)) {
            log(`‚ùå Arquivo de √≠ndices n√£o encontrado: ${SETUP_CONFIG.indexesFile}`, 'ERROR');
            return false;
        }
        
        const sqlContent = fs.readFileSync(SETUP_CONFIG.indexesFile, 'utf8');
        
        // Executar SQL em partes (separar por coment√°rios principais)
        const sqlParts = sqlContent
            .split('-- =====')
            .filter(part => part.trim() && !part.trim().startsWith('INSTRU√á√ïES'))
            .map(part => part.trim());
        
        let successCount = 0;
        let errorCount = 0;
        
        for (const [index, sqlPart] of sqlParts.entries()) {
            if (!sqlPart) continue;
            
            try {
                const startTime = process.hrtime();
                
                // Executar comandos SQL separadamente
                const commands = sqlPart
                    .split(';')
                    .map(cmd => cmd.trim())
                    .filter(cmd => cmd && !cmd.startsWith('/*') && !cmd.startsWith('--') && !cmd.startsWith('\\echo'));
                
                for (const command of commands) {
                    if (command.length > 10) { // Ignorar comandos muito pequenos
                        await dbRun(command);
                    }
                }
                
                const time = measureTime(startTime);
                log(`  ‚úÖ Parte ${index + 1} executada em ${time}ms`);
                successCount++;
                
            } catch (error) {
                log(`  ‚ö†Ô∏è  Parte ${index + 1} falhou: ${error.message}`, 'WARN');
                errorCount++;
            }
        }
        
        log(`üìä √çndices aplicados: ${successCount} sucessos, ${errorCount} erros`);
        return successCount > 0;
        
    } catch (error) {
        log(`‚ùå Erro ao aplicar √≠ndices: ${error.message}`, 'ERROR');
        return false;
    }
}

/**
 * 2. Verificar estrutura das tabelas
 */
async function verifyTableStructure() {
    log('üîç Verificando estrutura das tabelas...');
    
    try {
        // Verificar tabelas principais
        const tables = ['users', 'sessions', 'schedules', 'plans', 'tasks', 'progress'];
        const missingTables = [];
        
        for (const table of tables) {
            try {
                const result = await dbGet(`
                    SELECT COUNT(*) as count 
                    FROM information_schema.tables 
                    WHERE table_name = $1
                `, [table]);
                
                if (result.count > 0) {
                    log(`  ‚úÖ Tabela '${table}' encontrada`);
                } else {
                    log(`  ‚ùå Tabela '${table}' n√£o encontrada`, 'WARN');
                    missingTables.push(table);
                }
            } catch (error) {
                log(`  ‚ö†Ô∏è  Erro ao verificar tabela '${table}': ${error.message}`, 'WARN');
                missingTables.push(table);
            }
        }
        
        // Verificar se study_plans existe (pode ser plans na verdade)
        try {
            const studyPlansExists = await dbGet(`
                SELECT COUNT(*) as count 
                FROM information_schema.tables 
                WHERE table_name = 'study_plans'
            `);
            
            if (studyPlansExists.count === 0) {
                log('  üìù Tabela study_plans n√£o existe, usando "plans" como alternativa');
            }
        } catch (error) {
            log('  üìù study_plans n√£o encontrada, continuando com plans');
        }
        
        return missingTables.length === 0;
        
    } catch (error) {
        log(`‚ùå Erro na verifica√ß√£o de estrutura: ${error.message}`, 'ERROR');
        return false;
    }
}

/**
 * 3. Executar testes de performance
 */
async function runPerformanceTests() {
    if (!SETUP_CONFIG.test.enabled) {
        log('üìä Testes de performance desabilitados');
        return true;
    }
    
    log('üöÄ Executando testes de performance...');
    
    try {
        // Teste 1: Query de usu√°rios com pagina√ß√£o
        log('  üîç Teste 1: Query de usu√°rios otimizada');
        const startTime1 = process.hrtime();
        
        const usersResult = await dbAll(`
            SELECT id, email, name, role, created_at 
            FROM users 
            ORDER BY created_at DESC 
            LIMIT 20 OFFSET 0
        `);
        
        const time1 = measureTime(startTime1);
        log(`  ‚ö° Query de usu√°rios: ${time1}ms (${usersResult.length} resultados)`);
        
        // Teste 2: M√©tricas agregadas
        log('  üìà Teste 2: M√©tricas agregadas');
        const startTime2 = process.hrtime();
        
        const metricsResult = await dbGet(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN role = 'admin' THEN 1 END) as admin_users,
                COUNT(CASE WHEN created_at >= NOW() - INTERVAL '24 hours' THEN 1 END) as users_last_24h
            FROM users
        `);
        
        const time2 = measureTime(startTime2);
        log(`  ‚ö° M√©tricas agregadas: ${time2}ms`);
        log(`    üìä Total: ${metricsResult.total_users}, Admins: ${metricsResult.admin_users}, 24h: ${metricsResult.users_last_24h}`);
        
        // Teste 3: Query com filtro textual
        log('  üîç Teste 3: Busca textual otimizada');
        const startTime3 = process.hrtime();
        
        const searchResult = await dbAll(`
            SELECT id, email, name 
            FROM users 
            WHERE email ILIKE '%@%' 
            LIMIT 10
        `);
        
        const time3 = measureTime(startTime3);
        log(`  ‚ö° Busca textual: ${time3}ms (${searchResult.length} resultados)`);
        
        // Teste 4: Verificar views materializadas
        log('  üèóÔ∏è  Teste 4: Views materializadas');
        try {
            const viewTest = await dbGet('SELECT * FROM admin_user_metrics LIMIT 1');
            log(`  ‚úÖ View materializada funcionando: ${JSON.stringify(viewTest)}`);
        } catch (error) {
            log(`  ‚ö†Ô∏è  View materializada n√£o dispon√≠vel: ${error.message}`, 'WARN');
        }
        
        // Avalia√ß√£o de performance
        const avgTime = (parseFloat(time1) + parseFloat(time2) + parseFloat(time3)) / 3;
        log(`üìä Performance m√©dia: ${avgTime.toFixed(2)}ms`);
        
        if (avgTime < 100) {
            log('üéâ Performance EXCELENTE (< 100ms)');
        } else if (avgTime < 500) {
            log('‚úÖ Performance BOA (< 500ms)');
        } else if (avgTime < 1000) {
            log('‚ö†Ô∏è  Performance ACEIT√ÅVEL (< 1s)', 'WARN');
        } else {
            log('‚ùå Performance RUIM (> 1s) - Verificar otimiza√ß√µes', 'ERROR');
        }
        
        return avgTime < 1000;
        
    } catch (error) {
        log(`‚ùå Erro nos testes de performance: ${error.message}`, 'ERROR');
        return false;
    }
}

/**
 * 4. Cache warming inicial
 */
async function setupCacheWarming() {
    if (!SETUP_CONFIG.cacheWarming.enabled) {
        log('üî• Cache warming desabilitado');
        return true;
    }
    
    log('üî• Configurando cache warming...');
    
    try {
        // Importar o cache middleware
        const { adminCache } = require('./src/middleware/admin-cache.middleware');
        
        // Simular requests para as rotas principais
        const mockRequests = SETUP_CONFIG.cacheWarming.routes.map(route => ({
            method: 'GET',
            path: route.split('?')[0],
            query: route.includes('?') ? 
                Object.fromEntries(new URLSearchParams(route.split('?')[1])) : {},
            user: { id: 1 }
        }));
        
        // Pre-aquecer o cache (simulado)
        for (const mockReq of mockRequests) {
            const cacheKey = adminCache.generateKey(mockReq);
            log(`  üî• Preparando cache para: ${mockReq.path}`);
            
            // Em uma implementa√ß√£o real, faria requests HTTP aqui
            // Por enquanto, apenas registrar as chaves
            adminCache.set(cacheKey, { prewarmed: true }, 60000, ['prewarming']);
        }
        
        log('‚úÖ Cache warming configurado');
        return true;
        
    } catch (error) {
        log(`‚ùå Erro no cache warming: ${error.message}`, 'ERROR');
        return false;
    }
}

/**
 * 5. Validar conex√£o e permiss√µes do banco
 */
async function validateDatabaseConnection() {
    log('üîå Validando conex√£o com banco de dados...');
    
    try {
        // Teste b√°sico de conex√£o
        const connectionTest = await dbGet('SELECT NOW() as current_time, version() as pg_version');
        log(`  ‚úÖ Conectado ao PostgreSQL: ${connectionTest.pg_version.split(' ')[0]}`);
        log(`  üïí Hora do servidor: ${connectionTest.current_time}`);
        
        // Verificar permiss√µes para criar √≠ndices
        try {
            await dbRun('SELECT has_table_privilege(current_user, \'users\', \'select\')');
            log('  ‚úÖ Permiss√µes de leitura confirmadas');
        } catch (error) {
            log('  ‚ùå Problemas de permiss√£o de leitura', 'ERROR');
            return false;
        }
        
        // Verificar se pode criar √≠ndices
        try {
            await dbRun(`
                CREATE INDEX IF NOT EXISTS idx_test_setup_temp ON users (id) 
                WHERE id = -1
            `);
            await dbRun('DROP INDEX IF EXISTS idx_test_setup_temp');
            log('  ‚úÖ Permiss√µes para criar √≠ndices confirmadas');
        } catch (error) {
            log('  ‚ö†Ô∏è  N√£o foi poss√≠vel criar √≠ndices - executar como superuser', 'WARN');
        }
        
        return true;
        
    } catch (error) {
        log(`‚ùå Falha na conex√£o: ${error.message}`, 'ERROR');
        return false;
    }
}

// =====================================================
// FUN√á√ÉO PRINCIPAL
// =====================================================

async function setupAdminPerformance() {
    log('üöÄ Iniciando setup de performance administrativo...');
    log('==================================================');
    
    const steps = [
        { name: 'Valida√ß√£o da conex√£o', fn: validateDatabaseConnection },
        { name: 'Verifica√ß√£o de estrutura', fn: verifyTableStructure },
        { name: 'Aplica√ß√£o de √≠ndices', fn: setupPerformanceIndexes },
        { name: 'Testes de performance', fn: runPerformanceTests },
        { name: 'Cache warming', fn: setupCacheWarming }
    ];
    
    let successCount = 0;
    const startTime = process.hrtime();
    
    for (const [index, step] of steps.entries()) {
        log(`\nüìã Passo ${index + 1}/${steps.length}: ${step.name}`);
        log('--------------------------------------------------');
        
        try {
            const stepSuccess = await step.fn();
            if (stepSuccess) {
                log(`‚úÖ ${step.name} conclu√≠do com sucesso`);
                successCount++;
            } else {
                log(`‚ö†Ô∏è  ${step.name} conclu√≠do com avisos`, 'WARN');
            }
        } catch (error) {
            log(`‚ùå ${step.name} falhou: ${error.message}`, 'ERROR');
        }
    }
    
    const totalTime = measureTime(startTime);
    
    log('\n==================================================');
    log('üìä RESUMO DO SETUP');
    log('==================================================');
    log(`‚úÖ Passos bem-sucedidos: ${successCount}/${steps.length}`);
    log(`‚è±Ô∏è  Tempo total: ${totalTime}ms`);
    
    if (successCount === steps.length) {
        log('üéâ SETUP CONCLU√çDO COM SUCESSO!');
        log('üìà As rotas admin agora devem ter performance otimizada');
        log('üîß Pr√≥ximos passos:');
        log('   1. Reinicie a aplica√ß√£o');
        log('   2. Teste as rotas /admin/users e /admin/system/metrics');
        log('   3. Configure cron para refresh das views: SELECT refresh_admin_metrics();');
        return true;
    } else {
        log('‚ö†Ô∏è  SETUP CONCLU√çDO COM AVISOS', 'WARN');
        log('üîç Verifique os logs acima para detalhes');
        return false;
    }
}

// =====================================================
// EXECU√á√ÉO
// =====================================================

// Executar apenas se chamado diretamente
if (require.main === module) {
    setupAdminPerformance()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            log(`üí• Erro cr√≠tico: ${error.message}`, 'ERROR');
            console.error(error);
            process.exit(1);
        });
}

module.exports = {
    setupAdminPerformance,
    SETUP_CONFIG
};