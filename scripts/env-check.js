#!/usr/bin/env node
/**
 * @file scripts/env-check.js
 * @description Verifica√ß√£o robusta de ambiente para produ√ß√£o e desenvolvimento
 * @version 1.0.0
 */

const fs = require('fs');
const path = require('path');
const os = require('os');

// Cores para console
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m',
    bold: '\x1b[1m'
};

const log = {
    success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
    error: (msg) => console.error(`${colors.red}‚ùå ${msg}${colors.reset}`),
    warn: (msg) => console.warn(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
    info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
    title: (msg) => console.log(`${colors.bold}${colors.blue}üîç ${msg}${colors.reset}`)
};

class EnvironmentChecker {
    constructor() {
        this.errors = [];
        this.warnings = [];
        this.env = process.env.NODE_ENV || 'development';
        this.isProduction = this.env === 'production';
        this.isDocker = process.env.DOCKER_BUILD === 'true' || fs.existsSync('/.dockerenv');
    }

    /**
     * Verificar vers√£o do Node.js
     */
    checkNodeVersion() {
        log.title('Verificando Node.js');
        
        const nodeVersion = process.version;
        const majorVersion = parseInt(nodeVersion.split('.')[0].substring(1));
        
        log.info(`Vers√£o do Node.js: ${nodeVersion}`);
        log.info(`Plataforma: ${process.platform} ${process.arch}`);
        
        if (majorVersion < 18) {
            this.errors.push(`Node.js ${nodeVersion} n√£o suportado. Necess√°rio Node.js 18+ para better-sqlite3`);
        } else {
            log.success(`Node.js ${nodeVersion} compat√≠vel`);
        }
    }

    /**
     * Verificar depend√™ncias cr√≠ticas
     */
    checkDependencies() {
        log.title('Verificando depend√™ncias cr√≠ticas');
        
        const criticalDeps = [
            'express',
            'better-sqlite3',
            'bcryptjs',
            'jsonwebtoken',
            'helmet',
            'cors'
        ];

        for (const dep of criticalDeps) {
            try {
                require(dep);
                log.success(`${dep} dispon√≠vel`);
            } catch (error) {
                this.errors.push(`Depend√™ncia cr√≠tica n√£o encontrada: ${dep}`);
            }
        }

        // Verifica√ß√£o especial para better-sqlite3
        try {
            const Database = require('better-sqlite3');
            const testDb = new Database(':memory:');
            testDb.exec('CREATE TABLE test (id INTEGER)');
            testDb.close();
            log.success('better-sqlite3 funcionando corretamente');
        } catch (error) {
            this.errors.push(`better-sqlite3 falhou: ${error.message}`);
        }
    }

    /**
     * Verificar vari√°veis de ambiente
     */
    checkEnvironmentVariables() {
        log.title('Verificando vari√°veis de ambiente');
        
        log.info(`Ambiente: ${this.env}`);
        log.info(`Docker: ${this.isDocker ? 'Sim' : 'N√£o'}`);

        if (this.isProduction) {
            const requiredProdVars = [
                'SESSION_SECRET',
                'JWT_SECRET',
                'JWT_REFRESH_SECRET'
            ];

            for (const varName of requiredProdVars) {
                if (!process.env[varName] || process.env[varName].includes('change_this')) {
                    this.errors.push(`Vari√°vel ${varName} deve ser configurada em produ√ß√£o`);
                } else {
                    log.success(`${varName} configurado`);
                }
            }

            // Verificar Google OAuth se configurado
            if (process.env.GOOGLE_CLIENT_ID || process.env.GOOGLE_CLIENT_SECRET) {
                if (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {
                    this.errors.push('Google OAuth incompleto: CLIENT_ID e CLIENT_SECRET s√£o obrigat√≥rios');
                } else {
                    log.success('Google OAuth configurado');
                }
            }

            // Verificar email se configurado
            if (process.env.EMAIL_USER && !process.env.EMAIL_PASS) {
                this.errors.push('EMAIL_PASS obrigat√≥rio quando EMAIL_USER est√° configurado');
            }
        } else {
            log.info('Modo desenvolvimento - vari√°veis de ambiente opcionais');
        }
    }

    /**
     * Verificar sistema de arquivos
     */
    checkFileSystem() {
        log.title('Verificando sistema de arquivos');
        
        const requiredDirs = ['uploads', 'logs', 'data'];
        const requiredFiles = ['server.js', 'database.js'];

        // Verificar diret√≥rios
        for (const dir of requiredDirs) {
            const dirPath = path.join(process.cwd(), dir);
            if (!fs.existsSync(dirPath)) {
                try {
                    fs.mkdirSync(dirPath, { recursive: true });
                    log.success(`Diret√≥rio ${dir} criado`);
                } catch (error) {
                    this.errors.push(`N√£o foi poss√≠vel criar diret√≥rio ${dir}: ${error.message}`);
                }
            } else {
                log.success(`Diret√≥rio ${dir} existe`);
            }
        }

        // Verificar arquivos essenciais
        for (const file of requiredFiles) {
            const filePath = path.join(process.cwd(), file);
            if (!fs.existsSync(filePath)) {
                this.errors.push(`Arquivo essencial n√£o encontrado: ${file}`);
            } else {
                log.success(`Arquivo ${file} encontrado`);
            }
        }

        // Verificar permiss√µes de escrita
        const testFile = path.join(process.cwd(), 'temp_write_test.txt');
        try {
            fs.writeFileSync(testFile, 'test');
            fs.unlinkSync(testFile);
            log.success('Permiss√µes de escrita OK');
        } catch (error) {
            this.errors.push(`Permiss√µes de escrita insuficientes: ${error.message}`);
        }
    }

    /**
     * Verificar configura√ß√£o de produ√ß√£o
     */
    checkProductionConfig() {
        if (!this.isProduction) return;

        log.title('Verificando configura√ß√£o de produ√ß√£o');

        // Verificar se Husky n√£o vai executar
        if (process.env.HUSKY !== '0') {
            this.warnings.push('HUSKY deveria ser desabilitado em produ√ß√£o (HUSKY=0)');
        } else {
            log.success('Husky desabilitado para produ√ß√£o');
        }

        // Verificar se n√£o tem depend√™ncias de desenvolvimento
        const packagePath = path.join(process.cwd(), 'package.json');
        if (fs.existsSync(packagePath)) {
            const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            const devDepsExist = fs.existsSync(path.join(process.cwd(), 'node_modules', 'nodemon'));
            
            if (devDepsExist) {
                this.warnings.push('Depend√™ncias de desenvolvimento detectadas em produ√ß√£o');
            } else {
                log.success('Sem depend√™ncias de desenvolvimento');
            }
        }

        // Verificar configura√ß√µes de seguran√ßa
        if (process.env.HOST === '0.0.0.0') {
            log.success('HOST configurado para 0.0.0.0 (Docker/produ√ß√£o)');
        }

        if (process.env.PORT) {
            log.success(`PORT configurado: ${process.env.PORT}`);
        }
    }

    /**
     * Verificar recursos do sistema
     */
    checkSystemResources() {
        log.title('Verificando recursos do sistema');

        const totalMemory = Math.round(os.totalmem() / 1024 / 1024 / 1024 * 100) / 100;
        const freeMemory = Math.round(os.freemem() / 1024 / 1024 / 1024 * 100) / 100;
        const cpuCount = os.cpus().length;

        log.info(`RAM Total: ${totalMemory}GB`);
        log.info(`RAM Livre: ${freeMemory}GB`);
        log.info(`CPUs: ${cpuCount}`);

        if (totalMemory < 0.5) {
            this.warnings.push('Pouca RAM dispon√≠vel (<512MB) - considere aumentar recursos');
        }

        if (freeMemory < 0.1) {
            this.warnings.push('Pouca RAM livre (<100MB) - sistema pode ficar lento');
        }

        const loadAvg = os.loadavg();
        if (loadAvg[0] > cpuCount) {
            this.warnings.push(`Carga alta do sistema: ${loadAvg[0].toFixed(2)}`);
        }
    }

    /**
     * Executar todas as verifica√ß√µes
     */
    async runAllChecks() {
        console.log(`${colors.bold}${colors.blue}üîç VERIFICA√á√ÉO DE AMBIENTE - EDITALIZA${colors.reset}`);
        console.log(`${colors.blue}============================================${colors.reset}\n`);

        this.checkNodeVersion();
        this.checkDependencies();
        this.checkEnvironmentVariables();
        this.checkFileSystem();
        this.checkProductionConfig();
        this.checkSystemResources();

        // Relat√≥rio final
        console.log(`\n${colors.bold}${colors.blue}üìã RELAT√ìRIO FINAL${colors.reset}`);
        console.log(`${colors.blue}====================${colors.reset}`);

        if (this.errors.length === 0 && this.warnings.length === 0) {
            log.success('Todas as verifica√ß√µes passaram!');
            log.success(`Ambiente ${this.env.toUpperCase()} pronto para execu√ß√£o`);
        } else {
            if (this.errors.length > 0) {
                console.log(`\n${colors.red}‚ùå ERROS CR√çTICOS:${colors.reset}`);
                this.errors.forEach(error => log.error(error));
            }

            if (this.warnings.length > 0) {
                console.log(`\n${colors.yellow}‚ö†Ô∏è  AVISOS:${colors.reset}`);
                this.warnings.forEach(warning => log.warn(warning));
            }

            if (this.errors.length > 0) {
                log.error('Corrija os erros cr√≠ticos antes de continuar');
                process.exit(1);
            } else {
                log.warn('Avisos encontrados, mas sistema pode continuar');
            }
        }

        console.log(`\n${colors.green}üöÄ Sistema verificado e pronto!${colors.reset}\n`);
    }
}

// Executar verifica√ß√£o se chamado diretamente
if (require.main === module) {
    const checker = new EnvironmentChecker();
    checker.runAllChecks().catch(console.error);
}

module.exports = EnvironmentChecker;