#!/usr/bin/env node

/**
 * Script de Health Check completo
 * Verifica todos os componentes cr√≠ticos do sistema
 */

const fetch = require('node-fetch');
const { Client } = require('pg');

const PROD_URL = 'https://app.editaliza.com.br';
const LOCAL_URL = 'http://localhost:3000';

// Usar URL de produ√ß√£o se n√£o estiver em localhost
const BASE_URL = process.env.NODE_ENV === 'production' ? PROD_URL : LOCAL_URL;

// Configura√ß√£o do banco
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'editaliza_db',
    user: process.env.DB_USER || 'editaliza_user',
    password: process.env.DB_PASSWORD || 'Editaliza@2025#Secure'
};

const checks = {
    server: false,
    database: false,
    sessions: false,
    auth: false,
    criticalTables: []
};

async function checkServer() {
    console.log('\nüîç Verificando servidor...');
    try {
        const response = await fetch(`${BASE_URL}/health`);
        if (response.status === 200) {
            checks.server = true;
            console.log('‚úÖ Servidor respondendo');
            return true;
        }
    } catch (error) {
        console.error('‚ùå Servidor n√£o est√° respondendo:', error.message);
    }
    return false;
}

async function checkDatabase() {
    console.log('\nüîç Verificando banco de dados...');
    const client = new Client(dbConfig);
    
    try {
        await client.connect();
        
        // Testar conex√£o
        const result = await client.query('SELECT NOW()');
        checks.database = true;
        console.log('‚úÖ Conex√£o com banco OK');
        
        // Verificar tabelas cr√≠ticas
        const criticalTables = [
            'users',
            'study_plans',
            'sessions',
            'login_attempts',
            'subjects',
            'topics',
            'study_sessions'
        ];
        
        console.log('\nüìã Verificando tabelas cr√≠ticas:');
        for (const table of criticalTables) {
            const tableCheck = await client.query(`
                SELECT COUNT(*) FROM information_schema.tables 
                WHERE table_name = $1
            `, [table]);
            
            if (tableCheck.rows[0].count === '1') {
                checks.criticalTables.push(table);
                console.log(`   ‚úÖ ${table}`);
            } else {
                console.log(`   ‚ùå ${table} - N√ÉO EXISTE!`);
            }
        }
        
        // Verificar tabela sessions espec√≠ficamente
        const sessionCheck = await client.query(`
            SELECT COUNT(*) FROM information_schema.tables 
            WHERE table_name = 'sessions'
        `);
        
        if (sessionCheck.rows[0].count === '1') {
            checks.sessions = true;
            
            // Limpar sess√µes expiradas
            const deleted = await client.query(`
                DELETE FROM sessions 
                WHERE expire < NOW() 
                RETURNING sid
            `);
            
            if (deleted.rowCount > 0) {
                console.log(`\nüßπ ${deleted.rowCount} sess√µes expiradas removidas`);
            }
        }
        
        await client.end();
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro no banco de dados:', error.message);
        await client.end();
        return false;
    }
}

async function checkAuth() {
    console.log('\nüîç Testando autentica√ß√£o...');
    try {
        // Tentar login com usu√°rio de teste
        const loginResponse = await fetch(`${BASE_URL}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                email: 'teste@teste.com',
                password: '123456'
            })
        });
        
        if (loginResponse.status === 200) {
            const data = await loginResponse.json();
            if (data.token) {
                checks.auth = true;
                console.log('‚úÖ Sistema de autentica√ß√£o OK');
                
                // Testar endpoint protegido
                const profileResponse = await fetch(`${BASE_URL}/profile`, {
                    headers: { 'Authorization': `Bearer ${data.token}` }
                });
                
                if (profileResponse.status === 200) {
                    console.log('‚úÖ Endpoints protegidos OK');
                }
            }
        } else if (loginResponse.status === 401) {
            console.log('‚ö†Ô∏è  Usu√°rio de teste n√£o existe ou senha incorreta');
        }
    } catch (error) {
        console.error('‚ùå Erro na autentica√ß√£o:', error.message);
    }
}

async function generateReport() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä RELAT√ìRIO DE SA√öDE DO SISTEMA');
    console.log('='.repeat(60));
    
    const totalChecks = 4;
    const passedChecks = [
        checks.server,
        checks.database,
        checks.sessions,
        checks.auth
    ].filter(Boolean).length;
    
    const healthScore = Math.round((passedChecks / totalChecks) * 100);
    
    console.log(`\nüè• Health Score: ${healthScore}%`);
    
    if (healthScore === 100) {
        console.log('‚úÖ Sistema 100% saud√°vel!');
    } else if (healthScore >= 75) {
        console.log('‚ö†Ô∏è  Sistema funcional mas com alguns problemas');
    } else if (healthScore >= 50) {
        console.log('‚ö†Ô∏è  Sistema com problemas significativos');
    } else {
        console.log('üö® Sistema cr√≠tico - necessita aten√ß√£o imediata!');
    }
    
    console.log('\nüìã Detalhes:');
    console.log(`   Servidor: ${checks.server ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Banco de dados: ${checks.database ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Tabela sessions: ${checks.sessions ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Autentica√ß√£o: ${checks.auth ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Tabelas cr√≠ticas: ${checks.criticalTables.length}/7`);
    
    // Recomenda√ß√µes
    if (!checks.sessions) {
        console.log('\n‚ö†Ô∏è  A√á√ÉO NECESS√ÅRIA:');
        console.log('   Execute: node scripts/init-database.js');
    }
    
    return healthScore;
}

async function runHealthCheck() {
    console.log('üè• HEALTH CHECK - EDITALIZA');
    console.log('Ambiente:', process.env.NODE_ENV || 'development');
    console.log('URL:', BASE_URL);
    
    await checkServer();
    await checkDatabase();
    await checkAuth();
    
    const score = await generateReport();
    
    // Exit code baseado no score
    if (score < 50) {
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    runHealthCheck();
}

module.exports = { runHealthCheck };