const { Pool } = require('pg');

const pool = new Pool({
    host: '127.0.0.1',
    port: 5432,
    database: 'editaliza_db',
    user: 'editaliza_user',
    password: '1a2b3c4d'
});

async function cleanSessions() {
    try {
        console.log('\nüóëÔ∏è LIMPANDO SESS√ïES √ìRF√ÉS DO PLANO 140...');
        console.log('=========================================\n');
        
        // Mostrar antes
        const beforeResult = await pool.query(`
            SELECT COUNT(*) as total FROM study_sessions WHERE study_plan_id = 140
        `);
        console.log(`üìä Antes: ${beforeResult.rows[0].total} sess√µes no plano 140`);
        
        // Deletar sess√µes √≥rf√£s
        const deleteResult = await pool.query(
            'DELETE FROM study_sessions WHERE study_plan_id = 140 AND user_id IS NULL'
        );
        console.log(`\n‚úÖ ${deleteResult.rowCount} sess√µes √≥rf√£s deletadas!`);
        
        // Mostrar depois
        const afterResult = await pool.query(`
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN status = 'Conclu√≠do' THEN 1 END) as concluidas,
                COUNT(CASE WHEN DATE(session_date) = CURRENT_DATE THEN 1 END) as hoje
            FROM study_sessions 
            WHERE user_id = 148
        `);
        
        console.log('\nüìä SITUA√á√ÉO ATUAL DO USU√ÅRIO u@u.com:');
        console.log('======================================');
        console.log(`Total de sess√µes: ${afterResult.rows[0].total}`);
        console.log(`Sess√µes conclu√≠das: ${afterResult.rows[0].concluidas}`);
        console.log(`Sess√µes de hoje: ${afterResult.rows[0].hoje}`);
        
        // Adicionar 3 sess√µes de teste para hoje
        console.log('\n‚ûï Adicionando 3 sess√µes de teste para HOJE...');
        
        for (let i = 1; i <= 3; i++) {
            const result = await pool.query(`
                INSERT INTO study_sessions (
                    user_id,
                    study_plan_id,
                    session_type,
                    status,
                    session_date,
                    created_at,
                    updated_at,
                    time_studied_seconds,
                    duration_minutes
                ) VALUES (
                    148,
                    140,
                    'Novo T√≥pico',
                    'Conclu√≠do',
                    CURRENT_DATE,
                    NOW(),
                    NOW(),
                    1800,
                    30
                ) RETURNING id
            `);
            console.log(`  ‚úì Sess√£o ${i} criada com ID: ${result.rows[0].id}`);
        }
        
        // Verificar resultado final
        const finalResult = await pool.query(`
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN status = 'Conclu√≠do' THEN 1 END) as concluidas,
                COUNT(CASE WHEN DATE(session_date) = CURRENT_DATE THEN 1 END) as hoje
            FROM study_sessions 
            WHERE user_id = 148
        `);
        
        console.log('\nüéâ RESULTADO FINAL:');
        console.log('===================');
        console.log(`Total de sess√µes: ${finalResult.rows[0].total}`);
        console.log(`Sess√µes conclu√≠das: ${finalResult.rows[0].concluidas}`);
        console.log(`Sess√µes de hoje: ${finalResult.rows[0].hoje}`);
        
        // Calcular n√≠vel correto
        const completed = parseInt(finalResult.rows[0].concluidas);
        let nivel = 1;
        let titulo = 'Pagador de Inscri√ß√£o üí∏';
        
        if (completed >= 300) { nivel = 10; titulo = 'Lenda Viva dos Concursos üëë'; }
        else if (completed >= 230) { nivel = 9; titulo = 'Patrim√¥nio P√∫blico üëë'; }
        else if (completed >= 170) { nivel = 8; titulo = 'Veterano de 7 Bancas üòé'; }
        else if (completed >= 120) { nivel = 7; titulo = 'Quase Nomeado üè∑Ô∏è'; }
        else if (completed >= 80) { nivel = 6; titulo = 'Terror do Cespe üëπ'; }
        else if (completed >= 50) { nivel = 5; titulo = 'Fiscal de Gabarito üîç'; }
        else if (completed >= 30) { nivel = 4; titulo = 'Estrategista de Chute üé≤'; }
        else if (completed >= 15) { nivel = 3; titulo = 'Ca√ßador de Quest√µes üéØ'; }
        else if (completed >= 5) { nivel = 2; titulo = 'Sobrevivente do Primeiro PDF üìÑ'; }
        
        console.log(`\nüèÜ N√≠vel atual: ${nivel} - ${titulo}`);
        console.log(`   Pr√≥ximo n√≠vel em: ${nivel < 10 ? (nivel === 1 ? 5 - completed : nivel === 2 ? 15 - completed : nivel === 3 ? 30 - completed : 'calcular...') + ' sess√µes' : 'N√≠vel m√°ximo!'}`);
        
    } catch (error) {
        console.error('‚ùå Erro:', error.message);
    } finally {
        await pool.end();
        console.log('\n‚ú® Processo conclu√≠do! Recarregue a p√°gina para ver as atualiza√ß√µes.');
    }
}

cleanSessions();