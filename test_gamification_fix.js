const path = require('path');

// Simular o ambiente do servidor
process.env.NODE_ENV = 'development';

// Simular m√≥dulos necess√°rios
const planService = require('./src/services/planService');

async function testGamificationFix() {
    try {
        console.log('=== TESTE DA CORRE√á√ÉO DA GAMIFICA√á√ÉO ===\n');
        
        const userId = 1006; // ID do usu√°rio c@c.com
        const planId = 1016; // ID do plano de estudo
        
        console.log(`Testando gamifica√ß√£o para usu√°rio ${userId}, plano ${planId}...`);
        
        // Tentar obter dados de gamifica√ß√£o
        const gamificationData = await planService.getGamification(planId, userId);
        
        console.log('‚úÖ Corre√ß√£o bem-sucedida! Dados de gamifica√ß√£o obtidos:');
        console.log('\nüìä ESTAT√çSTICAS:');
        console.log(`   XP atual: ${gamificationData.experiencePoints}`);
        console.log(`   N√≠vel: ${gamificationData.concurseiroLevel}`);
        console.log(`   Rank atual: ${gamificationData.currentRank.title}`);
        console.log(`   Descri√ß√£o: ${gamificationData.currentRank.description}`);
        console.log(`   Pr√≥ximo rank: ${gamificationData.nextRank ? gamificationData.nextRank.title : 'Rank m√°ximo!'}`);
        console.log(`   Progresso do rank: ${gamificationData.rankProgress.toFixed(1)}%`);
        
        console.log('\nüèÜ CONQUISTAS:');
        if (gamificationData.achievements && gamificationData.achievements.length > 0) {
            gamificationData.achievements.forEach((achievement, index) => {
                console.log(`   ${index + 1}. ${achievement.title}: ${achievement.description}`);
            });
        } else {
            console.log('   Nenhuma conquista ainda (normal para usu√°rio sem sess√µes conclu√≠das)');
        }
        
        console.log('\nüìà OUTRAS ESTAT√çSTICAS:');
        console.log(`   Sequ√™ncia atual: ${gamificationData.studyStreak || gamificationData.currentStreak} dias`);
        console.log(`   Dias √∫nicos de estudo: ${gamificationData.totalStudyDays}`);
        console.log(`   Total de sess√µes conclu√≠das: ${gamificationData.totalCompletedSessions}`);
        console.log(`   Total de t√≥picos conclu√≠dos: ${gamificationData.completedTopicsCount}`);
        console.log(`   T√≥picos at√© pr√≥ximo rank: ${gamificationData.topicsToNextLevel || 'N/A'}`);
        
    } catch (error) {
        console.error('‚ùå Erro ainda persiste:', error.message);
        console.error('Stack trace:', error.stack);
    }
}

testGamificationFix();